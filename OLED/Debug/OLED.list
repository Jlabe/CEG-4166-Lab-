
OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001714  0800a4c0  0800a4c0  0001a4c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbd4  0800bbd4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbd4  0800bbd4  0001bbd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbdc  0800bbdc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbdc  0800bbdc  0001bbdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbe0  0800bbe0  0001bbe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800bbe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005020  200001e0  0800bdc4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005200  0800bdc4  00025200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c817  00000000  00000000  00020253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e36  00000000  00000000  0003ca6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019b8  00000000  00000000  000408a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001420  00000000  00000000  00042258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026512  00000000  00000000  00043678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001eb1c  00000000  00000000  00069b8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec74d  00000000  00000000  000886a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007efc  00000000  00000000  00174df4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0017ccf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a4a4 	.word	0x0800a4a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800a4a4 	.word	0x0800a4a4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <main>:
  * @retval int

  */
int main(void)

{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b09c      	sub	sp, #112	; 0x70
 8000f88:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */

	char msg[100];

	xTaskCreate(DisplayTask, "task2", 100, NULL, configMAX_PRIORITIES - 1, &Task2Handle);
 8000f8a:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <main+0x58>)
 8000f8c:	9301      	str	r3, [sp, #4]
 8000f8e:	2337      	movs	r3, #55	; 0x37
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2300      	movs	r3, #0
 8000f94:	2264      	movs	r2, #100	; 0x64
 8000f96:	4912      	ldr	r1, [pc, #72]	; (8000fe0 <main+0x5c>)
 8000f98:	4812      	ldr	r0, [pc, #72]	; (8000fe4 <main+0x60>)
 8000f9a:	f004 fe0c 	bl	8005bb6 <xTaskCreate>

	xTaskCreate(PotentiometerReadTask, "task1", 100, NULL, configMAX_PRIORITIES - 1, &Task1Handle);
 8000f9e:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <main+0x64>)
 8000fa0:	9301      	str	r3, [sp, #4]
 8000fa2:	2337      	movs	r3, #55	; 0x37
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	2264      	movs	r2, #100	; 0x64
 8000faa:	4910      	ldr	r1, [pc, #64]	; (8000fec <main+0x68>)
 8000fac:	4810      	ldr	r0, [pc, #64]	; (8000ff0 <main+0x6c>)
 8000fae:	f004 fe02 	bl	8005bb6 <xTaskCreate>

  HAL_Init();
 8000fb2:	f000 ffa1 	bl	8001ef8 <HAL_Init>

  SystemClock_Config();
 8000fb6:	f000 f81f 	bl	8000ff8 <SystemClock_Config>

  MX_GPIO_Init();
 8000fba:	f000 f935 	bl	8001228 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fbe:	f000 f909 	bl	80011d4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000fc2:	f000 f8d9 	bl	8001178 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000fc6:	f000 f885 	bl	80010d4 <MX_ADC1_Init>

  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc1);
 8000fca:	480a      	ldr	r0, [pc, #40]	; (8000ff4 <main+0x70>)
 8000fcc:	f001 f83e 	bl	800204c <HAL_ADC_Start>
  SSD1306_Init();
 8000fd0:	f000 fa34 	bl	800143c <SSD1306_Init>
  osMessageQDef(Q, 16, uint16_t);
  vTaskStartScheduler();
 8000fd4:	f004 ff34 	bl	8005e40 <vTaskStartScheduler>

  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <main+0x54>
 8000fda:	bf00      	nop
 8000fdc:	200002e4 	.word	0x200002e4
 8000fe0:	0800a4c0 	.word	0x0800a4c0
 8000fe4:	08001375 	.word	0x08001375
 8000fe8:	200002e0 	.word	0x200002e0
 8000fec:	0800a4c8 	.word	0x0800a4c8
 8000ff0:	08001309 	.word	0x08001309
 8000ff4:	200001fc 	.word	0x200001fc

08000ff8 <SystemClock_Config>:
  }

}

void SystemClock_Config(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b094      	sub	sp, #80	; 0x50
 8000ffc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	2234      	movs	r2, #52	; 0x34
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f007 f953 	bl	80082b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800100c:	f107 0308 	add.w	r3, r7, #8
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800101c:	2300      	movs	r3, #0
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	4b2a      	ldr	r3, [pc, #168]	; (80010cc <SystemClock_Config+0xd4>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	4a29      	ldr	r2, [pc, #164]	; (80010cc <SystemClock_Config+0xd4>)
 8001026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102a:	6413      	str	r3, [r2, #64]	; 0x40
 800102c:	4b27      	ldr	r3, [pc, #156]	; (80010cc <SystemClock_Config+0xd4>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001038:	2300      	movs	r3, #0
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	4b24      	ldr	r3, [pc, #144]	; (80010d0 <SystemClock_Config+0xd8>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001044:	4a22      	ldr	r2, [pc, #136]	; (80010d0 <SystemClock_Config+0xd8>)
 8001046:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800104a:	6013      	str	r3, [r2, #0]
 800104c:	4b20      	ldr	r3, [pc, #128]	; (80010d0 <SystemClock_Config+0xd8>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001058:	2302      	movs	r3, #2
 800105a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800105c:	2301      	movs	r3, #1
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001060:	2310      	movs	r3, #16
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001064:	2302      	movs	r3, #2
 8001066:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001068:	2300      	movs	r3, #0
 800106a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800106c:	2310      	movs	r3, #16
 800106e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001070:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001074:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001076:	2304      	movs	r3, #4
 8001078:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800107a:	2302      	movs	r3, #2
 800107c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800107e:	2302      	movs	r3, #2
 8001080:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001082:	f107 031c 	add.w	r3, r7, #28
 8001086:	4618      	mov	r0, r3
 8001088:	f002 ff50 	bl	8003f2c <HAL_RCC_OscConfig>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001092:	f000 f9cd 	bl	8001430 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001096:	230f      	movs	r3, #15
 8001098:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800109a:	2302      	movs	r3, #2
 800109c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010ac:	f107 0308 	add.w	r3, r7, #8
 80010b0:	2102      	movs	r1, #2
 80010b2:	4618      	mov	r0, r3
 80010b4:	f002 fbbe 	bl	8003834 <HAL_RCC_ClockConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80010be:	f000 f9b7 	bl	8001430 <Error_Handler>
  }
}
 80010c2:	bf00      	nop
 80010c4:	3750      	adds	r7, #80	; 0x50
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40007000 	.word	0x40007000

080010d4 <MX_ADC1_Init>:

static void MX_ADC1_Init(void) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig = {0};
 80010da:	463b      	mov	r3, r7
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
  hadc1.Instance = ADC1;
 80010e6:	4b21      	ldr	r3, [pc, #132]	; (800116c <MX_ADC1_Init+0x98>)
 80010e8:	4a21      	ldr	r2, [pc, #132]	; (8001170 <MX_ADC1_Init+0x9c>)
 80010ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010ec:	4b1f      	ldr	r3, [pc, #124]	; (800116c <MX_ADC1_Init+0x98>)
 80010ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010f4:	4b1d      	ldr	r3, [pc, #116]	; (800116c <MX_ADC1_Init+0x98>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010fa:	4b1c      	ldr	r3, [pc, #112]	; (800116c <MX_ADC1_Init+0x98>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001100:	4b1a      	ldr	r3, [pc, #104]	; (800116c <MX_ADC1_Init+0x98>)
 8001102:	2200      	movs	r2, #0
 8001104:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001106:	4b19      	ldr	r3, [pc, #100]	; (800116c <MX_ADC1_Init+0x98>)
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800110e:	4b17      	ldr	r3, [pc, #92]	; (800116c <MX_ADC1_Init+0x98>)
 8001110:	2200      	movs	r2, #0
 8001112:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001114:	4b15      	ldr	r3, [pc, #84]	; (800116c <MX_ADC1_Init+0x98>)
 8001116:	4a17      	ldr	r2, [pc, #92]	; (8001174 <MX_ADC1_Init+0xa0>)
 8001118:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800111a:	4b14      	ldr	r3, [pc, #80]	; (800116c <MX_ADC1_Init+0x98>)
 800111c:	2200      	movs	r2, #0
 800111e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <MX_ADC1_Init+0x98>)
 8001122:	2201      	movs	r2, #1
 8001124:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <MX_ADC1_Init+0x98>)
 8001128:	2200      	movs	r2, #0
 800112a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <MX_ADC1_Init+0x98>)
 8001130:	2201      	movs	r2, #1
 8001132:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001134:	480d      	ldr	r0, [pc, #52]	; (800116c <MX_ADC1_Init+0x98>)
 8001136:	f000 ff45 	bl	8001fc4 <HAL_ADC_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001140:	f000 f976 	bl	8001430 <Error_Handler>
  }
  sConfig.Channel = ADC_CHANNEL_0;
 8001144:	2300      	movs	r3, #0
 8001146:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001148:	2301      	movs	r3, #1
 800114a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800114c:	2300      	movs	r3, #0
 800114e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001150:	463b      	mov	r3, r7
 8001152:	4619      	mov	r1, r3
 8001154:	4805      	ldr	r0, [pc, #20]	; (800116c <MX_ADC1_Init+0x98>)
 8001156:	f001 f8e3 	bl	8002320 <HAL_ADC_ConfigChannel>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001160:	f000 f966 	bl	8001430 <Error_Handler>
  }
}
 8001164:	bf00      	nop
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200001fc 	.word	0x200001fc
 8001170:	40012000 	.word	0x40012000
 8001174:	0f000001 	.word	0x0f000001

08001178 <MX_I2C1_Init>:
static void MX_I2C1_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <MX_I2C1_Init+0x50>)
 800117e:	4a13      	ldr	r2, [pc, #76]	; (80011cc <MX_I2C1_Init+0x54>)
 8001180:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_I2C1_Init+0x50>)
 8001184:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <MX_I2C1_Init+0x58>)
 8001186:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001188:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <MX_I2C1_Init+0x50>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <MX_I2C1_Init+0x50>)
 8001190:	2200      	movs	r2, #0
 8001192:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <MX_I2C1_Init+0x50>)
 8001196:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800119a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <MX_I2C1_Init+0x50>)
 800119e:	2200      	movs	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <MX_I2C1_Init+0x50>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a8:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <MX_I2C1_Init+0x50>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <MX_I2C1_Init+0x50>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011b4:	4804      	ldr	r0, [pc, #16]	; (80011c8 <MX_I2C1_Init+0x50>)
 80011b6:	f001 fd71 	bl	8002c9c <HAL_I2C_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011c0:	f000 f936 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000244 	.word	0x20000244
 80011cc:	40005400 	.word	0x40005400
 80011d0:	00061a80 	.word	0x00061a80

080011d4 <MX_USART2_UART_Init>:


static void MX_USART2_UART_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 80011da:	4a12      	ldr	r2, [pc, #72]	; (8001224 <MX_USART2_UART_Init+0x50>)
 80011dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 80011e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011f8:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 80011fa:	220c      	movs	r2, #12
 80011fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_USART2_UART_Init+0x4c>)
 800120c:	f003 fbce 	bl	80049ac <HAL_UART_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001216:	f000 f90b 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000298 	.word	0x20000298
 8001224:	40004400 	.word	0x40004400

08001228 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	; 0x28
 800122c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	4b2d      	ldr	r3, [pc, #180]	; (80012f8 <MX_GPIO_Init+0xd0>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a2c      	ldr	r2, [pc, #176]	; (80012f8 <MX_GPIO_Init+0xd0>)
 8001248:	f043 0304 	orr.w	r3, r3, #4
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b2a      	ldr	r3, [pc, #168]	; (80012f8 <MX_GPIO_Init+0xd0>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <MX_GPIO_Init+0xd0>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a25      	ldr	r2, [pc, #148]	; (80012f8 <MX_GPIO_Init+0xd0>)
 8001264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b23      	ldr	r3, [pc, #140]	; (80012f8 <MX_GPIO_Init+0xd0>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <MX_GPIO_Init+0xd0>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a1e      	ldr	r2, [pc, #120]	; (80012f8 <MX_GPIO_Init+0xd0>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <MX_GPIO_Init+0xd0>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <MX_GPIO_Init+0xd0>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a17      	ldr	r2, [pc, #92]	; (80012f8 <MX_GPIO_Init+0xd0>)
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <MX_GPIO_Init+0xd0>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2120      	movs	r1, #32
 80012b2:	4812      	ldr	r0, [pc, #72]	; (80012fc <MX_GPIO_Init+0xd4>)
 80012b4:	f001 fcd8 	bl	8002c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012be:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4619      	mov	r1, r3
 80012ce:	480c      	ldr	r0, [pc, #48]	; (8001300 <MX_GPIO_Init+0xd8>)
 80012d0:	f001 fb36 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012d4:	2320      	movs	r3, #32
 80012d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d8:	2301      	movs	r3, #1
 80012da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	4804      	ldr	r0, [pc, #16]	; (80012fc <MX_GPIO_Init+0xd4>)
 80012ec:	f001 fb28 	bl	8002940 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012f0:	bf00      	nop
 80012f2:	3728      	adds	r7, #40	; 0x28
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40020000 	.word	0x40020000
 8001300:	40020800 	.word	0x40020800
 8001304:	00000000 	.word	0x00000000

08001308 <PotentiometerReadTask>:

void PotentiometerReadTask(void const * argument) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  for(;;) {
	  HAL_ADC_Start(&hadc1);
 8001310:	4815      	ldr	r0, [pc, #84]	; (8001368 <PotentiometerReadTask+0x60>)
 8001312:	f000 fe9b 	bl	800204c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,1);
 8001316:	2101      	movs	r1, #1
 8001318:	4813      	ldr	r0, [pc, #76]	; (8001368 <PotentiometerReadTask+0x60>)
 800131a:	f000 ff69 	bl	80021f0 <HAL_ADC_PollForConversion>
	  sensorValue = HAL_ADC_GetValue(&hadc1);
 800131e:	4812      	ldr	r0, [pc, #72]	; (8001368 <PotentiometerReadTask+0x60>)
 8001320:	f000 fff1 	bl	8002306 <HAL_ADC_GetValue>
 8001324:	4603      	mov	r3, r0
 8001326:	4a11      	ldr	r2, [pc, #68]	; (800136c <PotentiometerReadTask+0x64>)
 8001328:	6013      	str	r3, [r2, #0]
	  fvoltage = (float)sensorValue * (3.3/4095.0);
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <PotentiometerReadTask+0x64>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	ee07 3a90 	vmov	s15, r3
 8001332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001336:	ee17 0a90 	vmov	r0, s15
 800133a:	f7ff f925 	bl	8000588 <__aeabi_f2d>
 800133e:	a308      	add	r3, pc, #32	; (adr r3, 8001360 <PotentiometerReadTask+0x58>)
 8001340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001344:	f7ff f978 	bl	8000638 <__aeabi_dmul>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4610      	mov	r0, r2
 800134e:	4619      	mov	r1, r3
 8001350:	f7ff fc4a 	bl	8000be8 <__aeabi_d2f>
 8001354:	4603      	mov	r3, r0
 8001356:	4a06      	ldr	r2, [pc, #24]	; (8001370 <PotentiometerReadTask+0x68>)
 8001358:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Start(&hadc1);
 800135a:	e7d9      	b.n	8001310 <PotentiometerReadTask+0x8>
 800135c:	f3af 8000 	nop.w
 8001360:	e734d9b4 	.word	0xe734d9b4
 8001364:	3f4a680c 	.word	0x3f4a680c
 8001368:	200001fc 	.word	0x200001fc
 800136c:	200002e8 	.word	0x200002e8
 8001370:	200002ec 	.word	0x200002ec

08001374 <DisplayTask>:
  }
}

void DisplayTask(void const * argument) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
    for (;;) {
        int wholeNumber = (int)fvoltage;
 800137c:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <DisplayTask+0x80>)
 800137e:	edd3 7a00 	vldr	s15, [r3]
 8001382:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001386:	ee17 3a90 	vmov	r3, s15
 800138a:	60fb      	str	r3, [r7, #12]
        int decimalPartInt = (int)((fvoltage - wholeNumber) * 100);
 800138c:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <DisplayTask+0x80>)
 800138e:	ed93 7a00 	vldr	s14, [r3]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	ee07 3a90 	vmov	s15, r3
 8001398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800139c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80013f8 <DisplayTask+0x84>
 80013a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ac:	ee17 3a90 	vmov	r3, s15
 80013b0:	60bb      	str	r3, [r7, #8]
        sprintf(snum, "%d.%02d", wholeNumber, decimalPartInt);
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	68fa      	ldr	r2, [r7, #12]
 80013b6:	4911      	ldr	r1, [pc, #68]	; (80013fc <DisplayTask+0x88>)
 80013b8:	4811      	ldr	r0, [pc, #68]	; (8001400 <DisplayTask+0x8c>)
 80013ba:	f006 ff17 	bl	80081ec <siprintf>
        SSD1306_GotoXY (0, 30);
 80013be:	211e      	movs	r1, #30
 80013c0:	2000      	movs	r0, #0
 80013c2:	f000 f9a5 	bl	8001710 <SSD1306_GotoXY>
        SSD1306_Puts ("             ", &Font_16x26, 1);
 80013c6:	2201      	movs	r2, #1
 80013c8:	490e      	ldr	r1, [pc, #56]	; (8001404 <DisplayTask+0x90>)
 80013ca:	480f      	ldr	r0, [pc, #60]	; (8001408 <DisplayTask+0x94>)
 80013cc:	f000 fa36 	bl	800183c <SSD1306_Puts>
        SSD1306_UpdateScreen();
 80013d0:	f000 f8f8 	bl	80015c4 <SSD1306_UpdateScreen>
        SSD1306_GotoXY (30, 30);
 80013d4:	211e      	movs	r1, #30
 80013d6:	201e      	movs	r0, #30
 80013d8:	f000 f99a 	bl	8001710 <SSD1306_GotoXY>
        SSD1306_Puts (snum, &Font_16x26, 1);
 80013dc:	2201      	movs	r2, #1
 80013de:	4909      	ldr	r1, [pc, #36]	; (8001404 <DisplayTask+0x90>)
 80013e0:	4807      	ldr	r0, [pc, #28]	; (8001400 <DisplayTask+0x8c>)
 80013e2:	f000 fa2b 	bl	800183c <SSD1306_Puts>
        SSD1306_UpdateScreen();
 80013e6:	f000 f8ed 	bl	80015c4 <SSD1306_UpdateScreen>
        HAL_Delay (500);
 80013ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013ee:	f000 fdc5 	bl	8001f7c <HAL_Delay>
    for (;;) {
 80013f2:	e7c3      	b.n	800137c <DisplayTask+0x8>
 80013f4:	200002ec 	.word	0x200002ec
 80013f8:	42c80000 	.word	0x42c80000
 80013fc:	0800a4d0 	.word	0x0800a4d0
 8001400:	200002f0 	.word	0x200002f0
 8001404:	20000000 	.word	0x20000000
 8001408:	0800a4d8 	.word	0x0800a4d8

0800140c <HAL_TIM_PeriodElapsedCallback>:
    }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a04      	ldr	r2, [pc, #16]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d101      	bne.n	8001422 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800141e:	f000 fd8d 	bl	8001f3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40001000 	.word	0x40001000

08001430 <Error_Handler>:

void Error_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001434:	b672      	cpsid	i
}
 8001436:	bf00      	nop
  __disable_irq();

  while (1)
 8001438:	e7fe      	b.n	8001438 <Error_Handler+0x8>
	...

0800143c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001442:	f000 fa21 	bl	8001888 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001446:	f644 6320 	movw	r3, #20000	; 0x4e20
 800144a:	2201      	movs	r2, #1
 800144c:	2178      	movs	r1, #120	; 0x78
 800144e:	485b      	ldr	r0, [pc, #364]	; (80015bc <SSD1306_Init+0x180>)
 8001450:	f001 fe66 	bl	8003120 <HAL_I2C_IsDeviceReady>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800145a:	2300      	movs	r3, #0
 800145c:	e0a9      	b.n	80015b2 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800145e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001462:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001464:	e002      	b.n	800146c <SSD1306_Init+0x30>
		p--;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3b01      	subs	r3, #1
 800146a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f9      	bne.n	8001466 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001472:	22ae      	movs	r2, #174	; 0xae
 8001474:	2100      	movs	r1, #0
 8001476:	2078      	movs	r0, #120	; 0x78
 8001478:	f000 fa82 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 800147c:	2220      	movs	r2, #32
 800147e:	2100      	movs	r1, #0
 8001480:	2078      	movs	r0, #120	; 0x78
 8001482:	f000 fa7d 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001486:	2210      	movs	r2, #16
 8001488:	2100      	movs	r1, #0
 800148a:	2078      	movs	r0, #120	; 0x78
 800148c:	f000 fa78 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001490:	22b0      	movs	r2, #176	; 0xb0
 8001492:	2100      	movs	r1, #0
 8001494:	2078      	movs	r0, #120	; 0x78
 8001496:	f000 fa73 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800149a:	22c8      	movs	r2, #200	; 0xc8
 800149c:	2100      	movs	r1, #0
 800149e:	2078      	movs	r0, #120	; 0x78
 80014a0:	f000 fa6e 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80014a4:	2200      	movs	r2, #0
 80014a6:	2100      	movs	r1, #0
 80014a8:	2078      	movs	r0, #120	; 0x78
 80014aa:	f000 fa69 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80014ae:	2210      	movs	r2, #16
 80014b0:	2100      	movs	r1, #0
 80014b2:	2078      	movs	r0, #120	; 0x78
 80014b4:	f000 fa64 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80014b8:	2240      	movs	r2, #64	; 0x40
 80014ba:	2100      	movs	r1, #0
 80014bc:	2078      	movs	r0, #120	; 0x78
 80014be:	f000 fa5f 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80014c2:	2281      	movs	r2, #129	; 0x81
 80014c4:	2100      	movs	r1, #0
 80014c6:	2078      	movs	r0, #120	; 0x78
 80014c8:	f000 fa5a 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80014cc:	22ff      	movs	r2, #255	; 0xff
 80014ce:	2100      	movs	r1, #0
 80014d0:	2078      	movs	r0, #120	; 0x78
 80014d2:	f000 fa55 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80014d6:	22a1      	movs	r2, #161	; 0xa1
 80014d8:	2100      	movs	r1, #0
 80014da:	2078      	movs	r0, #120	; 0x78
 80014dc:	f000 fa50 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80014e0:	22a6      	movs	r2, #166	; 0xa6
 80014e2:	2100      	movs	r1, #0
 80014e4:	2078      	movs	r0, #120	; 0x78
 80014e6:	f000 fa4b 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80014ea:	22a8      	movs	r2, #168	; 0xa8
 80014ec:	2100      	movs	r1, #0
 80014ee:	2078      	movs	r0, #120	; 0x78
 80014f0:	f000 fa46 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80014f4:	223f      	movs	r2, #63	; 0x3f
 80014f6:	2100      	movs	r1, #0
 80014f8:	2078      	movs	r0, #120	; 0x78
 80014fa:	f000 fa41 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80014fe:	22a4      	movs	r2, #164	; 0xa4
 8001500:	2100      	movs	r1, #0
 8001502:	2078      	movs	r0, #120	; 0x78
 8001504:	f000 fa3c 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001508:	22d3      	movs	r2, #211	; 0xd3
 800150a:	2100      	movs	r1, #0
 800150c:	2078      	movs	r0, #120	; 0x78
 800150e:	f000 fa37 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001512:	2200      	movs	r2, #0
 8001514:	2100      	movs	r1, #0
 8001516:	2078      	movs	r0, #120	; 0x78
 8001518:	f000 fa32 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800151c:	22d5      	movs	r2, #213	; 0xd5
 800151e:	2100      	movs	r1, #0
 8001520:	2078      	movs	r0, #120	; 0x78
 8001522:	f000 fa2d 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001526:	22f0      	movs	r2, #240	; 0xf0
 8001528:	2100      	movs	r1, #0
 800152a:	2078      	movs	r0, #120	; 0x78
 800152c:	f000 fa28 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001530:	22d9      	movs	r2, #217	; 0xd9
 8001532:	2100      	movs	r1, #0
 8001534:	2078      	movs	r0, #120	; 0x78
 8001536:	f000 fa23 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800153a:	2222      	movs	r2, #34	; 0x22
 800153c:	2100      	movs	r1, #0
 800153e:	2078      	movs	r0, #120	; 0x78
 8001540:	f000 fa1e 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001544:	22da      	movs	r2, #218	; 0xda
 8001546:	2100      	movs	r1, #0
 8001548:	2078      	movs	r0, #120	; 0x78
 800154a:	f000 fa19 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800154e:	2212      	movs	r2, #18
 8001550:	2100      	movs	r1, #0
 8001552:	2078      	movs	r0, #120	; 0x78
 8001554:	f000 fa14 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001558:	22db      	movs	r2, #219	; 0xdb
 800155a:	2100      	movs	r1, #0
 800155c:	2078      	movs	r0, #120	; 0x78
 800155e:	f000 fa0f 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001562:	2220      	movs	r2, #32
 8001564:	2100      	movs	r1, #0
 8001566:	2078      	movs	r0, #120	; 0x78
 8001568:	f000 fa0a 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800156c:	228d      	movs	r2, #141	; 0x8d
 800156e:	2100      	movs	r1, #0
 8001570:	2078      	movs	r0, #120	; 0x78
 8001572:	f000 fa05 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001576:	2214      	movs	r2, #20
 8001578:	2100      	movs	r1, #0
 800157a:	2078      	movs	r0, #120	; 0x78
 800157c:	f000 fa00 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001580:	22af      	movs	r2, #175	; 0xaf
 8001582:	2100      	movs	r1, #0
 8001584:	2078      	movs	r0, #120	; 0x78
 8001586:	f000 f9fb 	bl	8001980 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800158a:	222e      	movs	r2, #46	; 0x2e
 800158c:	2100      	movs	r1, #0
 800158e:	2078      	movs	r0, #120	; 0x78
 8001590:	f000 f9f6 	bl	8001980 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001594:	2000      	movs	r0, #0
 8001596:	f000 f843 	bl	8001620 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800159a:	f000 f813 	bl	80015c4 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800159e:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <SSD1306_Init+0x184>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <SSD1306_Init+0x184>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80015aa:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <SSD1306_Init+0x184>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80015b0:	2301      	movs	r3, #1
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000244 	.word	0x20000244
 80015c0:	20000710 	.word	0x20000710

080015c4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80015ca:	2300      	movs	r3, #0
 80015cc:	71fb      	strb	r3, [r7, #7]
 80015ce:	e01d      	b.n	800160c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	3b50      	subs	r3, #80	; 0x50
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	461a      	mov	r2, r3
 80015d8:	2100      	movs	r1, #0
 80015da:	2078      	movs	r0, #120	; 0x78
 80015dc:	f000 f9d0 	bl	8001980 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80015e0:	2200      	movs	r2, #0
 80015e2:	2100      	movs	r1, #0
 80015e4:	2078      	movs	r0, #120	; 0x78
 80015e6:	f000 f9cb 	bl	8001980 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80015ea:	2210      	movs	r2, #16
 80015ec:	2100      	movs	r1, #0
 80015ee:	2078      	movs	r0, #120	; 0x78
 80015f0:	f000 f9c6 	bl	8001980 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	01db      	lsls	r3, r3, #7
 80015f8:	4a08      	ldr	r2, [pc, #32]	; (800161c <SSD1306_UpdateScreen+0x58>)
 80015fa:	441a      	add	r2, r3
 80015fc:	2380      	movs	r3, #128	; 0x80
 80015fe:	2140      	movs	r1, #64	; 0x40
 8001600:	2078      	movs	r0, #120	; 0x78
 8001602:	f000 f957 	bl	80018b4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	3301      	adds	r3, #1
 800160a:	71fb      	strb	r3, [r7, #7]
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	2b07      	cmp	r3, #7
 8001610:	d9de      	bls.n	80015d0 <SSD1306_UpdateScreen+0xc>
	}
}
 8001612:	bf00      	nop
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000310 	.word	0x20000310

08001620 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d101      	bne.n	8001634 <SSD1306_Fill+0x14>
 8001630:	2300      	movs	r3, #0
 8001632:	e000      	b.n	8001636 <SSD1306_Fill+0x16>
 8001634:	23ff      	movs	r3, #255	; 0xff
 8001636:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800163a:	4619      	mov	r1, r3
 800163c:	4803      	ldr	r0, [pc, #12]	; (800164c <SSD1306_Fill+0x2c>)
 800163e:	f006 fe38 	bl	80082b2 <memset>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000310 	.word	0x20000310

08001650 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	80fb      	strh	r3, [r7, #6]
 800165a:	460b      	mov	r3, r1
 800165c:	80bb      	strh	r3, [r7, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	70fb      	strb	r3, [r7, #3]
	if (
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	2b7f      	cmp	r3, #127	; 0x7f
 8001666:	d848      	bhi.n	80016fa <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001668:	88bb      	ldrh	r3, [r7, #4]
 800166a:	2b3f      	cmp	r3, #63	; 0x3f
 800166c:	d845      	bhi.n	80016fa <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800166e:	4b26      	ldr	r3, [pc, #152]	; (8001708 <SSD1306_DrawPixel+0xb8>)
 8001670:	791b      	ldrb	r3, [r3, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d006      	beq.n	8001684 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001676:	78fb      	ldrb	r3, [r7, #3]
 8001678:	2b00      	cmp	r3, #0
 800167a:	bf0c      	ite	eq
 800167c:	2301      	moveq	r3, #1
 800167e:	2300      	movne	r3, #0
 8001680:	b2db      	uxtb	r3, r3
 8001682:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001684:	78fb      	ldrb	r3, [r7, #3]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d11a      	bne.n	80016c0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800168a:	88fa      	ldrh	r2, [r7, #6]
 800168c:	88bb      	ldrh	r3, [r7, #4]
 800168e:	08db      	lsrs	r3, r3, #3
 8001690:	b298      	uxth	r0, r3
 8001692:	4603      	mov	r3, r0
 8001694:	01db      	lsls	r3, r3, #7
 8001696:	4413      	add	r3, r2
 8001698:	4a1c      	ldr	r2, [pc, #112]	; (800170c <SSD1306_DrawPixel+0xbc>)
 800169a:	5cd3      	ldrb	r3, [r2, r3]
 800169c:	b25a      	sxtb	r2, r3
 800169e:	88bb      	ldrh	r3, [r7, #4]
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	2101      	movs	r1, #1
 80016a6:	fa01 f303 	lsl.w	r3, r1, r3
 80016aa:	b25b      	sxtb	r3, r3
 80016ac:	4313      	orrs	r3, r2
 80016ae:	b259      	sxtb	r1, r3
 80016b0:	88fa      	ldrh	r2, [r7, #6]
 80016b2:	4603      	mov	r3, r0
 80016b4:	01db      	lsls	r3, r3, #7
 80016b6:	4413      	add	r3, r2
 80016b8:	b2c9      	uxtb	r1, r1
 80016ba:	4a14      	ldr	r2, [pc, #80]	; (800170c <SSD1306_DrawPixel+0xbc>)
 80016bc:	54d1      	strb	r1, [r2, r3]
 80016be:	e01d      	b.n	80016fc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80016c0:	88fa      	ldrh	r2, [r7, #6]
 80016c2:	88bb      	ldrh	r3, [r7, #4]
 80016c4:	08db      	lsrs	r3, r3, #3
 80016c6:	b298      	uxth	r0, r3
 80016c8:	4603      	mov	r3, r0
 80016ca:	01db      	lsls	r3, r3, #7
 80016cc:	4413      	add	r3, r2
 80016ce:	4a0f      	ldr	r2, [pc, #60]	; (800170c <SSD1306_DrawPixel+0xbc>)
 80016d0:	5cd3      	ldrb	r3, [r2, r3]
 80016d2:	b25a      	sxtb	r2, r3
 80016d4:	88bb      	ldrh	r3, [r7, #4]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	2101      	movs	r1, #1
 80016dc:	fa01 f303 	lsl.w	r3, r1, r3
 80016e0:	b25b      	sxtb	r3, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	b25b      	sxtb	r3, r3
 80016e6:	4013      	ands	r3, r2
 80016e8:	b259      	sxtb	r1, r3
 80016ea:	88fa      	ldrh	r2, [r7, #6]
 80016ec:	4603      	mov	r3, r0
 80016ee:	01db      	lsls	r3, r3, #7
 80016f0:	4413      	add	r3, r2
 80016f2:	b2c9      	uxtb	r1, r1
 80016f4:	4a05      	ldr	r2, [pc, #20]	; (800170c <SSD1306_DrawPixel+0xbc>)
 80016f6:	54d1      	strb	r1, [r2, r3]
 80016f8:	e000      	b.n	80016fc <SSD1306_DrawPixel+0xac>
		return;
 80016fa:	bf00      	nop
	}
}
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000710 	.word	0x20000710
 800170c:	20000310 	.word	0x20000310

08001710 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	460a      	mov	r2, r1
 800171a:	80fb      	strh	r3, [r7, #6]
 800171c:	4613      	mov	r3, r2
 800171e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001720:	4a05      	ldr	r2, [pc, #20]	; (8001738 <SSD1306_GotoXY+0x28>)
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001726:	4a04      	ldr	r2, [pc, #16]	; (8001738 <SSD1306_GotoXY+0x28>)
 8001728:	88bb      	ldrh	r3, [r7, #4]
 800172a:	8053      	strh	r3, [r2, #2]
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	20000710 	.word	0x20000710

0800173c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	6039      	str	r1, [r7, #0]
 8001746:	71fb      	strb	r3, [r7, #7]
 8001748:	4613      	mov	r3, r2
 800174a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800174c:	4b3a      	ldr	r3, [pc, #232]	; (8001838 <SSD1306_Putc+0xfc>)
 800174e:	881b      	ldrh	r3, [r3, #0]
 8001750:	461a      	mov	r2, r3
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	4413      	add	r3, r2
	if (
 8001758:	2b7f      	cmp	r3, #127	; 0x7f
 800175a:	dc07      	bgt.n	800176c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800175c:	4b36      	ldr	r3, [pc, #216]	; (8001838 <SSD1306_Putc+0xfc>)
 800175e:	885b      	ldrh	r3, [r3, #2]
 8001760:	461a      	mov	r2, r3
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	785b      	ldrb	r3, [r3, #1]
 8001766:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001768:	2b3f      	cmp	r3, #63	; 0x3f
 800176a:	dd01      	ble.n	8001770 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800176c:	2300      	movs	r3, #0
 800176e:	e05e      	b.n	800182e <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	e04b      	b.n	800180e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	3b20      	subs	r3, #32
 800177e:	6839      	ldr	r1, [r7, #0]
 8001780:	7849      	ldrb	r1, [r1, #1]
 8001782:	fb01 f303 	mul.w	r3, r1, r3
 8001786:	4619      	mov	r1, r3
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	440b      	add	r3, r1
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	4413      	add	r3, r2
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001794:	2300      	movs	r3, #0
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	e030      	b.n	80017fc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d010      	beq.n	80017cc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80017aa:	4b23      	ldr	r3, [pc, #140]	; (8001838 <SSD1306_Putc+0xfc>)
 80017ac:	881a      	ldrh	r2, [r3, #0]
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	4413      	add	r3, r2
 80017b4:	b298      	uxth	r0, r3
 80017b6:	4b20      	ldr	r3, [pc, #128]	; (8001838 <SSD1306_Putc+0xfc>)
 80017b8:	885a      	ldrh	r2, [r3, #2]
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	4413      	add	r3, r2
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	79ba      	ldrb	r2, [r7, #6]
 80017c4:	4619      	mov	r1, r3
 80017c6:	f7ff ff43 	bl	8001650 <SSD1306_DrawPixel>
 80017ca:	e014      	b.n	80017f6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80017cc:	4b1a      	ldr	r3, [pc, #104]	; (8001838 <SSD1306_Putc+0xfc>)
 80017ce:	881a      	ldrh	r2, [r3, #0]
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	4413      	add	r3, r2
 80017d6:	b298      	uxth	r0, r3
 80017d8:	4b17      	ldr	r3, [pc, #92]	; (8001838 <SSD1306_Putc+0xfc>)
 80017da:	885a      	ldrh	r2, [r3, #2]
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	b29b      	uxth	r3, r3
 80017e0:	4413      	add	r3, r2
 80017e2:	b299      	uxth	r1, r3
 80017e4:	79bb      	ldrb	r3, [r7, #6]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	bf0c      	ite	eq
 80017ea:	2301      	moveq	r3, #1
 80017ec:	2300      	movne	r3, #0
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	461a      	mov	r2, r3
 80017f2:	f7ff ff2d 	bl	8001650 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	3301      	adds	r3, #1
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	4293      	cmp	r3, r2
 8001806:	d3c8      	bcc.n	800179a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	3301      	adds	r3, #1
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	785b      	ldrb	r3, [r3, #1]
 8001812:	461a      	mov	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	4293      	cmp	r3, r2
 8001818:	d3ad      	bcc.n	8001776 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800181a:	4b07      	ldr	r3, [pc, #28]	; (8001838 <SSD1306_Putc+0xfc>)
 800181c:	881a      	ldrh	r2, [r3, #0]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	b29b      	uxth	r3, r3
 8001824:	4413      	add	r3, r2
 8001826:	b29a      	uxth	r2, r3
 8001828:	4b03      	ldr	r3, [pc, #12]	; (8001838 <SSD1306_Putc+0xfc>)
 800182a:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800182c:	79fb      	ldrb	r3, [r7, #7]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000710 	.word	0x20000710

0800183c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	4613      	mov	r3, r2
 8001848:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800184a:	e012      	b.n	8001872 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	79fa      	ldrb	r2, [r7, #7]
 8001852:	68b9      	ldr	r1, [r7, #8]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff71 	bl	800173c <SSD1306_Putc>
 800185a:	4603      	mov	r3, r0
 800185c:	461a      	mov	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	429a      	cmp	r2, r3
 8001864:	d002      	beq.n	800186c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	e008      	b.n	800187e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	3301      	adds	r3, #1
 8001870:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1e8      	bne.n	800184c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	781b      	ldrb	r3, [r3, #0]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800188e:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <ssd1306_I2C_Init+0x28>)
 8001890:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001892:	e002      	b.n	800189a <ssd1306_I2C_Init+0x12>
		p--;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3b01      	subs	r3, #1
 8001898:	607b      	str	r3, [r7, #4]
	while(p>0)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1f9      	bne.n	8001894 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80018a0:	bf00      	nop
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	0003d090 	.word	0x0003d090

080018b4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80018b4:	b590      	push	{r4, r7, lr}
 80018b6:	b0c7      	sub	sp, #284	; 0x11c
 80018b8:	af02      	add	r7, sp, #8
 80018ba:	4604      	mov	r4, r0
 80018bc:	4608      	mov	r0, r1
 80018be:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80018c2:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80018c6:	600a      	str	r2, [r1, #0]
 80018c8:	4619      	mov	r1, r3
 80018ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018ce:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80018d2:	4622      	mov	r2, r4
 80018d4:	701a      	strb	r2, [r3, #0]
 80018d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018da:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80018de:	4602      	mov	r2, r0
 80018e0:	701a      	strb	r2, [r3, #0]
 80018e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80018ea:	460a      	mov	r2, r1
 80018ec:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80018ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80018f6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80018fa:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80018fe:	7812      	ldrb	r2, [r2, #0]
 8001900:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001902:	2300      	movs	r3, #0
 8001904:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001908:	e015      	b.n	8001936 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800190a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800190e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001912:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001916:	6812      	ldr	r2, [r2, #0]
 8001918:	441a      	add	r2, r3
 800191a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800191e:	3301      	adds	r3, #1
 8001920:	7811      	ldrb	r1, [r2, #0]
 8001922:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001926:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800192a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800192c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001930:	3301      	adds	r3, #1
 8001932:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001936:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800193a:	b29b      	uxth	r3, r3
 800193c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001940:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001944:	8812      	ldrh	r2, [r2, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d8df      	bhi.n	800190a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800194a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800194e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	b299      	uxth	r1, r3
 8001956:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800195a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	3301      	adds	r3, #1
 8001962:	b29b      	uxth	r3, r3
 8001964:	f107 020c 	add.w	r2, r7, #12
 8001968:	200a      	movs	r0, #10
 800196a:	9000      	str	r0, [sp, #0]
 800196c:	4803      	ldr	r0, [pc, #12]	; (800197c <ssd1306_I2C_WriteMulti+0xc8>)
 800196e:	f001 fad9 	bl	8002f24 <HAL_I2C_Master_Transmit>
}
 8001972:	bf00      	nop
 8001974:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001978:	46bd      	mov	sp, r7
 800197a:	bd90      	pop	{r4, r7, pc}
 800197c:	20000244 	.word	0x20000244

08001980 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af02      	add	r7, sp, #8
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
 800198a:	460b      	mov	r3, r1
 800198c:	71bb      	strb	r3, [r7, #6]
 800198e:	4613      	mov	r3, r2
 8001990:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001992:	79bb      	ldrb	r3, [r7, #6]
 8001994:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001996:	797b      	ldrb	r3, [r7, #5]
 8001998:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	b299      	uxth	r1, r3
 800199e:	f107 020c 	add.w	r2, r7, #12
 80019a2:	230a      	movs	r3, #10
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	2302      	movs	r3, #2
 80019a8:	4803      	ldr	r0, [pc, #12]	; (80019b8 <ssd1306_I2C_Write+0x38>)
 80019aa:	f001 fabb 	bl	8002f24 <HAL_I2C_Master_Transmit>
}
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000244 	.word	0x20000244

080019bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_MspInit+0x54>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	4a11      	ldr	r2, [pc, #68]	; (8001a10 <HAL_MspInit+0x54>)
 80019cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d0:	6453      	str	r3, [r2, #68]	; 0x44
 80019d2:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <HAL_MspInit+0x54>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	603b      	str	r3, [r7, #0]
 80019e2:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <HAL_MspInit+0x54>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <HAL_MspInit+0x54>)
 80019e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ec:	6413      	str	r3, [r2, #64]	; 0x40
 80019ee:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <HAL_MspInit+0x54>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f6:	603b      	str	r3, [r7, #0]
 80019f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	210f      	movs	r1, #15
 80019fe:	f06f 0001 	mvn.w	r0, #1
 8001a02:	f000 ff73 	bl	80028ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40023800 	.word	0x40023800

08001a14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	; 0x28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a17      	ldr	r2, [pc, #92]	; (8001a90 <HAL_ADC_MspInit+0x7c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d127      	bne.n	8001a86 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <HAL_ADC_MspInit+0x80>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	4a15      	ldr	r2, [pc, #84]	; (8001a94 <HAL_ADC_MspInit+0x80>)
 8001a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a44:	6453      	str	r3, [r2, #68]	; 0x44
 8001a46:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <HAL_ADC_MspInit+0x80>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <HAL_ADC_MspInit+0x80>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a0e      	ldr	r2, [pc, #56]	; (8001a94 <HAL_ADC_MspInit+0x80>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <HAL_ADC_MspInit+0x80>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a72:	2303      	movs	r3, #3
 8001a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <HAL_ADC_MspInit+0x84>)
 8001a82:	f000 ff5d 	bl	8002940 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a86:	bf00      	nop
 8001a88:	3728      	adds	r7, #40	; 0x28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40012000 	.word	0x40012000
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40020000 	.word	0x40020000

08001a9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	; 0x28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a19      	ldr	r2, [pc, #100]	; (8001b20 <HAL_I2C_MspInit+0x84>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d12b      	bne.n	8001b16 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <HAL_I2C_MspInit+0x88>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a17      	ldr	r2, [pc, #92]	; (8001b24 <HAL_I2C_MspInit+0x88>)
 8001ac8:	f043 0302 	orr.w	r3, r3, #2
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <HAL_I2C_MspInit+0x88>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ada:	23c0      	movs	r3, #192	; 0xc0
 8001adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ade:	2312      	movs	r3, #18
 8001ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aea:	2304      	movs	r3, #4
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	4619      	mov	r1, r3
 8001af4:	480c      	ldr	r0, [pc, #48]	; (8001b28 <HAL_I2C_MspInit+0x8c>)
 8001af6:	f000 ff23 	bl	8002940 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <HAL_I2C_MspInit+0x88>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	4a08      	ldr	r2, [pc, #32]	; (8001b24 <HAL_I2C_MspInit+0x88>)
 8001b04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b08:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_I2C_MspInit+0x88>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b16:	bf00      	nop
 8001b18:	3728      	adds	r7, #40	; 0x28
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40005400 	.word	0x40005400
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40020400 	.word	0x40020400

08001b2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08a      	sub	sp, #40	; 0x28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a19      	ldr	r2, [pc, #100]	; (8001bb0 <HAL_UART_MspInit+0x84>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d12b      	bne.n	8001ba6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <HAL_UART_MspInit+0x88>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	4a17      	ldr	r2, [pc, #92]	; (8001bb4 <HAL_UART_MspInit+0x88>)
 8001b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <HAL_UART_MspInit+0x88>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <HAL_UART_MspInit+0x88>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a10      	ldr	r2, [pc, #64]	; (8001bb4 <HAL_UART_MspInit+0x88>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <HAL_UART_MspInit+0x88>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b86:	230c      	movs	r3, #12
 8001b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b92:	2303      	movs	r3, #3
 8001b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b96:	2307      	movs	r3, #7
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9a:	f107 0314 	add.w	r3, r7, #20
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <HAL_UART_MspInit+0x8c>)
 8001ba2:	f000 fecd 	bl	8002940 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ba6:	bf00      	nop
 8001ba8:	3728      	adds	r7, #40	; 0x28
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40004400 	.word	0x40004400
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40020000 	.word	0x40020000

08001bbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08e      	sub	sp, #56	; 0x38
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	4b33      	ldr	r3, [pc, #204]	; (8001ca0 <HAL_InitTick+0xe4>)
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	4a32      	ldr	r2, [pc, #200]	; (8001ca0 <HAL_InitTick+0xe4>)
 8001bd6:	f043 0310 	orr.w	r3, r3, #16
 8001bda:	6413      	str	r3, [r2, #64]	; 0x40
 8001bdc:	4b30      	ldr	r3, [pc, #192]	; (8001ca0 <HAL_InitTick+0xe4>)
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	f003 0310 	and.w	r3, r3, #16
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001be8:	f107 0210 	add.w	r2, r7, #16
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f001 ff38 	bl	8003a68 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d103      	bne.n	8001c0a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c02:	f001 ff09 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 8001c06:	6378      	str	r0, [r7, #52]	; 0x34
 8001c08:	e004      	b.n	8001c14 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c0a:	f001 ff05 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c16:	4a23      	ldr	r2, [pc, #140]	; (8001ca4 <HAL_InitTick+0xe8>)
 8001c18:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1c:	0c9b      	lsrs	r3, r3, #18
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001c22:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <HAL_InitTick+0xec>)
 8001c24:	4a21      	ldr	r2, [pc, #132]	; (8001cac <HAL_InitTick+0xf0>)
 8001c26:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001c28:	4b1f      	ldr	r3, [pc, #124]	; (8001ca8 <HAL_InitTick+0xec>)
 8001c2a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c2e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001c30:	4a1d      	ldr	r2, [pc, #116]	; (8001ca8 <HAL_InitTick+0xec>)
 8001c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c34:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001c36:	4b1c      	ldr	r3, [pc, #112]	; (8001ca8 <HAL_InitTick+0xec>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <HAL_InitTick+0xec>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c42:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <HAL_InitTick+0xec>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001c48:	4817      	ldr	r0, [pc, #92]	; (8001ca8 <HAL_InitTick+0xec>)
 8001c4a:	f002 fc0d 	bl	8004468 <HAL_TIM_Base_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001c54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d11b      	bne.n	8001c94 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001c5c:	4812      	ldr	r0, [pc, #72]	; (8001ca8 <HAL_InitTick+0xec>)
 8001c5e:	f002 fc5d 	bl	800451c <HAL_TIM_Base_Start_IT>
 8001c62:	4603      	mov	r3, r0
 8001c64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001c68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d111      	bne.n	8001c94 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c70:	2036      	movs	r0, #54	; 0x36
 8001c72:	f000 fe57 	bl	8002924 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b0f      	cmp	r3, #15
 8001c7a:	d808      	bhi.n	8001c8e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	2036      	movs	r0, #54	; 0x36
 8001c82:	f000 fe33 	bl	80028ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c86:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <HAL_InitTick+0xf4>)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6013      	str	r3, [r2, #0]
 8001c8c:	e002      	b.n	8001c94 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001c94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3738      	adds	r7, #56	; 0x38
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	431bde83 	.word	0x431bde83
 8001ca8:	20000718 	.word	0x20000718
 8001cac:	40001000 	.word	0x40001000
 8001cb0:	2000000c 	.word	0x2000000c

08001cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <NMI_Handler+0x4>

08001cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cbe:	e7fe      	b.n	8001cbe <HardFault_Handler+0x4>

08001cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <MemManage_Handler+0x4>

08001cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cca:	e7fe      	b.n	8001cca <BusFault_Handler+0x4>

08001ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <UsageFault_Handler+0x4>

08001cd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ce4:	4802      	ldr	r0, [pc, #8]	; (8001cf0 <TIM6_DAC_IRQHandler+0x10>)
 8001ce6:	f002 fc89 	bl	80045fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000718 	.word	0x20000718

08001cf4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return 1;
 8001cf8:	2301      	movs	r3, #1
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <_kill>:

int _kill(int pid, int sig)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d0e:	f006 fb23 	bl	8008358 <__errno>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2216      	movs	r2, #22
 8001d16:	601a      	str	r2, [r3, #0]
  return -1;
 8001d18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <_exit>:

void _exit (int status)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff ffe7 	bl	8001d04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d36:	e7fe      	b.n	8001d36 <_exit+0x12>

08001d38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	e00a      	b.n	8001d60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d4a:	f3af 8000 	nop.w
 8001d4e:	4601      	mov	r1, r0
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	1c5a      	adds	r2, r3, #1
 8001d54:	60ba      	str	r2, [r7, #8]
 8001d56:	b2ca      	uxtb	r2, r1
 8001d58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	dbf0      	blt.n	8001d4a <_read+0x12>
  }

  return len;
 8001d68:	687b      	ldr	r3, [r7, #4]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b086      	sub	sp, #24
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	60f8      	str	r0, [r7, #12]
 8001d7a:	60b9      	str	r1, [r7, #8]
 8001d7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	e009      	b.n	8001d98 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	60ba      	str	r2, [r7, #8]
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	3301      	adds	r3, #1
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	dbf1      	blt.n	8001d84 <_write+0x12>
  }
  return len;
 8001da0:	687b      	ldr	r3, [r7, #4]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <_close>:

int _close(int file)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001db2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dd2:	605a      	str	r2, [r3, #4]
  return 0;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <_isatty>:

int _isatty(int file)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dea:	2301      	movs	r3, #1
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
	...

08001e14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e1c:	4a14      	ldr	r2, [pc, #80]	; (8001e70 <_sbrk+0x5c>)
 8001e1e:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <_sbrk+0x60>)
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e28:	4b13      	ldr	r3, [pc, #76]	; (8001e78 <_sbrk+0x64>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d102      	bne.n	8001e36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e30:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <_sbrk+0x64>)
 8001e32:	4a12      	ldr	r2, [pc, #72]	; (8001e7c <_sbrk+0x68>)
 8001e34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e36:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <_sbrk+0x64>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d207      	bcs.n	8001e54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e44:	f006 fa88 	bl	8008358 <__errno>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	220c      	movs	r2, #12
 8001e4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e52:	e009      	b.n	8001e68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e54:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <_sbrk+0x64>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e5a:	4b07      	ldr	r3, [pc, #28]	; (8001e78 <_sbrk+0x64>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	4a05      	ldr	r2, [pc, #20]	; (8001e78 <_sbrk+0x64>)
 8001e64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e66:	68fb      	ldr	r3, [r7, #12]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20020000 	.word	0x20020000
 8001e74:	00000400 	.word	0x00000400
 8001e78:	20000760 	.word	0x20000760
 8001e7c:	20005200 	.word	0x20005200

08001e80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <SystemInit+0x20>)
 8001e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e8a:	4a05      	ldr	r2, [pc, #20]	; (8001ea0 <SystemInit+0x20>)
 8001e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ea4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001edc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ea8:	f7ff ffea 	bl	8001e80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001eac:	480c      	ldr	r0, [pc, #48]	; (8001ee0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001eae:	490d      	ldr	r1, [pc, #52]	; (8001ee4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001eb0:	4a0d      	ldr	r2, [pc, #52]	; (8001ee8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb4:	e002      	b.n	8001ebc <LoopCopyDataInit>

08001eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eba:	3304      	adds	r3, #4

08001ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ec0:	d3f9      	bcc.n	8001eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ec2:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ec4:	4c0a      	ldr	r4, [pc, #40]	; (8001ef0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec8:	e001      	b.n	8001ece <LoopFillZerobss>

08001eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ecc:	3204      	adds	r2, #4

08001ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ed0:	d3fb      	bcc.n	8001eca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001ed2:	f006 fa47 	bl	8008364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ed6:	f7ff f855 	bl	8000f84 <main>
  bx  lr    
 8001eda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001edc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ee0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001ee8:	0800bbe4 	.word	0x0800bbe4
  ldr r2, =_sbss
 8001eec:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001ef0:	20005200 	.word	0x20005200

08001ef4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ef4:	e7fe      	b.n	8001ef4 <ADC_IRQHandler>
	...

08001ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001efc:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <HAL_Init+0x40>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a0d      	ldr	r2, [pc, #52]	; (8001f38 <HAL_Init+0x40>)
 8001f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <HAL_Init+0x40>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <HAL_Init+0x40>)
 8001f0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f14:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <HAL_Init+0x40>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a07      	ldr	r2, [pc, #28]	; (8001f38 <HAL_Init+0x40>)
 8001f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f20:	2003      	movs	r0, #3
 8001f22:	f000 fcd8 	bl	80028d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f26:	200f      	movs	r0, #15
 8001f28:	f7ff fe48 	bl	8001bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f2c:	f7ff fd46 	bl	80019bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40023c00 	.word	0x40023c00

08001f3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_IncTick+0x20>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_IncTick+0x24>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	4a04      	ldr	r2, [pc, #16]	; (8001f60 <HAL_IncTick+0x24>)
 8001f4e:	6013      	str	r3, [r2, #0]
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	20000010 	.word	0x20000010
 8001f60:	20000764 	.word	0x20000764

08001f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return uwTick;
 8001f68:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <HAL_GetTick+0x14>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	20000764 	.word	0x20000764

08001f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f84:	f7ff ffee 	bl	8001f64 <HAL_GetTick>
 8001f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f94:	d005      	beq.n	8001fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <HAL_Delay+0x44>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fa2:	bf00      	nop
 8001fa4:	f7ff ffde 	bl	8001f64 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d8f7      	bhi.n	8001fa4 <HAL_Delay+0x28>
  {
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000010 	.word	0x20000010

08001fc4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e033      	b.n	8002042 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d109      	bne.n	8001ff6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff fd16 	bl	8001a14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	f003 0310 	and.w	r3, r3, #16
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d118      	bne.n	8002034 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800200a:	f023 0302 	bic.w	r3, r3, #2
 800200e:	f043 0202 	orr.w	r2, r3, #2
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 fab4 	bl	8002584 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f023 0303 	bic.w	r3, r3, #3
 800202a:	f043 0201 	orr.w	r2, r3, #1
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	641a      	str	r2, [r3, #64]	; 0x40
 8002032:	e001      	b.n	8002038 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002040:	7bfb      	ldrb	r3, [r7, #15]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800205e:	2b01      	cmp	r3, #1
 8002060:	d101      	bne.n	8002066 <HAL_ADC_Start+0x1a>
 8002062:	2302      	movs	r3, #2
 8002064:	e0b2      	b.n	80021cc <HAL_ADC_Start+0x180>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b01      	cmp	r3, #1
 800207a:	d018      	beq.n	80020ae <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0201 	orr.w	r2, r2, #1
 800208a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800208c:	4b52      	ldr	r3, [pc, #328]	; (80021d8 <HAL_ADC_Start+0x18c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a52      	ldr	r2, [pc, #328]	; (80021dc <HAL_ADC_Start+0x190>)
 8002092:	fba2 2303 	umull	r2, r3, r2, r3
 8002096:	0c9a      	lsrs	r2, r3, #18
 8002098:	4613      	mov	r3, r2
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	4413      	add	r3, r2
 800209e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80020a0:	e002      	b.n	80020a8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	3b01      	subs	r3, #1
 80020a6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f9      	bne.n	80020a2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d17a      	bne.n	80021b2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80020c4:	f023 0301 	bic.w	r3, r3, #1
 80020c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d007      	beq.n	80020ee <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020fa:	d106      	bne.n	800210a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002100:	f023 0206 	bic.w	r2, r3, #6
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	645a      	str	r2, [r3, #68]	; 0x44
 8002108:	e002      	b.n	8002110 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002118:	4b31      	ldr	r3, [pc, #196]	; (80021e0 <HAL_ADC_Start+0x194>)
 800211a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002124:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 031f 	and.w	r3, r3, #31
 800212e:	2b00      	cmp	r3, #0
 8002130:	d12a      	bne.n	8002188 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a2b      	ldr	r2, [pc, #172]	; (80021e4 <HAL_ADC_Start+0x198>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d015      	beq.n	8002168 <HAL_ADC_Start+0x11c>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a29      	ldr	r2, [pc, #164]	; (80021e8 <HAL_ADC_Start+0x19c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d105      	bne.n	8002152 <HAL_ADC_Start+0x106>
 8002146:	4b26      	ldr	r3, [pc, #152]	; (80021e0 <HAL_ADC_Start+0x194>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 031f 	and.w	r3, r3, #31
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00a      	beq.n	8002168 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a25      	ldr	r2, [pc, #148]	; (80021ec <HAL_ADC_Start+0x1a0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d136      	bne.n	80021ca <HAL_ADC_Start+0x17e>
 800215c:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <HAL_ADC_Start+0x194>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	2b00      	cmp	r3, #0
 8002166:	d130      	bne.n	80021ca <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d129      	bne.n	80021ca <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002184:	609a      	str	r2, [r3, #8]
 8002186:	e020      	b.n	80021ca <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a15      	ldr	r2, [pc, #84]	; (80021e4 <HAL_ADC_Start+0x198>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d11b      	bne.n	80021ca <HAL_ADC_Start+0x17e>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d114      	bne.n	80021ca <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	e00b      	b.n	80021ca <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	f043 0210 	orr.w	r2, r3, #16
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	f043 0201 	orr.w	r2, r3, #1
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	20000008 	.word	0x20000008
 80021dc:	431bde83 	.word	0x431bde83
 80021e0:	40012300 	.word	0x40012300
 80021e4:	40012000 	.word	0x40012000
 80021e8:	40012100 	.word	0x40012100
 80021ec:	40012200 	.word	0x40012200

080021f0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800220c:	d113      	bne.n	8002236 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002218:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800221c:	d10b      	bne.n	8002236 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f043 0220 	orr.w	r2, r3, #32
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e063      	b.n	80022fe <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002236:	f7ff fe95 	bl	8001f64 <HAL_GetTick>
 800223a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800223c:	e021      	b.n	8002282 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002244:	d01d      	beq.n	8002282 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d007      	beq.n	800225c <HAL_ADC_PollForConversion+0x6c>
 800224c:	f7ff fe8a 	bl	8001f64 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d212      	bcs.n	8002282 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b02      	cmp	r3, #2
 8002268:	d00b      	beq.n	8002282 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f043 0204 	orr.w	r2, r3, #4
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e03d      	b.n	80022fe <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b02      	cmp	r3, #2
 800228e:	d1d6      	bne.n	800223e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f06f 0212 	mvn.w	r2, #18
 8002298:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d123      	bne.n	80022fc <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d11f      	bne.n	80022fc <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d006      	beq.n	80022d8 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d111      	bne.n	80022fc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d105      	bne.n	80022fc <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	f043 0201 	orr.w	r2, r3, #1
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002314:	4618      	mov	r0, r3
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800232a:	2300      	movs	r3, #0
 800232c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002334:	2b01      	cmp	r3, #1
 8002336:	d101      	bne.n	800233c <HAL_ADC_ConfigChannel+0x1c>
 8002338:	2302      	movs	r3, #2
 800233a:	e113      	b.n	8002564 <HAL_ADC_ConfigChannel+0x244>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b09      	cmp	r3, #9
 800234a:	d925      	bls.n	8002398 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68d9      	ldr	r1, [r3, #12]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	b29b      	uxth	r3, r3
 8002358:	461a      	mov	r2, r3
 800235a:	4613      	mov	r3, r2
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	4413      	add	r3, r2
 8002360:	3b1e      	subs	r3, #30
 8002362:	2207      	movs	r2, #7
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43da      	mvns	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	400a      	ands	r2, r1
 8002370:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68d9      	ldr	r1, [r3, #12]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	b29b      	uxth	r3, r3
 8002382:	4618      	mov	r0, r3
 8002384:	4603      	mov	r3, r0
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	4403      	add	r3, r0
 800238a:	3b1e      	subs	r3, #30
 800238c:	409a      	lsls	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	e022      	b.n	80023de <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6919      	ldr	r1, [r3, #16]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	461a      	mov	r2, r3
 80023a6:	4613      	mov	r3, r2
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	4413      	add	r3, r2
 80023ac:	2207      	movs	r2, #7
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43da      	mvns	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	400a      	ands	r2, r1
 80023ba:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6919      	ldr	r1, [r3, #16]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	4618      	mov	r0, r3
 80023ce:	4603      	mov	r3, r0
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	4403      	add	r3, r0
 80023d4:	409a      	lsls	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b06      	cmp	r3, #6
 80023e4:	d824      	bhi.n	8002430 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	3b05      	subs	r3, #5
 80023f8:	221f      	movs	r2, #31
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43da      	mvns	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	400a      	ands	r2, r1
 8002406:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	b29b      	uxth	r3, r3
 8002414:	4618      	mov	r0, r3
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	3b05      	subs	r3, #5
 8002422:	fa00 f203 	lsl.w	r2, r0, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	635a      	str	r2, [r3, #52]	; 0x34
 800242e:	e04c      	b.n	80024ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b0c      	cmp	r3, #12
 8002436:	d824      	bhi.n	8002482 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	4613      	mov	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	3b23      	subs	r3, #35	; 0x23
 800244a:	221f      	movs	r2, #31
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43da      	mvns	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	400a      	ands	r2, r1
 8002458:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	b29b      	uxth	r3, r3
 8002466:	4618      	mov	r0, r3
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	4613      	mov	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	3b23      	subs	r3, #35	; 0x23
 8002474:	fa00 f203 	lsl.w	r2, r0, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	430a      	orrs	r2, r1
 800247e:	631a      	str	r2, [r3, #48]	; 0x30
 8002480:	e023      	b.n	80024ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	3b41      	subs	r3, #65	; 0x41
 8002494:	221f      	movs	r2, #31
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43da      	mvns	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	400a      	ands	r2, r1
 80024a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	4618      	mov	r0, r3
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	4613      	mov	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	3b41      	subs	r3, #65	; 0x41
 80024be:	fa00 f203 	lsl.w	r2, r0, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024ca:	4b29      	ldr	r3, [pc, #164]	; (8002570 <HAL_ADC_ConfigChannel+0x250>)
 80024cc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a28      	ldr	r2, [pc, #160]	; (8002574 <HAL_ADC_ConfigChannel+0x254>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d10f      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x1d8>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b12      	cmp	r3, #18
 80024de:	d10b      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a1d      	ldr	r2, [pc, #116]	; (8002574 <HAL_ADC_ConfigChannel+0x254>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d12b      	bne.n	800255a <HAL_ADC_ConfigChannel+0x23a>
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a1c      	ldr	r2, [pc, #112]	; (8002578 <HAL_ADC_ConfigChannel+0x258>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d003      	beq.n	8002514 <HAL_ADC_ConfigChannel+0x1f4>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b11      	cmp	r3, #17
 8002512:	d122      	bne.n	800255a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a11      	ldr	r2, [pc, #68]	; (8002578 <HAL_ADC_ConfigChannel+0x258>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d111      	bne.n	800255a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002536:	4b11      	ldr	r3, [pc, #68]	; (800257c <HAL_ADC_ConfigChannel+0x25c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a11      	ldr	r2, [pc, #68]	; (8002580 <HAL_ADC_ConfigChannel+0x260>)
 800253c:	fba2 2303 	umull	r2, r3, r2, r3
 8002540:	0c9a      	lsrs	r2, r3, #18
 8002542:	4613      	mov	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800254c:	e002      	b.n	8002554 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	3b01      	subs	r3, #1
 8002552:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f9      	bne.n	800254e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	40012300 	.word	0x40012300
 8002574:	40012000 	.word	0x40012000
 8002578:	10000012 	.word	0x10000012
 800257c:	20000008 	.word	0x20000008
 8002580:	431bde83 	.word	0x431bde83

08002584 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800258c:	4b79      	ldr	r3, [pc, #484]	; (8002774 <ADC_Init+0x1f0>)
 800258e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	431a      	orrs	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6859      	ldr	r1, [r3, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	021a      	lsls	r2, r3, #8
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80025dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6859      	ldr	r1, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6899      	ldr	r1, [r3, #8]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002616:	4a58      	ldr	r2, [pc, #352]	; (8002778 <ADC_Init+0x1f4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d022      	beq.n	8002662 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800262a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6899      	ldr	r1, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800264c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6899      	ldr	r1, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	e00f      	b.n	8002682 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002670:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002680:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0202 	bic.w	r2, r2, #2
 8002690:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6899      	ldr	r1, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	7e1b      	ldrb	r3, [r3, #24]
 800269c:	005a      	lsls	r2, r3, #1
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d01b      	beq.n	80026e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026be:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80026ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6859      	ldr	r1, [r3, #4]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	3b01      	subs	r3, #1
 80026dc:	035a      	lsls	r2, r3, #13
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	e007      	b.n	80026f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026f6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002706:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	3b01      	subs	r3, #1
 8002714:	051a      	lsls	r2, r3, #20
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800272c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6899      	ldr	r1, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800273a:	025a      	lsls	r2, r3, #9
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002752:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6899      	ldr	r1, [r3, #8]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	029a      	lsls	r2, r3, #10
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	609a      	str	r2, [r3, #8]
}
 8002768:	bf00      	nop
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	40012300 	.word	0x40012300
 8002778:	0f000001 	.word	0x0f000001

0800277c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800278c:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <__NVIC_SetPriorityGrouping+0x44>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002798:	4013      	ands	r3, r2
 800279a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ae:	4a04      	ldr	r2, [pc, #16]	; (80027c0 <__NVIC_SetPriorityGrouping+0x44>)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	60d3      	str	r3, [r2, #12]
}
 80027b4:	bf00      	nop
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027c8:	4b04      	ldr	r3, [pc, #16]	; (80027dc <__NVIC_GetPriorityGrouping+0x18>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	0a1b      	lsrs	r3, r3, #8
 80027ce:	f003 0307 	and.w	r3, r3, #7
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	db0b      	blt.n	800280a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	f003 021f 	and.w	r2, r3, #31
 80027f8:	4907      	ldr	r1, [pc, #28]	; (8002818 <__NVIC_EnableIRQ+0x38>)
 80027fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fe:	095b      	lsrs	r3, r3, #5
 8002800:	2001      	movs	r0, #1
 8002802:	fa00 f202 	lsl.w	r2, r0, r2
 8002806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	e000e100 	.word	0xe000e100

0800281c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	6039      	str	r1, [r7, #0]
 8002826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282c:	2b00      	cmp	r3, #0
 800282e:	db0a      	blt.n	8002846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	b2da      	uxtb	r2, r3
 8002834:	490c      	ldr	r1, [pc, #48]	; (8002868 <__NVIC_SetPriority+0x4c>)
 8002836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283a:	0112      	lsls	r2, r2, #4
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	440b      	add	r3, r1
 8002840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002844:	e00a      	b.n	800285c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	b2da      	uxtb	r2, r3
 800284a:	4908      	ldr	r1, [pc, #32]	; (800286c <__NVIC_SetPriority+0x50>)
 800284c:	79fb      	ldrb	r3, [r7, #7]
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	3b04      	subs	r3, #4
 8002854:	0112      	lsls	r2, r2, #4
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	440b      	add	r3, r1
 800285a:	761a      	strb	r2, [r3, #24]
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	e000e100 	.word	0xe000e100
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002870:	b480      	push	{r7}
 8002872:	b089      	sub	sp, #36	; 0x24
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f1c3 0307 	rsb	r3, r3, #7
 800288a:	2b04      	cmp	r3, #4
 800288c:	bf28      	it	cs
 800288e:	2304      	movcs	r3, #4
 8002890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	3304      	adds	r3, #4
 8002896:	2b06      	cmp	r3, #6
 8002898:	d902      	bls.n	80028a0 <NVIC_EncodePriority+0x30>
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	3b03      	subs	r3, #3
 800289e:	e000      	b.n	80028a2 <NVIC_EncodePriority+0x32>
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a4:	f04f 32ff 	mov.w	r2, #4294967295
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43da      	mvns	r2, r3
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	401a      	ands	r2, r3
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028b8:	f04f 31ff 	mov.w	r1, #4294967295
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	fa01 f303 	lsl.w	r3, r1, r3
 80028c2:	43d9      	mvns	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c8:	4313      	orrs	r3, r2
         );
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3724      	adds	r7, #36	; 0x24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff ff4c 	bl	800277c <__NVIC_SetPriorityGrouping>
}
 80028e4:	bf00      	nop
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
 80028f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028fe:	f7ff ff61 	bl	80027c4 <__NVIC_GetPriorityGrouping>
 8002902:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	68b9      	ldr	r1, [r7, #8]
 8002908:	6978      	ldr	r0, [r7, #20]
 800290a:	f7ff ffb1 	bl	8002870 <NVIC_EncodePriority>
 800290e:	4602      	mov	r2, r0
 8002910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002914:	4611      	mov	r1, r2
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff ff80 	bl	800281c <__NVIC_SetPriority>
}
 800291c:	bf00      	nop
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	4603      	mov	r3, r0
 800292c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800292e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff ff54 	bl	80027e0 <__NVIC_EnableIRQ>
}
 8002938:	bf00      	nop
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002940:	b480      	push	{r7}
 8002942:	b089      	sub	sp, #36	; 0x24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002952:	2300      	movs	r3, #0
 8002954:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002956:	2300      	movs	r3, #0
 8002958:	61fb      	str	r3, [r7, #28]
 800295a:	e165      	b.n	8002c28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800295c:	2201      	movs	r2, #1
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	4013      	ands	r3, r2
 800296e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	429a      	cmp	r2, r3
 8002976:	f040 8154 	bne.w	8002c22 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 0303 	and.w	r3, r3, #3
 8002982:	2b01      	cmp	r3, #1
 8002984:	d005      	beq.n	8002992 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800298e:	2b02      	cmp	r3, #2
 8002990:	d130      	bne.n	80029f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	2203      	movs	r2, #3
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029c8:	2201      	movs	r2, #1
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4013      	ands	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	f003 0201 	and.w	r2, r3, #1
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	d017      	beq.n	8002a30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	2203      	movs	r2, #3
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d123      	bne.n	8002a84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	08da      	lsrs	r2, r3, #3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3208      	adds	r2, #8
 8002a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	220f      	movs	r2, #15
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	691a      	ldr	r2, [r3, #16]
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	08da      	lsrs	r2, r3, #3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3208      	adds	r2, #8
 8002a7e:	69b9      	ldr	r1, [r7, #24]
 8002a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	2203      	movs	r2, #3
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 0203 	and.w	r2, r3, #3
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 80ae 	beq.w	8002c22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	4b5d      	ldr	r3, [pc, #372]	; (8002c40 <HAL_GPIO_Init+0x300>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	4a5c      	ldr	r2, [pc, #368]	; (8002c40 <HAL_GPIO_Init+0x300>)
 8002ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ad6:	4b5a      	ldr	r3, [pc, #360]	; (8002c40 <HAL_GPIO_Init+0x300>)
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ae2:	4a58      	ldr	r2, [pc, #352]	; (8002c44 <HAL_GPIO_Init+0x304>)
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	089b      	lsrs	r3, r3, #2
 8002ae8:	3302      	adds	r3, #2
 8002aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	220f      	movs	r2, #15
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	43db      	mvns	r3, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4013      	ands	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a4f      	ldr	r2, [pc, #316]	; (8002c48 <HAL_GPIO_Init+0x308>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d025      	beq.n	8002b5a <HAL_GPIO_Init+0x21a>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a4e      	ldr	r2, [pc, #312]	; (8002c4c <HAL_GPIO_Init+0x30c>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d01f      	beq.n	8002b56 <HAL_GPIO_Init+0x216>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a4d      	ldr	r2, [pc, #308]	; (8002c50 <HAL_GPIO_Init+0x310>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d019      	beq.n	8002b52 <HAL_GPIO_Init+0x212>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a4c      	ldr	r2, [pc, #304]	; (8002c54 <HAL_GPIO_Init+0x314>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d013      	beq.n	8002b4e <HAL_GPIO_Init+0x20e>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a4b      	ldr	r2, [pc, #300]	; (8002c58 <HAL_GPIO_Init+0x318>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d00d      	beq.n	8002b4a <HAL_GPIO_Init+0x20a>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a4a      	ldr	r2, [pc, #296]	; (8002c5c <HAL_GPIO_Init+0x31c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d007      	beq.n	8002b46 <HAL_GPIO_Init+0x206>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a49      	ldr	r2, [pc, #292]	; (8002c60 <HAL_GPIO_Init+0x320>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d101      	bne.n	8002b42 <HAL_GPIO_Init+0x202>
 8002b3e:	2306      	movs	r3, #6
 8002b40:	e00c      	b.n	8002b5c <HAL_GPIO_Init+0x21c>
 8002b42:	2307      	movs	r3, #7
 8002b44:	e00a      	b.n	8002b5c <HAL_GPIO_Init+0x21c>
 8002b46:	2305      	movs	r3, #5
 8002b48:	e008      	b.n	8002b5c <HAL_GPIO_Init+0x21c>
 8002b4a:	2304      	movs	r3, #4
 8002b4c:	e006      	b.n	8002b5c <HAL_GPIO_Init+0x21c>
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e004      	b.n	8002b5c <HAL_GPIO_Init+0x21c>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e002      	b.n	8002b5c <HAL_GPIO_Init+0x21c>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <HAL_GPIO_Init+0x21c>
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	69fa      	ldr	r2, [r7, #28]
 8002b5e:	f002 0203 	and.w	r2, r2, #3
 8002b62:	0092      	lsls	r2, r2, #2
 8002b64:	4093      	lsls	r3, r2
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b6c:	4935      	ldr	r1, [pc, #212]	; (8002c44 <HAL_GPIO_Init+0x304>)
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	089b      	lsrs	r3, r3, #2
 8002b72:	3302      	adds	r3, #2
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b7a:	4b3a      	ldr	r3, [pc, #232]	; (8002c64 <HAL_GPIO_Init+0x324>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	43db      	mvns	r3, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4013      	ands	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b9e:	4a31      	ldr	r2, [pc, #196]	; (8002c64 <HAL_GPIO_Init+0x324>)
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ba4:	4b2f      	ldr	r3, [pc, #188]	; (8002c64 <HAL_GPIO_Init+0x324>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d003      	beq.n	8002bc8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bc8:	4a26      	ldr	r2, [pc, #152]	; (8002c64 <HAL_GPIO_Init+0x324>)
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bce:	4b25      	ldr	r3, [pc, #148]	; (8002c64 <HAL_GPIO_Init+0x324>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bf2:	4a1c      	ldr	r2, [pc, #112]	; (8002c64 <HAL_GPIO_Init+0x324>)
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bf8:	4b1a      	ldr	r3, [pc, #104]	; (8002c64 <HAL_GPIO_Init+0x324>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c1c:	4a11      	ldr	r2, [pc, #68]	; (8002c64 <HAL_GPIO_Init+0x324>)
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3301      	adds	r3, #1
 8002c26:	61fb      	str	r3, [r7, #28]
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	2b0f      	cmp	r3, #15
 8002c2c:	f67f ae96 	bls.w	800295c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c30:	bf00      	nop
 8002c32:	bf00      	nop
 8002c34:	3724      	adds	r7, #36	; 0x24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40013800 	.word	0x40013800
 8002c48:	40020000 	.word	0x40020000
 8002c4c:	40020400 	.word	0x40020400
 8002c50:	40020800 	.word	0x40020800
 8002c54:	40020c00 	.word	0x40020c00
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	40021400 	.word	0x40021400
 8002c60:	40021800 	.word	0x40021800
 8002c64:	40013c00 	.word	0x40013c00

08002c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	460b      	mov	r3, r1
 8002c72:	807b      	strh	r3, [r7, #2]
 8002c74:	4613      	mov	r3, r2
 8002c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c78:	787b      	ldrb	r3, [r7, #1]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c7e:	887a      	ldrh	r2, [r7, #2]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c84:	e003      	b.n	8002c8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c86:	887b      	ldrh	r3, [r7, #2]
 8002c88:	041a      	lsls	r2, r3, #16
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	619a      	str	r2, [r3, #24]
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
	...

08002c9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e12b      	b.n	8002f06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d106      	bne.n	8002cc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7fe feea 	bl	8001a9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2224      	movs	r2, #36	; 0x24
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0201 	bic.w	r2, r2, #1
 8002cde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cfe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d00:	f000 fe8a 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 8002d04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	4a81      	ldr	r2, [pc, #516]	; (8002f10 <HAL_I2C_Init+0x274>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d807      	bhi.n	8002d20 <HAL_I2C_Init+0x84>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4a80      	ldr	r2, [pc, #512]	; (8002f14 <HAL_I2C_Init+0x278>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	bf94      	ite	ls
 8002d18:	2301      	movls	r3, #1
 8002d1a:	2300      	movhi	r3, #0
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	e006      	b.n	8002d2e <HAL_I2C_Init+0x92>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4a7d      	ldr	r2, [pc, #500]	; (8002f18 <HAL_I2C_Init+0x27c>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	bf94      	ite	ls
 8002d28:	2301      	movls	r3, #1
 8002d2a:	2300      	movhi	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e0e7      	b.n	8002f06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4a78      	ldr	r2, [pc, #480]	; (8002f1c <HAL_I2C_Init+0x280>)
 8002d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3e:	0c9b      	lsrs	r3, r3, #18
 8002d40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	4a6a      	ldr	r2, [pc, #424]	; (8002f10 <HAL_I2C_Init+0x274>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d802      	bhi.n	8002d70 <HAL_I2C_Init+0xd4>
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	e009      	b.n	8002d84 <HAL_I2C_Init+0xe8>
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d76:	fb02 f303 	mul.w	r3, r2, r3
 8002d7a:	4a69      	ldr	r2, [pc, #420]	; (8002f20 <HAL_I2C_Init+0x284>)
 8002d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d80:	099b      	lsrs	r3, r3, #6
 8002d82:	3301      	adds	r3, #1
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6812      	ldr	r2, [r2, #0]
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	495c      	ldr	r1, [pc, #368]	; (8002f10 <HAL_I2C_Init+0x274>)
 8002da0:	428b      	cmp	r3, r1
 8002da2:	d819      	bhi.n	8002dd8 <HAL_I2C_Init+0x13c>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	1e59      	subs	r1, r3, #1
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	fbb1 f3f3 	udiv	r3, r1, r3
 8002db2:	1c59      	adds	r1, r3, #1
 8002db4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002db8:	400b      	ands	r3, r1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00a      	beq.n	8002dd4 <HAL_I2C_Init+0x138>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	1e59      	subs	r1, r3, #1
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dcc:	3301      	adds	r3, #1
 8002dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd2:	e051      	b.n	8002e78 <HAL_I2C_Init+0x1dc>
 8002dd4:	2304      	movs	r3, #4
 8002dd6:	e04f      	b.n	8002e78 <HAL_I2C_Init+0x1dc>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d111      	bne.n	8002e04 <HAL_I2C_Init+0x168>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	1e58      	subs	r0, r3, #1
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6859      	ldr	r1, [r3, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	440b      	add	r3, r1
 8002dee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002df2:	3301      	adds	r3, #1
 8002df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	bf0c      	ite	eq
 8002dfc:	2301      	moveq	r3, #1
 8002dfe:	2300      	movne	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	e012      	b.n	8002e2a <HAL_I2C_Init+0x18e>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	1e58      	subs	r0, r3, #1
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6859      	ldr	r1, [r3, #4]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	0099      	lsls	r1, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	bf0c      	ite	eq
 8002e24:	2301      	moveq	r3, #1
 8002e26:	2300      	movne	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_I2C_Init+0x196>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e022      	b.n	8002e78 <HAL_I2C_Init+0x1dc>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10e      	bne.n	8002e58 <HAL_I2C_Init+0x1bc>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	1e58      	subs	r0, r3, #1
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6859      	ldr	r1, [r3, #4]
 8002e42:	460b      	mov	r3, r1
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	440b      	add	r3, r1
 8002e48:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e56:	e00f      	b.n	8002e78 <HAL_I2C_Init+0x1dc>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	1e58      	subs	r0, r3, #1
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6859      	ldr	r1, [r3, #4]
 8002e60:	460b      	mov	r3, r1
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	0099      	lsls	r1, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e6e:	3301      	adds	r3, #1
 8002e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	6809      	ldr	r1, [r1, #0]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69da      	ldr	r2, [r3, #28]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ea6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6911      	ldr	r1, [r2, #16]
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	68d2      	ldr	r2, [r2, #12]
 8002eb2:	4311      	orrs	r1, r2
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6812      	ldr	r2, [r2, #0]
 8002eb8:	430b      	orrs	r3, r1
 8002eba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	695a      	ldr	r2, [r3, #20]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0201 	orr.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	000186a0 	.word	0x000186a0
 8002f14:	001e847f 	.word	0x001e847f
 8002f18:	003d08ff 	.word	0x003d08ff
 8002f1c:	431bde83 	.word	0x431bde83
 8002f20:	10624dd3 	.word	0x10624dd3

08002f24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b088      	sub	sp, #32
 8002f28:	af02      	add	r7, sp, #8
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	607a      	str	r2, [r7, #4]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	460b      	mov	r3, r1
 8002f32:	817b      	strh	r3, [r7, #10]
 8002f34:	4613      	mov	r3, r2
 8002f36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f38:	f7ff f814 	bl	8001f64 <HAL_GetTick>
 8002f3c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b20      	cmp	r3, #32
 8002f48:	f040 80e0 	bne.w	800310c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	2319      	movs	r3, #25
 8002f52:	2201      	movs	r2, #1
 8002f54:	4970      	ldr	r1, [pc, #448]	; (8003118 <HAL_I2C_Master_Transmit+0x1f4>)
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 fa92 	bl	8003480 <I2C_WaitOnFlagUntilTimeout>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f62:	2302      	movs	r3, #2
 8002f64:	e0d3      	b.n	800310e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d101      	bne.n	8002f74 <HAL_I2C_Master_Transmit+0x50>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e0cc      	b.n	800310e <HAL_I2C_Master_Transmit+0x1ea>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d007      	beq.n	8002f9a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f042 0201 	orr.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fa8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2221      	movs	r2, #33	; 0x21
 8002fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2210      	movs	r2, #16
 8002fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	893a      	ldrh	r2, [r7, #8]
 8002fca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4a50      	ldr	r2, [pc, #320]	; (800311c <HAL_I2C_Master_Transmit+0x1f8>)
 8002fda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fdc:	8979      	ldrh	r1, [r7, #10]
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	6a3a      	ldr	r2, [r7, #32]
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 f9ca 	bl	800337c <I2C_MasterRequestWrite>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e08d      	b.n	800310e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	613b      	str	r3, [r7, #16]
 8003006:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003008:	e066      	b.n	80030d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	6a39      	ldr	r1, [r7, #32]
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 fb50 	bl	80036b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00d      	beq.n	8003036 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	2b04      	cmp	r3, #4
 8003020:	d107      	bne.n	8003032 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003030:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e06b      	b.n	800310e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	781a      	ldrb	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	1c5a      	adds	r2, r3, #1
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003050:	b29b      	uxth	r3, r3
 8003052:	3b01      	subs	r3, #1
 8003054:	b29a      	uxth	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305e:	3b01      	subs	r3, #1
 8003060:	b29a      	uxth	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b04      	cmp	r3, #4
 8003072:	d11b      	bne.n	80030ac <HAL_I2C_Master_Transmit+0x188>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003078:	2b00      	cmp	r3, #0
 800307a:	d017      	beq.n	80030ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	781a      	ldrb	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	1c5a      	adds	r2, r3, #1
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003096:	b29b      	uxth	r3, r3
 8003098:	3b01      	subs	r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a4:	3b01      	subs	r3, #1
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	6a39      	ldr	r1, [r7, #32]
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 fb47 	bl	8003744 <I2C_WaitOnBTFFlagUntilTimeout>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00d      	beq.n	80030d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	2b04      	cmp	r3, #4
 80030c2:	d107      	bne.n	80030d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e01a      	b.n	800310e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d194      	bne.n	800300a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	e000      	b.n	800310e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800310c:	2302      	movs	r3, #2
  }
}
 800310e:	4618      	mov	r0, r3
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	00100002 	.word	0x00100002
 800311c:	ffff0000 	.word	0xffff0000

08003120 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b08a      	sub	sp, #40	; 0x28
 8003124:	af02      	add	r7, sp, #8
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	607a      	str	r2, [r7, #4]
 800312a:	603b      	str	r3, [r7, #0]
 800312c:	460b      	mov	r3, r1
 800312e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003130:	f7fe ff18 	bl	8001f64 <HAL_GetTick>
 8003134:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003136:	2300      	movs	r3, #0
 8003138:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b20      	cmp	r3, #32
 8003144:	f040 8111 	bne.w	800336a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	2319      	movs	r3, #25
 800314e:	2201      	movs	r2, #1
 8003150:	4988      	ldr	r1, [pc, #544]	; (8003374 <HAL_I2C_IsDeviceReady+0x254>)
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 f994 	bl	8003480 <I2C_WaitOnFlagUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800315e:	2302      	movs	r3, #2
 8003160:	e104      	b.n	800336c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003168:	2b01      	cmp	r3, #1
 800316a:	d101      	bne.n	8003170 <HAL_I2C_IsDeviceReady+0x50>
 800316c:	2302      	movs	r3, #2
 800316e:	e0fd      	b.n	800336c <HAL_I2C_IsDeviceReady+0x24c>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b01      	cmp	r3, #1
 8003184:	d007      	beq.n	8003196 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 0201 	orr.w	r2, r2, #1
 8003194:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2224      	movs	r2, #36	; 0x24
 80031aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4a70      	ldr	r2, [pc, #448]	; (8003378 <HAL_I2C_IsDeviceReady+0x258>)
 80031b8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031c8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 f952 	bl	8003480 <I2C_WaitOnFlagUntilTimeout>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00d      	beq.n	80031fe <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031f0:	d103      	bne.n	80031fa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031f8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e0b6      	b.n	800336c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031fe:	897b      	ldrh	r3, [r7, #10]
 8003200:	b2db      	uxtb	r3, r3
 8003202:	461a      	mov	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800320c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800320e:	f7fe fea9 	bl	8001f64 <HAL_GetTick>
 8003212:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b02      	cmp	r3, #2
 8003220:	bf0c      	ite	eq
 8003222:	2301      	moveq	r3, #1
 8003224:	2300      	movne	r3, #0
 8003226:	b2db      	uxtb	r3, r3
 8003228:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003238:	bf0c      	ite	eq
 800323a:	2301      	moveq	r3, #1
 800323c:	2300      	movne	r3, #0
 800323e:	b2db      	uxtb	r3, r3
 8003240:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003242:	e025      	b.n	8003290 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003244:	f7fe fe8e 	bl	8001f64 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	429a      	cmp	r2, r3
 8003252:	d302      	bcc.n	800325a <HAL_I2C_IsDeviceReady+0x13a>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d103      	bne.n	8003262 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	22a0      	movs	r2, #160	; 0xa0
 800325e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b02      	cmp	r3, #2
 800326e:	bf0c      	ite	eq
 8003270:	2301      	moveq	r3, #1
 8003272:	2300      	movne	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003286:	bf0c      	ite	eq
 8003288:	2301      	moveq	r3, #1
 800328a:	2300      	movne	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2ba0      	cmp	r3, #160	; 0xa0
 800329a:	d005      	beq.n	80032a8 <HAL_I2C_IsDeviceReady+0x188>
 800329c:	7dfb      	ldrb	r3, [r7, #23]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d102      	bne.n	80032a8 <HAL_I2C_IsDeviceReady+0x188>
 80032a2:	7dbb      	ldrb	r3, [r7, #22]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0cd      	beq.n	8003244 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d129      	bne.n	8003312 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032cc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ce:	2300      	movs	r3, #0
 80032d0:	613b      	str	r3, [r7, #16]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	613b      	str	r3, [r7, #16]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	613b      	str	r3, [r7, #16]
 80032e2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	2319      	movs	r3, #25
 80032ea:	2201      	movs	r2, #1
 80032ec:	4921      	ldr	r1, [pc, #132]	; (8003374 <HAL_I2C_IsDeviceReady+0x254>)
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 f8c6 	bl	8003480 <I2C_WaitOnFlagUntilTimeout>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e036      	b.n	800336c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2220      	movs	r2, #32
 8003302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	e02c      	b.n	800336c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003320:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800332a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	2319      	movs	r3, #25
 8003332:	2201      	movs	r2, #1
 8003334:	490f      	ldr	r1, [pc, #60]	; (8003374 <HAL_I2C_IsDeviceReady+0x254>)
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 f8a2 	bl	8003480 <I2C_WaitOnFlagUntilTimeout>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e012      	b.n	800336c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	3301      	adds	r3, #1
 800334a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	429a      	cmp	r2, r3
 8003352:	f4ff af32 	bcc.w	80031ba <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2220      	movs	r2, #32
 800335a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800336a:	2302      	movs	r3, #2
  }
}
 800336c:	4618      	mov	r0, r3
 800336e:	3720      	adds	r7, #32
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	00100002 	.word	0x00100002
 8003378:	ffff0000 	.word	0xffff0000

0800337c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b088      	sub	sp, #32
 8003380:	af02      	add	r7, sp, #8
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	607a      	str	r2, [r7, #4]
 8003386:	603b      	str	r3, [r7, #0]
 8003388:	460b      	mov	r3, r1
 800338a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003390:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2b08      	cmp	r3, #8
 8003396:	d006      	beq.n	80033a6 <I2C_MasterRequestWrite+0x2a>
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d003      	beq.n	80033a6 <I2C_MasterRequestWrite+0x2a>
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033a4:	d108      	bne.n	80033b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	e00b      	b.n	80033d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033bc:	2b12      	cmp	r3, #18
 80033be:	d107      	bne.n	80033d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 f84f 	bl	8003480 <I2C_WaitOnFlagUntilTimeout>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00d      	beq.n	8003404 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033f6:	d103      	bne.n	8003400 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e035      	b.n	8003470 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800340c:	d108      	bne.n	8003420 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800340e:	897b      	ldrh	r3, [r7, #10]
 8003410:	b2db      	uxtb	r3, r3
 8003412:	461a      	mov	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800341c:	611a      	str	r2, [r3, #16]
 800341e:	e01b      	b.n	8003458 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003420:	897b      	ldrh	r3, [r7, #10]
 8003422:	11db      	asrs	r3, r3, #7
 8003424:	b2db      	uxtb	r3, r3
 8003426:	f003 0306 	and.w	r3, r3, #6
 800342a:	b2db      	uxtb	r3, r3
 800342c:	f063 030f 	orn	r3, r3, #15
 8003430:	b2da      	uxtb	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	490e      	ldr	r1, [pc, #56]	; (8003478 <I2C_MasterRequestWrite+0xfc>)
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 f898 	bl	8003574 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e010      	b.n	8003470 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800344e:	897b      	ldrh	r3, [r7, #10]
 8003450:	b2da      	uxtb	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	4907      	ldr	r1, [pc, #28]	; (800347c <I2C_MasterRequestWrite+0x100>)
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 f888 	bl	8003574 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	00010008 	.word	0x00010008
 800347c:	00010002 	.word	0x00010002

08003480 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	4613      	mov	r3, r2
 800348e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003490:	e048      	b.n	8003524 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003498:	d044      	beq.n	8003524 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800349a:	f7fe fd63 	bl	8001f64 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d302      	bcc.n	80034b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d139      	bne.n	8003524 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	0c1b      	lsrs	r3, r3, #16
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d10d      	bne.n	80034d6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	43da      	mvns	r2, r3
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	4013      	ands	r3, r2
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	bf0c      	ite	eq
 80034cc:	2301      	moveq	r3, #1
 80034ce:	2300      	movne	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	461a      	mov	r2, r3
 80034d4:	e00c      	b.n	80034f0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	43da      	mvns	r2, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	4013      	ands	r3, r2
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	bf0c      	ite	eq
 80034e8:	2301      	moveq	r3, #1
 80034ea:	2300      	movne	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	461a      	mov	r2, r3
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d116      	bne.n	8003524 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2220      	movs	r2, #32
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	f043 0220 	orr.w	r2, r3, #32
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e023      	b.n	800356c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	0c1b      	lsrs	r3, r3, #16
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b01      	cmp	r3, #1
 800352c:	d10d      	bne.n	800354a <I2C_WaitOnFlagUntilTimeout+0xca>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	43da      	mvns	r2, r3
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	4013      	ands	r3, r2
 800353a:	b29b      	uxth	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	bf0c      	ite	eq
 8003540:	2301      	moveq	r3, #1
 8003542:	2300      	movne	r3, #0
 8003544:	b2db      	uxtb	r3, r3
 8003546:	461a      	mov	r2, r3
 8003548:	e00c      	b.n	8003564 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	43da      	mvns	r2, r3
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	4013      	ands	r3, r2
 8003556:	b29b      	uxth	r3, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	bf0c      	ite	eq
 800355c:	2301      	moveq	r3, #1
 800355e:	2300      	movne	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	461a      	mov	r2, r3
 8003564:	79fb      	ldrb	r3, [r7, #7]
 8003566:	429a      	cmp	r2, r3
 8003568:	d093      	beq.n	8003492 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
 8003580:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003582:	e071      	b.n	8003668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800358e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003592:	d123      	bne.n	80035dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035a2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	f043 0204 	orr.w	r2, r3, #4
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e067      	b.n	80036ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e2:	d041      	beq.n	8003668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e4:	f7fe fcbe 	bl	8001f64 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d302      	bcc.n	80035fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d136      	bne.n	8003668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	0c1b      	lsrs	r3, r3, #16
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b01      	cmp	r3, #1
 8003602:	d10c      	bne.n	800361e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	43da      	mvns	r2, r3
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	4013      	ands	r3, r2
 8003610:	b29b      	uxth	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	bf14      	ite	ne
 8003616:	2301      	movne	r3, #1
 8003618:	2300      	moveq	r3, #0
 800361a:	b2db      	uxtb	r3, r3
 800361c:	e00b      	b.n	8003636 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	43da      	mvns	r2, r3
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	4013      	ands	r3, r2
 800362a:	b29b      	uxth	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	bf14      	ite	ne
 8003630:	2301      	movne	r3, #1
 8003632:	2300      	moveq	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d016      	beq.n	8003668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	f043 0220 	orr.w	r2, r3, #32
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e021      	b.n	80036ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	0c1b      	lsrs	r3, r3, #16
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b01      	cmp	r3, #1
 8003670:	d10c      	bne.n	800368c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	43da      	mvns	r2, r3
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	4013      	ands	r3, r2
 800367e:	b29b      	uxth	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	bf14      	ite	ne
 8003684:	2301      	movne	r3, #1
 8003686:	2300      	moveq	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	e00b      	b.n	80036a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	43da      	mvns	r2, r3
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4013      	ands	r3, r2
 8003698:	b29b      	uxth	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	bf14      	ite	ne
 800369e:	2301      	movne	r3, #1
 80036a0:	2300      	moveq	r3, #0
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f47f af6d 	bne.w	8003584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036c0:	e034      	b.n	800372c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 f886 	bl	80037d4 <I2C_IsAcknowledgeFailed>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e034      	b.n	800373c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d8:	d028      	beq.n	800372c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036da:	f7fe fc43 	bl	8001f64 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d302      	bcc.n	80036f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d11d      	bne.n	800372c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fa:	2b80      	cmp	r3, #128	; 0x80
 80036fc:	d016      	beq.n	800372c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	f043 0220 	orr.w	r2, r3, #32
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e007      	b.n	800373c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003736:	2b80      	cmp	r3, #128	; 0x80
 8003738:	d1c3      	bne.n	80036c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003750:	e034      	b.n	80037bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 f83e 	bl	80037d4 <I2C_IsAcknowledgeFailed>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e034      	b.n	80037cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003768:	d028      	beq.n	80037bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800376a:	f7fe fbfb 	bl	8001f64 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	429a      	cmp	r2, r3
 8003778:	d302      	bcc.n	8003780 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d11d      	bne.n	80037bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	f003 0304 	and.w	r3, r3, #4
 800378a:	2b04      	cmp	r3, #4
 800378c:	d016      	beq.n	80037bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2220      	movs	r2, #32
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	f043 0220 	orr.w	r2, r3, #32
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e007      	b.n	80037cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	f003 0304 	and.w	r3, r3, #4
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d1c3      	bne.n	8003752 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ea:	d11b      	bne.n	8003824 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2220      	movs	r2, #32
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	f043 0204 	orr.w	r2, r3, #4
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e000      	b.n	8003826 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
	...

08003834 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0cc      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003848:	4b68      	ldr	r3, [pc, #416]	; (80039ec <HAL_RCC_ClockConfig+0x1b8>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 030f 	and.w	r3, r3, #15
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d90c      	bls.n	8003870 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003856:	4b65      	ldr	r3, [pc, #404]	; (80039ec <HAL_RCC_ClockConfig+0x1b8>)
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800385e:	4b63      	ldr	r3, [pc, #396]	; (80039ec <HAL_RCC_ClockConfig+0x1b8>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	429a      	cmp	r2, r3
 800386a:	d001      	beq.n	8003870 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e0b8      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d020      	beq.n	80038be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b00      	cmp	r3, #0
 8003886:	d005      	beq.n	8003894 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003888:	4b59      	ldr	r3, [pc, #356]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	4a58      	ldr	r2, [pc, #352]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003892:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	2b00      	cmp	r3, #0
 800389e:	d005      	beq.n	80038ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038a0:	4b53      	ldr	r3, [pc, #332]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	4a52      	ldr	r2, [pc, #328]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ac:	4b50      	ldr	r3, [pc, #320]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	494d      	ldr	r1, [pc, #308]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d044      	beq.n	8003954 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d107      	bne.n	80038e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038d2:	4b47      	ldr	r3, [pc, #284]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d119      	bne.n	8003912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e07f      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d003      	beq.n	80038f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ee:	2b03      	cmp	r3, #3
 80038f0:	d107      	bne.n	8003902 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f2:	4b3f      	ldr	r3, [pc, #252]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d109      	bne.n	8003912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e06f      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003902:	4b3b      	ldr	r3, [pc, #236]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e067      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003912:	4b37      	ldr	r3, [pc, #220]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f023 0203 	bic.w	r2, r3, #3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	4934      	ldr	r1, [pc, #208]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003920:	4313      	orrs	r3, r2
 8003922:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003924:	f7fe fb1e 	bl	8001f64 <HAL_GetTick>
 8003928:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392a:	e00a      	b.n	8003942 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800392c:	f7fe fb1a 	bl	8001f64 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	f241 3288 	movw	r2, #5000	; 0x1388
 800393a:	4293      	cmp	r3, r2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e04f      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003942:	4b2b      	ldr	r3, [pc, #172]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 020c 	and.w	r2, r3, #12
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	429a      	cmp	r2, r3
 8003952:	d1eb      	bne.n	800392c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003954:	4b25      	ldr	r3, [pc, #148]	; (80039ec <HAL_RCC_ClockConfig+0x1b8>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 030f 	and.w	r3, r3, #15
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d20c      	bcs.n	800397c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003962:	4b22      	ldr	r3, [pc, #136]	; (80039ec <HAL_RCC_ClockConfig+0x1b8>)
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800396a:	4b20      	ldr	r3, [pc, #128]	; (80039ec <HAL_RCC_ClockConfig+0x1b8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	429a      	cmp	r2, r3
 8003976:	d001      	beq.n	800397c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e032      	b.n	80039e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b00      	cmp	r3, #0
 8003986:	d008      	beq.n	800399a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003988:	4b19      	ldr	r3, [pc, #100]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	4916      	ldr	r1, [pc, #88]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	4313      	orrs	r3, r2
 8003998:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0308 	and.w	r3, r3, #8
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d009      	beq.n	80039ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039a6:	4b12      	ldr	r3, [pc, #72]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	490e      	ldr	r1, [pc, #56]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039ba:	f000 f887 	bl	8003acc <HAL_RCC_GetSysClockFreq>
 80039be:	4602      	mov	r2, r0
 80039c0:	4b0b      	ldr	r3, [pc, #44]	; (80039f0 <HAL_RCC_ClockConfig+0x1bc>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	091b      	lsrs	r3, r3, #4
 80039c6:	f003 030f 	and.w	r3, r3, #15
 80039ca:	490a      	ldr	r1, [pc, #40]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 80039cc:	5ccb      	ldrb	r3, [r1, r3]
 80039ce:	fa22 f303 	lsr.w	r3, r2, r3
 80039d2:	4a09      	ldr	r2, [pc, #36]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80039d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039d6:	4b09      	ldr	r3, [pc, #36]	; (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fe f8ee 	bl	8001bbc <HAL_InitTick>

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40023c00 	.word	0x40023c00
 80039f0:	40023800 	.word	0x40023800
 80039f4:	0800b84c 	.word	0x0800b84c
 80039f8:	20000008 	.word	0x20000008
 80039fc:	2000000c 	.word	0x2000000c

08003a00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a04:	4b03      	ldr	r3, [pc, #12]	; (8003a14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a06:	681b      	ldr	r3, [r3, #0]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	20000008 	.word	0x20000008

08003a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a1c:	f7ff fff0 	bl	8003a00 <HAL_RCC_GetHCLKFreq>
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	0a9b      	lsrs	r3, r3, #10
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	4903      	ldr	r1, [pc, #12]	; (8003a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a2e:	5ccb      	ldrb	r3, [r1, r3]
 8003a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	0800b85c 	.word	0x0800b85c

08003a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a44:	f7ff ffdc 	bl	8003a00 <HAL_RCC_GetHCLKFreq>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	0b5b      	lsrs	r3, r3, #13
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	4903      	ldr	r1, [pc, #12]	; (8003a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a56:	5ccb      	ldrb	r3, [r1, r3]
 8003a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40023800 	.word	0x40023800
 8003a64:	0800b85c 	.word	0x0800b85c

08003a68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	220f      	movs	r2, #15
 8003a76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a78:	4b12      	ldr	r3, [pc, #72]	; (8003ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 0203 	and.w	r2, r3, #3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a84:	4b0f      	ldr	r3, [pc, #60]	; (8003ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a90:	4b0c      	ldr	r3, [pc, #48]	; (8003ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a9c:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	08db      	lsrs	r3, r3, #3
 8003aa2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003aaa:	4b07      	ldr	r3, [pc, #28]	; (8003ac8 <HAL_RCC_GetClockConfig+0x60>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 020f 	and.w	r2, r3, #15
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	601a      	str	r2, [r3, #0]
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	40023c00 	.word	0x40023c00

08003acc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ad0:	b0ae      	sub	sp, #184	; 0xb8
 8003ad2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003af2:	4bcb      	ldr	r3, [pc, #812]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x354>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 030c 	and.w	r3, r3, #12
 8003afa:	2b0c      	cmp	r3, #12
 8003afc:	f200 8206 	bhi.w	8003f0c <HAL_RCC_GetSysClockFreq+0x440>
 8003b00:	a201      	add	r2, pc, #4	; (adr r2, 8003b08 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b06:	bf00      	nop
 8003b08:	08003b3d 	.word	0x08003b3d
 8003b0c:	08003f0d 	.word	0x08003f0d
 8003b10:	08003f0d 	.word	0x08003f0d
 8003b14:	08003f0d 	.word	0x08003f0d
 8003b18:	08003b45 	.word	0x08003b45
 8003b1c:	08003f0d 	.word	0x08003f0d
 8003b20:	08003f0d 	.word	0x08003f0d
 8003b24:	08003f0d 	.word	0x08003f0d
 8003b28:	08003b4d 	.word	0x08003b4d
 8003b2c:	08003f0d 	.word	0x08003f0d
 8003b30:	08003f0d 	.word	0x08003f0d
 8003b34:	08003f0d 	.word	0x08003f0d
 8003b38:	08003d3d 	.word	0x08003d3d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b3c:	4bb9      	ldr	r3, [pc, #740]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x358>)
 8003b3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003b42:	e1e7      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b44:	4bb8      	ldr	r3, [pc, #736]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003b46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b4a:	e1e3      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b4c:	4bb4      	ldr	r3, [pc, #720]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b58:	4bb1      	ldr	r3, [pc, #708]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d071      	beq.n	8003c48 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b64:	4bae      	ldr	r3, [pc, #696]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	099b      	lsrs	r3, r3, #6
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b70:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003b74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b80:	2300      	movs	r3, #0
 8003b82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003b86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b8a:	4622      	mov	r2, r4
 8003b8c:	462b      	mov	r3, r5
 8003b8e:	f04f 0000 	mov.w	r0, #0
 8003b92:	f04f 0100 	mov.w	r1, #0
 8003b96:	0159      	lsls	r1, r3, #5
 8003b98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b9c:	0150      	lsls	r0, r2, #5
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4621      	mov	r1, r4
 8003ba4:	1a51      	subs	r1, r2, r1
 8003ba6:	6439      	str	r1, [r7, #64]	; 0x40
 8003ba8:	4629      	mov	r1, r5
 8003baa:	eb63 0301 	sbc.w	r3, r3, r1
 8003bae:	647b      	str	r3, [r7, #68]	; 0x44
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	f04f 0300 	mov.w	r3, #0
 8003bb8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003bbc:	4649      	mov	r1, r9
 8003bbe:	018b      	lsls	r3, r1, #6
 8003bc0:	4641      	mov	r1, r8
 8003bc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bc6:	4641      	mov	r1, r8
 8003bc8:	018a      	lsls	r2, r1, #6
 8003bca:	4641      	mov	r1, r8
 8003bcc:	1a51      	subs	r1, r2, r1
 8003bce:	63b9      	str	r1, [r7, #56]	; 0x38
 8003bd0:	4649      	mov	r1, r9
 8003bd2:	eb63 0301 	sbc.w	r3, r3, r1
 8003bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003be4:	4649      	mov	r1, r9
 8003be6:	00cb      	lsls	r3, r1, #3
 8003be8:	4641      	mov	r1, r8
 8003bea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bee:	4641      	mov	r1, r8
 8003bf0:	00ca      	lsls	r2, r1, #3
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	4622      	mov	r2, r4
 8003bfa:	189b      	adds	r3, r3, r2
 8003bfc:	633b      	str	r3, [r7, #48]	; 0x30
 8003bfe:	462b      	mov	r3, r5
 8003c00:	460a      	mov	r2, r1
 8003c02:	eb42 0303 	adc.w	r3, r2, r3
 8003c06:	637b      	str	r3, [r7, #52]	; 0x34
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c14:	4629      	mov	r1, r5
 8003c16:	024b      	lsls	r3, r1, #9
 8003c18:	4621      	mov	r1, r4
 8003c1a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c1e:	4621      	mov	r1, r4
 8003c20:	024a      	lsls	r2, r1, #9
 8003c22:	4610      	mov	r0, r2
 8003c24:	4619      	mov	r1, r3
 8003c26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c34:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003c38:	f7fd f826 	bl	8000c88 <__aeabi_uldivmod>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4613      	mov	r3, r2
 8003c42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c46:	e067      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c48:	4b75      	ldr	r3, [pc, #468]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	099b      	lsrs	r3, r3, #6
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c54:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003c58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c60:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c62:	2300      	movs	r3, #0
 8003c64:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c66:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003c6a:	4622      	mov	r2, r4
 8003c6c:	462b      	mov	r3, r5
 8003c6e:	f04f 0000 	mov.w	r0, #0
 8003c72:	f04f 0100 	mov.w	r1, #0
 8003c76:	0159      	lsls	r1, r3, #5
 8003c78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c7c:	0150      	lsls	r0, r2, #5
 8003c7e:	4602      	mov	r2, r0
 8003c80:	460b      	mov	r3, r1
 8003c82:	4621      	mov	r1, r4
 8003c84:	1a51      	subs	r1, r2, r1
 8003c86:	62b9      	str	r1, [r7, #40]	; 0x28
 8003c88:	4629      	mov	r1, r5
 8003c8a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003c9c:	4649      	mov	r1, r9
 8003c9e:	018b      	lsls	r3, r1, #6
 8003ca0:	4641      	mov	r1, r8
 8003ca2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ca6:	4641      	mov	r1, r8
 8003ca8:	018a      	lsls	r2, r1, #6
 8003caa:	4641      	mov	r1, r8
 8003cac:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cb0:	4649      	mov	r1, r9
 8003cb2:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	f04f 0300 	mov.w	r3, #0
 8003cbe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cc2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cca:	4692      	mov	sl, r2
 8003ccc:	469b      	mov	fp, r3
 8003cce:	4623      	mov	r3, r4
 8003cd0:	eb1a 0303 	adds.w	r3, sl, r3
 8003cd4:	623b      	str	r3, [r7, #32]
 8003cd6:	462b      	mov	r3, r5
 8003cd8:	eb4b 0303 	adc.w	r3, fp, r3
 8003cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cde:	f04f 0200 	mov.w	r2, #0
 8003ce2:	f04f 0300 	mov.w	r3, #0
 8003ce6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003cea:	4629      	mov	r1, r5
 8003cec:	028b      	lsls	r3, r1, #10
 8003cee:	4621      	mov	r1, r4
 8003cf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cf4:	4621      	mov	r1, r4
 8003cf6:	028a      	lsls	r2, r1, #10
 8003cf8:	4610      	mov	r0, r2
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d00:	2200      	movs	r2, #0
 8003d02:	673b      	str	r3, [r7, #112]	; 0x70
 8003d04:	677a      	str	r2, [r7, #116]	; 0x74
 8003d06:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003d0a:	f7fc ffbd 	bl	8000c88 <__aeabi_uldivmod>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	460b      	mov	r3, r1
 8003d12:	4613      	mov	r3, r2
 8003d14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d18:	4b41      	ldr	r3, [pc, #260]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	0c1b      	lsrs	r3, r3, #16
 8003d1e:	f003 0303 	and.w	r3, r3, #3
 8003d22:	3301      	adds	r3, #1
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003d2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d3a:	e0eb      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d3c:	4b38      	ldr	r3, [pc, #224]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d48:	4b35      	ldr	r3, [pc, #212]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d06b      	beq.n	8003e2c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d54:	4b32      	ldr	r3, [pc, #200]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	099b      	lsrs	r3, r3, #6
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d66:	663b      	str	r3, [r7, #96]	; 0x60
 8003d68:	2300      	movs	r3, #0
 8003d6a:	667b      	str	r3, [r7, #100]	; 0x64
 8003d6c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003d70:	4622      	mov	r2, r4
 8003d72:	462b      	mov	r3, r5
 8003d74:	f04f 0000 	mov.w	r0, #0
 8003d78:	f04f 0100 	mov.w	r1, #0
 8003d7c:	0159      	lsls	r1, r3, #5
 8003d7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d82:	0150      	lsls	r0, r2, #5
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	4621      	mov	r1, r4
 8003d8a:	1a51      	subs	r1, r2, r1
 8003d8c:	61b9      	str	r1, [r7, #24]
 8003d8e:	4629      	mov	r1, r5
 8003d90:	eb63 0301 	sbc.w	r3, r3, r1
 8003d94:	61fb      	str	r3, [r7, #28]
 8003d96:	f04f 0200 	mov.w	r2, #0
 8003d9a:	f04f 0300 	mov.w	r3, #0
 8003d9e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003da2:	4659      	mov	r1, fp
 8003da4:	018b      	lsls	r3, r1, #6
 8003da6:	4651      	mov	r1, sl
 8003da8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dac:	4651      	mov	r1, sl
 8003dae:	018a      	lsls	r2, r1, #6
 8003db0:	4651      	mov	r1, sl
 8003db2:	ebb2 0801 	subs.w	r8, r2, r1
 8003db6:	4659      	mov	r1, fp
 8003db8:	eb63 0901 	sbc.w	r9, r3, r1
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dc8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dcc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dd0:	4690      	mov	r8, r2
 8003dd2:	4699      	mov	r9, r3
 8003dd4:	4623      	mov	r3, r4
 8003dd6:	eb18 0303 	adds.w	r3, r8, r3
 8003dda:	613b      	str	r3, [r7, #16]
 8003ddc:	462b      	mov	r3, r5
 8003dde:	eb49 0303 	adc.w	r3, r9, r3
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	f04f 0200 	mov.w	r2, #0
 8003de8:	f04f 0300 	mov.w	r3, #0
 8003dec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003df0:	4629      	mov	r1, r5
 8003df2:	024b      	lsls	r3, r1, #9
 8003df4:	4621      	mov	r1, r4
 8003df6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003dfa:	4621      	mov	r1, r4
 8003dfc:	024a      	lsls	r2, r1, #9
 8003dfe:	4610      	mov	r0, r2
 8003e00:	4619      	mov	r1, r3
 8003e02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e06:	2200      	movs	r2, #0
 8003e08:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e0a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003e0c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e10:	f7fc ff3a 	bl	8000c88 <__aeabi_uldivmod>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4613      	mov	r3, r2
 8003e1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e1e:	e065      	b.n	8003eec <HAL_RCC_GetSysClockFreq+0x420>
 8003e20:	40023800 	.word	0x40023800
 8003e24:	00f42400 	.word	0x00f42400
 8003e28:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e2c:	4b3d      	ldr	r3, [pc, #244]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x458>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	099b      	lsrs	r3, r3, #6
 8003e32:	2200      	movs	r2, #0
 8003e34:	4618      	mov	r0, r3
 8003e36:	4611      	mov	r1, r2
 8003e38:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e3c:	653b      	str	r3, [r7, #80]	; 0x50
 8003e3e:	2300      	movs	r3, #0
 8003e40:	657b      	str	r3, [r7, #84]	; 0x54
 8003e42:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003e46:	4642      	mov	r2, r8
 8003e48:	464b      	mov	r3, r9
 8003e4a:	f04f 0000 	mov.w	r0, #0
 8003e4e:	f04f 0100 	mov.w	r1, #0
 8003e52:	0159      	lsls	r1, r3, #5
 8003e54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e58:	0150      	lsls	r0, r2, #5
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	4641      	mov	r1, r8
 8003e60:	1a51      	subs	r1, r2, r1
 8003e62:	60b9      	str	r1, [r7, #8]
 8003e64:	4649      	mov	r1, r9
 8003e66:	eb63 0301 	sbc.w	r3, r3, r1
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003e78:	4659      	mov	r1, fp
 8003e7a:	018b      	lsls	r3, r1, #6
 8003e7c:	4651      	mov	r1, sl
 8003e7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e82:	4651      	mov	r1, sl
 8003e84:	018a      	lsls	r2, r1, #6
 8003e86:	4651      	mov	r1, sl
 8003e88:	1a54      	subs	r4, r2, r1
 8003e8a:	4659      	mov	r1, fp
 8003e8c:	eb63 0501 	sbc.w	r5, r3, r1
 8003e90:	f04f 0200 	mov.w	r2, #0
 8003e94:	f04f 0300 	mov.w	r3, #0
 8003e98:	00eb      	lsls	r3, r5, #3
 8003e9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e9e:	00e2      	lsls	r2, r4, #3
 8003ea0:	4614      	mov	r4, r2
 8003ea2:	461d      	mov	r5, r3
 8003ea4:	4643      	mov	r3, r8
 8003ea6:	18e3      	adds	r3, r4, r3
 8003ea8:	603b      	str	r3, [r7, #0]
 8003eaa:	464b      	mov	r3, r9
 8003eac:	eb45 0303 	adc.w	r3, r5, r3
 8003eb0:	607b      	str	r3, [r7, #4]
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ebe:	4629      	mov	r1, r5
 8003ec0:	028b      	lsls	r3, r1, #10
 8003ec2:	4621      	mov	r1, r4
 8003ec4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ec8:	4621      	mov	r1, r4
 8003eca:	028a      	lsls	r2, r1, #10
 8003ecc:	4610      	mov	r0, r2
 8003ece:	4619      	mov	r1, r3
 8003ed0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ed8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003eda:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ede:	f7fc fed3 	bl	8000c88 <__aeabi_uldivmod>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003eec:	4b0d      	ldr	r3, [pc, #52]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x458>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	0f1b      	lsrs	r3, r3, #28
 8003ef2:	f003 0307 	and.w	r3, r3, #7
 8003ef6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003efa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003efe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f0a:	e003      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f0c:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003f0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	37b8      	adds	r7, #184	; 0xb8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f22:	bf00      	nop
 8003f24:	40023800 	.word	0x40023800
 8003f28:	00f42400 	.word	0x00f42400

08003f2c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e28d      	b.n	800445a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 8083 	beq.w	8004052 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f4c:	4b94      	ldr	r3, [pc, #592]	; (80041a0 <HAL_RCC_OscConfig+0x274>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 030c 	and.w	r3, r3, #12
 8003f54:	2b04      	cmp	r3, #4
 8003f56:	d019      	beq.n	8003f8c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f58:	4b91      	ldr	r3, [pc, #580]	; (80041a0 <HAL_RCC_OscConfig+0x274>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f60:	2b08      	cmp	r3, #8
 8003f62:	d106      	bne.n	8003f72 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f64:	4b8e      	ldr	r3, [pc, #568]	; (80041a0 <HAL_RCC_OscConfig+0x274>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f70:	d00c      	beq.n	8003f8c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f72:	4b8b      	ldr	r3, [pc, #556]	; (80041a0 <HAL_RCC_OscConfig+0x274>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f7a:	2b0c      	cmp	r3, #12
 8003f7c:	d112      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f7e:	4b88      	ldr	r3, [pc, #544]	; (80041a0 <HAL_RCC_OscConfig+0x274>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f8a:	d10b      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f8c:	4b84      	ldr	r3, [pc, #528]	; (80041a0 <HAL_RCC_OscConfig+0x274>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d05b      	beq.n	8004050 <HAL_RCC_OscConfig+0x124>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d157      	bne.n	8004050 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e25a      	b.n	800445a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fac:	d106      	bne.n	8003fbc <HAL_RCC_OscConfig+0x90>
 8003fae:	4b7c      	ldr	r3, [pc, #496]	; (80041a0 <HAL_RCC_OscConfig+0x274>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a7b      	ldr	r2, [pc, #492]	; (80041a0 <HAL_RCC_OscConfig+0x274>)
 8003fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	e01d      	b.n	8003ff8 <HAL_RCC_OscConfig+0xcc>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fc4:	d10c      	bne.n	8003fe0 <HAL_RCC_OscConfig+0xb4>
 8003fc6:	4b76      	ldr	r3, [pc, #472]	; (80041a0 <HAL_RCC_OscConfig+0x274>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a75      	ldr	r2, [pc, #468]	; (80041a0 <HAL_RCC_OscConfig+0x274>)
 8003fcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	4b73      	ldr	r3, [pc, #460]	; (80041a0 <HAL_RCC_OscConfig+0x274>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a72      	ldr	r2, [pc, #456]	; (80041a0 <HAL_RCC_OscConfig+0x274>)
 8003fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	e00b      	b.n	8003ff8 <HAL_RCC_OscConfig+0xcc>
 8003fe0:	4b6f      	ldr	r3, [pc, #444]	; (80041a0 <HAL_RCC_OscConfig+0x274>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a6e      	ldr	r2, [pc, #440]	; (80041a0 <HAL_RCC_OscConfig+0x274>)
 8003fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fea:	6013      	str	r3, [r2, #0]
 8003fec:	4b6c      	ldr	r3, [pc, #432]	; (80041a0 <HAL_RCC_OscConfig+0x274>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a6b      	ldr	r2, [pc, #428]	; (80041a0 <HAL_RCC_OscConfig+0x274>)
 8003ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ff6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d013      	beq.n	8004028 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004000:	f7fd ffb0 	bl	8001f64 <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004008:	f7fd ffac 	bl	8001f64 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b64      	cmp	r3, #100	; 0x64
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e21f      	b.n	800445a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800401a:	4b61      	ldr	r3, [pc, #388]	; (80041a0 <HAL_RCC_OscConfig+0x274>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0f0      	beq.n	8004008 <HAL_RCC_OscConfig+0xdc>
 8004026:	e014      	b.n	8004052 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fd ff9c 	bl	8001f64 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004030:	f7fd ff98 	bl	8001f64 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b64      	cmp	r3, #100	; 0x64
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e20b      	b.n	800445a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004042:	4b57      	ldr	r3, [pc, #348]	; (80041a0 <HAL_RCC_OscConfig+0x274>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f0      	bne.n	8004030 <HAL_RCC_OscConfig+0x104>
 800404e:	e000      	b.n	8004052 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d06f      	beq.n	800413e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800405e:	4b50      	ldr	r3, [pc, #320]	; (80041a0 <HAL_RCC_OscConfig+0x274>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 030c 	and.w	r3, r3, #12
 8004066:	2b00      	cmp	r3, #0
 8004068:	d017      	beq.n	800409a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800406a:	4b4d      	ldr	r3, [pc, #308]	; (80041a0 <HAL_RCC_OscConfig+0x274>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004072:	2b08      	cmp	r3, #8
 8004074:	d105      	bne.n	8004082 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004076:	4b4a      	ldr	r3, [pc, #296]	; (80041a0 <HAL_RCC_OscConfig+0x274>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00b      	beq.n	800409a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004082:	4b47      	ldr	r3, [pc, #284]	; (80041a0 <HAL_RCC_OscConfig+0x274>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800408a:	2b0c      	cmp	r3, #12
 800408c:	d11c      	bne.n	80040c8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800408e:	4b44      	ldr	r3, [pc, #272]	; (80041a0 <HAL_RCC_OscConfig+0x274>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d116      	bne.n	80040c8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800409a:	4b41      	ldr	r3, [pc, #260]	; (80041a0 <HAL_RCC_OscConfig+0x274>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d005      	beq.n	80040b2 <HAL_RCC_OscConfig+0x186>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d001      	beq.n	80040b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e1d3      	b.n	800445a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b2:	4b3b      	ldr	r3, [pc, #236]	; (80041a0 <HAL_RCC_OscConfig+0x274>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	4937      	ldr	r1, [pc, #220]	; (80041a0 <HAL_RCC_OscConfig+0x274>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040c6:	e03a      	b.n	800413e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d020      	beq.n	8004112 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040d0:	4b34      	ldr	r3, [pc, #208]	; (80041a4 <HAL_RCC_OscConfig+0x278>)
 80040d2:	2201      	movs	r2, #1
 80040d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d6:	f7fd ff45 	bl	8001f64 <HAL_GetTick>
 80040da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040dc:	e008      	b.n	80040f0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040de:	f7fd ff41 	bl	8001f64 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e1b4      	b.n	800445a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f0:	4b2b      	ldr	r3, [pc, #172]	; (80041a0 <HAL_RCC_OscConfig+0x274>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d0f0      	beq.n	80040de <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040fc:	4b28      	ldr	r3, [pc, #160]	; (80041a0 <HAL_RCC_OscConfig+0x274>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	4925      	ldr	r1, [pc, #148]	; (80041a0 <HAL_RCC_OscConfig+0x274>)
 800410c:	4313      	orrs	r3, r2
 800410e:	600b      	str	r3, [r1, #0]
 8004110:	e015      	b.n	800413e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004112:	4b24      	ldr	r3, [pc, #144]	; (80041a4 <HAL_RCC_OscConfig+0x278>)
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004118:	f7fd ff24 	bl	8001f64 <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004120:	f7fd ff20 	bl	8001f64 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e193      	b.n	800445a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004132:	4b1b      	ldr	r3, [pc, #108]	; (80041a0 <HAL_RCC_OscConfig+0x274>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f0      	bne.n	8004120 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0308 	and.w	r3, r3, #8
 8004146:	2b00      	cmp	r3, #0
 8004148:	d036      	beq.n	80041b8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d016      	beq.n	8004180 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004152:	4b15      	ldr	r3, [pc, #84]	; (80041a8 <HAL_RCC_OscConfig+0x27c>)
 8004154:	2201      	movs	r2, #1
 8004156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004158:	f7fd ff04 	bl	8001f64 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004160:	f7fd ff00 	bl	8001f64 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e173      	b.n	800445a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004172:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <HAL_RCC_OscConfig+0x274>)
 8004174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0f0      	beq.n	8004160 <HAL_RCC_OscConfig+0x234>
 800417e:	e01b      	b.n	80041b8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004180:	4b09      	ldr	r3, [pc, #36]	; (80041a8 <HAL_RCC_OscConfig+0x27c>)
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004186:	f7fd feed 	bl	8001f64 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800418c:	e00e      	b.n	80041ac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800418e:	f7fd fee9 	bl	8001f64 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d907      	bls.n	80041ac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e15c      	b.n	800445a <HAL_RCC_OscConfig+0x52e>
 80041a0:	40023800 	.word	0x40023800
 80041a4:	42470000 	.word	0x42470000
 80041a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041ac:	4b8a      	ldr	r3, [pc, #552]	; (80043d8 <HAL_RCC_OscConfig+0x4ac>)
 80041ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1ea      	bne.n	800418e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 8097 	beq.w	80042f4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041c6:	2300      	movs	r3, #0
 80041c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ca:	4b83      	ldr	r3, [pc, #524]	; (80043d8 <HAL_RCC_OscConfig+0x4ac>)
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10f      	bne.n	80041f6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041d6:	2300      	movs	r3, #0
 80041d8:	60bb      	str	r3, [r7, #8]
 80041da:	4b7f      	ldr	r3, [pc, #508]	; (80043d8 <HAL_RCC_OscConfig+0x4ac>)
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	4a7e      	ldr	r2, [pc, #504]	; (80043d8 <HAL_RCC_OscConfig+0x4ac>)
 80041e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e4:	6413      	str	r3, [r2, #64]	; 0x40
 80041e6:	4b7c      	ldr	r3, [pc, #496]	; (80043d8 <HAL_RCC_OscConfig+0x4ac>)
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ee:	60bb      	str	r3, [r7, #8]
 80041f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041f2:	2301      	movs	r3, #1
 80041f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f6:	4b79      	ldr	r3, [pc, #484]	; (80043dc <HAL_RCC_OscConfig+0x4b0>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d118      	bne.n	8004234 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004202:	4b76      	ldr	r3, [pc, #472]	; (80043dc <HAL_RCC_OscConfig+0x4b0>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a75      	ldr	r2, [pc, #468]	; (80043dc <HAL_RCC_OscConfig+0x4b0>)
 8004208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800420c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800420e:	f7fd fea9 	bl	8001f64 <HAL_GetTick>
 8004212:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004214:	e008      	b.n	8004228 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004216:	f7fd fea5 	bl	8001f64 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d901      	bls.n	8004228 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e118      	b.n	800445a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004228:	4b6c      	ldr	r3, [pc, #432]	; (80043dc <HAL_RCC_OscConfig+0x4b0>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004230:	2b00      	cmp	r3, #0
 8004232:	d0f0      	beq.n	8004216 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d106      	bne.n	800424a <HAL_RCC_OscConfig+0x31e>
 800423c:	4b66      	ldr	r3, [pc, #408]	; (80043d8 <HAL_RCC_OscConfig+0x4ac>)
 800423e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004240:	4a65      	ldr	r2, [pc, #404]	; (80043d8 <HAL_RCC_OscConfig+0x4ac>)
 8004242:	f043 0301 	orr.w	r3, r3, #1
 8004246:	6713      	str	r3, [r2, #112]	; 0x70
 8004248:	e01c      	b.n	8004284 <HAL_RCC_OscConfig+0x358>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	2b05      	cmp	r3, #5
 8004250:	d10c      	bne.n	800426c <HAL_RCC_OscConfig+0x340>
 8004252:	4b61      	ldr	r3, [pc, #388]	; (80043d8 <HAL_RCC_OscConfig+0x4ac>)
 8004254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004256:	4a60      	ldr	r2, [pc, #384]	; (80043d8 <HAL_RCC_OscConfig+0x4ac>)
 8004258:	f043 0304 	orr.w	r3, r3, #4
 800425c:	6713      	str	r3, [r2, #112]	; 0x70
 800425e:	4b5e      	ldr	r3, [pc, #376]	; (80043d8 <HAL_RCC_OscConfig+0x4ac>)
 8004260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004262:	4a5d      	ldr	r2, [pc, #372]	; (80043d8 <HAL_RCC_OscConfig+0x4ac>)
 8004264:	f043 0301 	orr.w	r3, r3, #1
 8004268:	6713      	str	r3, [r2, #112]	; 0x70
 800426a:	e00b      	b.n	8004284 <HAL_RCC_OscConfig+0x358>
 800426c:	4b5a      	ldr	r3, [pc, #360]	; (80043d8 <HAL_RCC_OscConfig+0x4ac>)
 800426e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004270:	4a59      	ldr	r2, [pc, #356]	; (80043d8 <HAL_RCC_OscConfig+0x4ac>)
 8004272:	f023 0301 	bic.w	r3, r3, #1
 8004276:	6713      	str	r3, [r2, #112]	; 0x70
 8004278:	4b57      	ldr	r3, [pc, #348]	; (80043d8 <HAL_RCC_OscConfig+0x4ac>)
 800427a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427c:	4a56      	ldr	r2, [pc, #344]	; (80043d8 <HAL_RCC_OscConfig+0x4ac>)
 800427e:	f023 0304 	bic.w	r3, r3, #4
 8004282:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d015      	beq.n	80042b8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428c:	f7fd fe6a 	bl	8001f64 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004292:	e00a      	b.n	80042aa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004294:	f7fd fe66 	bl	8001f64 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e0d7      	b.n	800445a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042aa:	4b4b      	ldr	r3, [pc, #300]	; (80043d8 <HAL_RCC_OscConfig+0x4ac>)
 80042ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0ee      	beq.n	8004294 <HAL_RCC_OscConfig+0x368>
 80042b6:	e014      	b.n	80042e2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b8:	f7fd fe54 	bl	8001f64 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042be:	e00a      	b.n	80042d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042c0:	f7fd fe50 	bl	8001f64 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e0c1      	b.n	800445a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042d6:	4b40      	ldr	r3, [pc, #256]	; (80043d8 <HAL_RCC_OscConfig+0x4ac>)
 80042d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1ee      	bne.n	80042c0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042e2:	7dfb      	ldrb	r3, [r7, #23]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d105      	bne.n	80042f4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042e8:	4b3b      	ldr	r3, [pc, #236]	; (80043d8 <HAL_RCC_OscConfig+0x4ac>)
 80042ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ec:	4a3a      	ldr	r2, [pc, #232]	; (80043d8 <HAL_RCC_OscConfig+0x4ac>)
 80042ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 80ad 	beq.w	8004458 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042fe:	4b36      	ldr	r3, [pc, #216]	; (80043d8 <HAL_RCC_OscConfig+0x4ac>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 030c 	and.w	r3, r3, #12
 8004306:	2b08      	cmp	r3, #8
 8004308:	d060      	beq.n	80043cc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	2b02      	cmp	r3, #2
 8004310:	d145      	bne.n	800439e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004312:	4b33      	ldr	r3, [pc, #204]	; (80043e0 <HAL_RCC_OscConfig+0x4b4>)
 8004314:	2200      	movs	r2, #0
 8004316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004318:	f7fd fe24 	bl	8001f64 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004320:	f7fd fe20 	bl	8001f64 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e093      	b.n	800445a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004332:	4b29      	ldr	r3, [pc, #164]	; (80043d8 <HAL_RCC_OscConfig+0x4ac>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1f0      	bne.n	8004320 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69da      	ldr	r2, [r3, #28]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434c:	019b      	lsls	r3, r3, #6
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004354:	085b      	lsrs	r3, r3, #1
 8004356:	3b01      	subs	r3, #1
 8004358:	041b      	lsls	r3, r3, #16
 800435a:	431a      	orrs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004360:	061b      	lsls	r3, r3, #24
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004368:	071b      	lsls	r3, r3, #28
 800436a:	491b      	ldr	r1, [pc, #108]	; (80043d8 <HAL_RCC_OscConfig+0x4ac>)
 800436c:	4313      	orrs	r3, r2
 800436e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004370:	4b1b      	ldr	r3, [pc, #108]	; (80043e0 <HAL_RCC_OscConfig+0x4b4>)
 8004372:	2201      	movs	r2, #1
 8004374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004376:	f7fd fdf5 	bl	8001f64 <HAL_GetTick>
 800437a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800437c:	e008      	b.n	8004390 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800437e:	f7fd fdf1 	bl	8001f64 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e064      	b.n	800445a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004390:	4b11      	ldr	r3, [pc, #68]	; (80043d8 <HAL_RCC_OscConfig+0x4ac>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0f0      	beq.n	800437e <HAL_RCC_OscConfig+0x452>
 800439c:	e05c      	b.n	8004458 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439e:	4b10      	ldr	r3, [pc, #64]	; (80043e0 <HAL_RCC_OscConfig+0x4b4>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a4:	f7fd fdde 	bl	8001f64 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043ac:	f7fd fdda 	bl	8001f64 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e04d      	b.n	800445a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043be:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <HAL_RCC_OscConfig+0x4ac>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1f0      	bne.n	80043ac <HAL_RCC_OscConfig+0x480>
 80043ca:	e045      	b.n	8004458 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d107      	bne.n	80043e4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e040      	b.n	800445a <HAL_RCC_OscConfig+0x52e>
 80043d8:	40023800 	.word	0x40023800
 80043dc:	40007000 	.word	0x40007000
 80043e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043e4:	4b1f      	ldr	r3, [pc, #124]	; (8004464 <HAL_RCC_OscConfig+0x538>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d030      	beq.n	8004454 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d129      	bne.n	8004454 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800440a:	429a      	cmp	r2, r3
 800440c:	d122      	bne.n	8004454 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004414:	4013      	ands	r3, r2
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800441a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800441c:	4293      	cmp	r3, r2
 800441e:	d119      	bne.n	8004454 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442a:	085b      	lsrs	r3, r3, #1
 800442c:	3b01      	subs	r3, #1
 800442e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004430:	429a      	cmp	r2, r3
 8004432:	d10f      	bne.n	8004454 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004440:	429a      	cmp	r2, r3
 8004442:	d107      	bne.n	8004454 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004450:	429a      	cmp	r2, r3
 8004452:	d001      	beq.n	8004458 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e000      	b.n	800445a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3718      	adds	r7, #24
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	40023800 	.word	0x40023800

08004468 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e041      	b.n	80044fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d106      	bne.n	8004494 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f839 	bl	8004506 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3304      	adds	r3, #4
 80044a4:	4619      	mov	r1, r3
 80044a6:	4610      	mov	r0, r2
 80044a8:	f000 f9c0 	bl	800482c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
	...

0800451c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	d001      	beq.n	8004534 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e04e      	b.n	80045d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2202      	movs	r2, #2
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f042 0201 	orr.w	r2, r2, #1
 800454a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a23      	ldr	r2, [pc, #140]	; (80045e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d022      	beq.n	800459c <HAL_TIM_Base_Start_IT+0x80>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455e:	d01d      	beq.n	800459c <HAL_TIM_Base_Start_IT+0x80>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a1f      	ldr	r2, [pc, #124]	; (80045e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d018      	beq.n	800459c <HAL_TIM_Base_Start_IT+0x80>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a1e      	ldr	r2, [pc, #120]	; (80045e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d013      	beq.n	800459c <HAL_TIM_Base_Start_IT+0x80>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a1c      	ldr	r2, [pc, #112]	; (80045ec <HAL_TIM_Base_Start_IT+0xd0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d00e      	beq.n	800459c <HAL_TIM_Base_Start_IT+0x80>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a1b      	ldr	r2, [pc, #108]	; (80045f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d009      	beq.n	800459c <HAL_TIM_Base_Start_IT+0x80>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a19      	ldr	r2, [pc, #100]	; (80045f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d004      	beq.n	800459c <HAL_TIM_Base_Start_IT+0x80>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a18      	ldr	r2, [pc, #96]	; (80045f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d111      	bne.n	80045c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 0307 	and.w	r3, r3, #7
 80045a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b06      	cmp	r3, #6
 80045ac:	d010      	beq.n	80045d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f042 0201 	orr.w	r2, r2, #1
 80045bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045be:	e007      	b.n	80045d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0201 	orr.w	r2, r2, #1
 80045ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	40010000 	.word	0x40010000
 80045e4:	40000400 	.word	0x40000400
 80045e8:	40000800 	.word	0x40000800
 80045ec:	40000c00 	.word	0x40000c00
 80045f0:	40010400 	.word	0x40010400
 80045f4:	40014000 	.word	0x40014000
 80045f8:	40001800 	.word	0x40001800

080045fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d020      	beq.n	8004660 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d01b      	beq.n	8004660 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f06f 0202 	mvn.w	r2, #2
 8004630:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	f003 0303 	and.w	r3, r3, #3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f8d2 	bl	80047f0 <HAL_TIM_IC_CaptureCallback>
 800464c:	e005      	b.n	800465a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f8c4 	bl	80047dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f8d5 	bl	8004804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	2b00      	cmp	r3, #0
 8004668:	d020      	beq.n	80046ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b00      	cmp	r3, #0
 8004672:	d01b      	beq.n	80046ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f06f 0204 	mvn.w	r2, #4
 800467c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2202      	movs	r2, #2
 8004682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f8ac 	bl	80047f0 <HAL_TIM_IC_CaptureCallback>
 8004698:	e005      	b.n	80046a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f89e 	bl	80047dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f8af 	bl	8004804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	f003 0308 	and.w	r3, r3, #8
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d020      	beq.n	80046f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f003 0308 	and.w	r3, r3, #8
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d01b      	beq.n	80046f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f06f 0208 	mvn.w	r2, #8
 80046c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2204      	movs	r2, #4
 80046ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	f003 0303 	and.w	r3, r3, #3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f886 	bl	80047f0 <HAL_TIM_IC_CaptureCallback>
 80046e4:	e005      	b.n	80046f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f878 	bl	80047dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f889 	bl	8004804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	f003 0310 	and.w	r3, r3, #16
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d020      	beq.n	8004744 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f003 0310 	and.w	r3, r3, #16
 8004708:	2b00      	cmp	r3, #0
 800470a:	d01b      	beq.n	8004744 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f06f 0210 	mvn.w	r2, #16
 8004714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2208      	movs	r2, #8
 800471a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f860 	bl	80047f0 <HAL_TIM_IC_CaptureCallback>
 8004730:	e005      	b.n	800473e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f852 	bl	80047dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f863 	bl	8004804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00c      	beq.n	8004768 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	d007      	beq.n	8004768 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f06f 0201 	mvn.w	r2, #1
 8004760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7fc fe52 	bl	800140c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00c      	beq.n	800478c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004778:	2b00      	cmp	r3, #0
 800477a:	d007      	beq.n	800478c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f906 	bl	8004998 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00c      	beq.n	80047b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800479c:	2b00      	cmp	r3, #0
 800479e:	d007      	beq.n	80047b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f834 	bl	8004818 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f003 0320 	and.w	r3, r3, #32
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00c      	beq.n	80047d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f003 0320 	and.w	r3, r3, #32
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d007      	beq.n	80047d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f06f 0220 	mvn.w	r2, #32
 80047cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f8d8 	bl	8004984 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047d4:	bf00      	nop
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a46      	ldr	r2, [pc, #280]	; (8004958 <TIM_Base_SetConfig+0x12c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d013      	beq.n	800486c <TIM_Base_SetConfig+0x40>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800484a:	d00f      	beq.n	800486c <TIM_Base_SetConfig+0x40>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a43      	ldr	r2, [pc, #268]	; (800495c <TIM_Base_SetConfig+0x130>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d00b      	beq.n	800486c <TIM_Base_SetConfig+0x40>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a42      	ldr	r2, [pc, #264]	; (8004960 <TIM_Base_SetConfig+0x134>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d007      	beq.n	800486c <TIM_Base_SetConfig+0x40>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a41      	ldr	r2, [pc, #260]	; (8004964 <TIM_Base_SetConfig+0x138>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d003      	beq.n	800486c <TIM_Base_SetConfig+0x40>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a40      	ldr	r2, [pc, #256]	; (8004968 <TIM_Base_SetConfig+0x13c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d108      	bne.n	800487e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004872:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	4313      	orrs	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a35      	ldr	r2, [pc, #212]	; (8004958 <TIM_Base_SetConfig+0x12c>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d02b      	beq.n	80048de <TIM_Base_SetConfig+0xb2>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800488c:	d027      	beq.n	80048de <TIM_Base_SetConfig+0xb2>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a32      	ldr	r2, [pc, #200]	; (800495c <TIM_Base_SetConfig+0x130>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d023      	beq.n	80048de <TIM_Base_SetConfig+0xb2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a31      	ldr	r2, [pc, #196]	; (8004960 <TIM_Base_SetConfig+0x134>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d01f      	beq.n	80048de <TIM_Base_SetConfig+0xb2>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a30      	ldr	r2, [pc, #192]	; (8004964 <TIM_Base_SetConfig+0x138>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d01b      	beq.n	80048de <TIM_Base_SetConfig+0xb2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a2f      	ldr	r2, [pc, #188]	; (8004968 <TIM_Base_SetConfig+0x13c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d017      	beq.n	80048de <TIM_Base_SetConfig+0xb2>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a2e      	ldr	r2, [pc, #184]	; (800496c <TIM_Base_SetConfig+0x140>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d013      	beq.n	80048de <TIM_Base_SetConfig+0xb2>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a2d      	ldr	r2, [pc, #180]	; (8004970 <TIM_Base_SetConfig+0x144>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00f      	beq.n	80048de <TIM_Base_SetConfig+0xb2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a2c      	ldr	r2, [pc, #176]	; (8004974 <TIM_Base_SetConfig+0x148>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00b      	beq.n	80048de <TIM_Base_SetConfig+0xb2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a2b      	ldr	r2, [pc, #172]	; (8004978 <TIM_Base_SetConfig+0x14c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d007      	beq.n	80048de <TIM_Base_SetConfig+0xb2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a2a      	ldr	r2, [pc, #168]	; (800497c <TIM_Base_SetConfig+0x150>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d003      	beq.n	80048de <TIM_Base_SetConfig+0xb2>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a29      	ldr	r2, [pc, #164]	; (8004980 <TIM_Base_SetConfig+0x154>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d108      	bne.n	80048f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a10      	ldr	r2, [pc, #64]	; (8004958 <TIM_Base_SetConfig+0x12c>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d003      	beq.n	8004924 <TIM_Base_SetConfig+0xf8>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a12      	ldr	r2, [pc, #72]	; (8004968 <TIM_Base_SetConfig+0x13c>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d103      	bne.n	800492c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	691a      	ldr	r2, [r3, #16]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b01      	cmp	r3, #1
 800493c:	d105      	bne.n	800494a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f023 0201 	bic.w	r2, r3, #1
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	611a      	str	r2, [r3, #16]
  }
}
 800494a:	bf00      	nop
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	40010000 	.word	0x40010000
 800495c:	40000400 	.word	0x40000400
 8004960:	40000800 	.word	0x40000800
 8004964:	40000c00 	.word	0x40000c00
 8004968:	40010400 	.word	0x40010400
 800496c:	40014000 	.word	0x40014000
 8004970:	40014400 	.word	0x40014400
 8004974:	40014800 	.word	0x40014800
 8004978:	40001800 	.word	0x40001800
 800497c:	40001c00 	.word	0x40001c00
 8004980:	40002000 	.word	0x40002000

08004984 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e042      	b.n	8004a44 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d106      	bne.n	80049d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7fd f8aa 	bl	8001b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2224      	movs	r2, #36	; 0x24
 80049dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68da      	ldr	r2, [r3, #12]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f82b 	bl	8004a4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	691a      	ldr	r2, [r3, #16]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	695a      	ldr	r2, [r3, #20]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2220      	movs	r2, #32
 8004a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2220      	movs	r2, #32
 8004a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3708      	adds	r7, #8
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a50:	b0c0      	sub	sp, #256	; 0x100
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a68:	68d9      	ldr	r1, [r3, #12]
 8004a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	ea40 0301 	orr.w	r3, r0, r1
 8004a74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	431a      	orrs	r2, r3
 8004a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004aa4:	f021 010c 	bic.w	r1, r1, #12
 8004aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ab2:	430b      	orrs	r3, r1
 8004ab4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac6:	6999      	ldr	r1, [r3, #24]
 8004ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	ea40 0301 	orr.w	r3, r0, r1
 8004ad2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	4b8f      	ldr	r3, [pc, #572]	; (8004d18 <UART_SetConfig+0x2cc>)
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d005      	beq.n	8004aec <UART_SetConfig+0xa0>
 8004ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	4b8d      	ldr	r3, [pc, #564]	; (8004d1c <UART_SetConfig+0x2d0>)
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d104      	bne.n	8004af6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004aec:	f7fe ffa8 	bl	8003a40 <HAL_RCC_GetPCLK2Freq>
 8004af0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004af4:	e003      	b.n	8004afe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004af6:	f7fe ff8f 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 8004afa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b08:	f040 810c 	bne.w	8004d24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b10:	2200      	movs	r2, #0
 8004b12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b16:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b1e:	4622      	mov	r2, r4
 8004b20:	462b      	mov	r3, r5
 8004b22:	1891      	adds	r1, r2, r2
 8004b24:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b26:	415b      	adcs	r3, r3
 8004b28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b2e:	4621      	mov	r1, r4
 8004b30:	eb12 0801 	adds.w	r8, r2, r1
 8004b34:	4629      	mov	r1, r5
 8004b36:	eb43 0901 	adc.w	r9, r3, r1
 8004b3a:	f04f 0200 	mov.w	r2, #0
 8004b3e:	f04f 0300 	mov.w	r3, #0
 8004b42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b4e:	4690      	mov	r8, r2
 8004b50:	4699      	mov	r9, r3
 8004b52:	4623      	mov	r3, r4
 8004b54:	eb18 0303 	adds.w	r3, r8, r3
 8004b58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b5c:	462b      	mov	r3, r5
 8004b5e:	eb49 0303 	adc.w	r3, r9, r3
 8004b62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b72:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	18db      	adds	r3, r3, r3
 8004b7e:	653b      	str	r3, [r7, #80]	; 0x50
 8004b80:	4613      	mov	r3, r2
 8004b82:	eb42 0303 	adc.w	r3, r2, r3
 8004b86:	657b      	str	r3, [r7, #84]	; 0x54
 8004b88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b90:	f7fc f87a 	bl	8000c88 <__aeabi_uldivmod>
 8004b94:	4602      	mov	r2, r0
 8004b96:	460b      	mov	r3, r1
 8004b98:	4b61      	ldr	r3, [pc, #388]	; (8004d20 <UART_SetConfig+0x2d4>)
 8004b9a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b9e:	095b      	lsrs	r3, r3, #5
 8004ba0:	011c      	lsls	r4, r3, #4
 8004ba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004bb0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004bb4:	4642      	mov	r2, r8
 8004bb6:	464b      	mov	r3, r9
 8004bb8:	1891      	adds	r1, r2, r2
 8004bba:	64b9      	str	r1, [r7, #72]	; 0x48
 8004bbc:	415b      	adcs	r3, r3
 8004bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004bc4:	4641      	mov	r1, r8
 8004bc6:	eb12 0a01 	adds.w	sl, r2, r1
 8004bca:	4649      	mov	r1, r9
 8004bcc:	eb43 0b01 	adc.w	fp, r3, r1
 8004bd0:	f04f 0200 	mov.w	r2, #0
 8004bd4:	f04f 0300 	mov.w	r3, #0
 8004bd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bdc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004be0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004be4:	4692      	mov	sl, r2
 8004be6:	469b      	mov	fp, r3
 8004be8:	4643      	mov	r3, r8
 8004bea:	eb1a 0303 	adds.w	r3, sl, r3
 8004bee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bf2:	464b      	mov	r3, r9
 8004bf4:	eb4b 0303 	adc.w	r3, fp, r3
 8004bf8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c08:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c10:	460b      	mov	r3, r1
 8004c12:	18db      	adds	r3, r3, r3
 8004c14:	643b      	str	r3, [r7, #64]	; 0x40
 8004c16:	4613      	mov	r3, r2
 8004c18:	eb42 0303 	adc.w	r3, r2, r3
 8004c1c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c26:	f7fc f82f 	bl	8000c88 <__aeabi_uldivmod>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	4611      	mov	r1, r2
 8004c30:	4b3b      	ldr	r3, [pc, #236]	; (8004d20 <UART_SetConfig+0x2d4>)
 8004c32:	fba3 2301 	umull	r2, r3, r3, r1
 8004c36:	095b      	lsrs	r3, r3, #5
 8004c38:	2264      	movs	r2, #100	; 0x64
 8004c3a:	fb02 f303 	mul.w	r3, r2, r3
 8004c3e:	1acb      	subs	r3, r1, r3
 8004c40:	00db      	lsls	r3, r3, #3
 8004c42:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c46:	4b36      	ldr	r3, [pc, #216]	; (8004d20 <UART_SetConfig+0x2d4>)
 8004c48:	fba3 2302 	umull	r2, r3, r3, r2
 8004c4c:	095b      	lsrs	r3, r3, #5
 8004c4e:	005b      	lsls	r3, r3, #1
 8004c50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c54:	441c      	add	r4, r3
 8004c56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c60:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c68:	4642      	mov	r2, r8
 8004c6a:	464b      	mov	r3, r9
 8004c6c:	1891      	adds	r1, r2, r2
 8004c6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c70:	415b      	adcs	r3, r3
 8004c72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c78:	4641      	mov	r1, r8
 8004c7a:	1851      	adds	r1, r2, r1
 8004c7c:	6339      	str	r1, [r7, #48]	; 0x30
 8004c7e:	4649      	mov	r1, r9
 8004c80:	414b      	adcs	r3, r1
 8004c82:	637b      	str	r3, [r7, #52]	; 0x34
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	f04f 0300 	mov.w	r3, #0
 8004c8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c90:	4659      	mov	r1, fp
 8004c92:	00cb      	lsls	r3, r1, #3
 8004c94:	4651      	mov	r1, sl
 8004c96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c9a:	4651      	mov	r1, sl
 8004c9c:	00ca      	lsls	r2, r1, #3
 8004c9e:	4610      	mov	r0, r2
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	4642      	mov	r2, r8
 8004ca6:	189b      	adds	r3, r3, r2
 8004ca8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cac:	464b      	mov	r3, r9
 8004cae:	460a      	mov	r2, r1
 8004cb0:	eb42 0303 	adc.w	r3, r2, r3
 8004cb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004cc4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004cc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004ccc:	460b      	mov	r3, r1
 8004cce:	18db      	adds	r3, r3, r3
 8004cd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	eb42 0303 	adc.w	r3, r2, r3
 8004cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cde:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ce2:	f7fb ffd1 	bl	8000c88 <__aeabi_uldivmod>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	460b      	mov	r3, r1
 8004cea:	4b0d      	ldr	r3, [pc, #52]	; (8004d20 <UART_SetConfig+0x2d4>)
 8004cec:	fba3 1302 	umull	r1, r3, r3, r2
 8004cf0:	095b      	lsrs	r3, r3, #5
 8004cf2:	2164      	movs	r1, #100	; 0x64
 8004cf4:	fb01 f303 	mul.w	r3, r1, r3
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	3332      	adds	r3, #50	; 0x32
 8004cfe:	4a08      	ldr	r2, [pc, #32]	; (8004d20 <UART_SetConfig+0x2d4>)
 8004d00:	fba2 2303 	umull	r2, r3, r2, r3
 8004d04:	095b      	lsrs	r3, r3, #5
 8004d06:	f003 0207 	and.w	r2, r3, #7
 8004d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4422      	add	r2, r4
 8004d12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d14:	e106      	b.n	8004f24 <UART_SetConfig+0x4d8>
 8004d16:	bf00      	nop
 8004d18:	40011000 	.word	0x40011000
 8004d1c:	40011400 	.word	0x40011400
 8004d20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d2e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004d32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004d36:	4642      	mov	r2, r8
 8004d38:	464b      	mov	r3, r9
 8004d3a:	1891      	adds	r1, r2, r2
 8004d3c:	6239      	str	r1, [r7, #32]
 8004d3e:	415b      	adcs	r3, r3
 8004d40:	627b      	str	r3, [r7, #36]	; 0x24
 8004d42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d46:	4641      	mov	r1, r8
 8004d48:	1854      	adds	r4, r2, r1
 8004d4a:	4649      	mov	r1, r9
 8004d4c:	eb43 0501 	adc.w	r5, r3, r1
 8004d50:	f04f 0200 	mov.w	r2, #0
 8004d54:	f04f 0300 	mov.w	r3, #0
 8004d58:	00eb      	lsls	r3, r5, #3
 8004d5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d5e:	00e2      	lsls	r2, r4, #3
 8004d60:	4614      	mov	r4, r2
 8004d62:	461d      	mov	r5, r3
 8004d64:	4643      	mov	r3, r8
 8004d66:	18e3      	adds	r3, r4, r3
 8004d68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d6c:	464b      	mov	r3, r9
 8004d6e:	eb45 0303 	adc.w	r3, r5, r3
 8004d72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d86:	f04f 0200 	mov.w	r2, #0
 8004d8a:	f04f 0300 	mov.w	r3, #0
 8004d8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d92:	4629      	mov	r1, r5
 8004d94:	008b      	lsls	r3, r1, #2
 8004d96:	4621      	mov	r1, r4
 8004d98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d9c:	4621      	mov	r1, r4
 8004d9e:	008a      	lsls	r2, r1, #2
 8004da0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004da4:	f7fb ff70 	bl	8000c88 <__aeabi_uldivmod>
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	4b60      	ldr	r3, [pc, #384]	; (8004f30 <UART_SetConfig+0x4e4>)
 8004dae:	fba3 2302 	umull	r2, r3, r3, r2
 8004db2:	095b      	lsrs	r3, r3, #5
 8004db4:	011c      	lsls	r4, r3, #4
 8004db6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004dc0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004dc4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004dc8:	4642      	mov	r2, r8
 8004dca:	464b      	mov	r3, r9
 8004dcc:	1891      	adds	r1, r2, r2
 8004dce:	61b9      	str	r1, [r7, #24]
 8004dd0:	415b      	adcs	r3, r3
 8004dd2:	61fb      	str	r3, [r7, #28]
 8004dd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dd8:	4641      	mov	r1, r8
 8004dda:	1851      	adds	r1, r2, r1
 8004ddc:	6139      	str	r1, [r7, #16]
 8004dde:	4649      	mov	r1, r9
 8004de0:	414b      	adcs	r3, r1
 8004de2:	617b      	str	r3, [r7, #20]
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004df0:	4659      	mov	r1, fp
 8004df2:	00cb      	lsls	r3, r1, #3
 8004df4:	4651      	mov	r1, sl
 8004df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dfa:	4651      	mov	r1, sl
 8004dfc:	00ca      	lsls	r2, r1, #3
 8004dfe:	4610      	mov	r0, r2
 8004e00:	4619      	mov	r1, r3
 8004e02:	4603      	mov	r3, r0
 8004e04:	4642      	mov	r2, r8
 8004e06:	189b      	adds	r3, r3, r2
 8004e08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e0c:	464b      	mov	r3, r9
 8004e0e:	460a      	mov	r2, r1
 8004e10:	eb42 0303 	adc.w	r3, r2, r3
 8004e14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e22:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004e24:	f04f 0200 	mov.w	r2, #0
 8004e28:	f04f 0300 	mov.w	r3, #0
 8004e2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004e30:	4649      	mov	r1, r9
 8004e32:	008b      	lsls	r3, r1, #2
 8004e34:	4641      	mov	r1, r8
 8004e36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e3a:	4641      	mov	r1, r8
 8004e3c:	008a      	lsls	r2, r1, #2
 8004e3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e42:	f7fb ff21 	bl	8000c88 <__aeabi_uldivmod>
 8004e46:	4602      	mov	r2, r0
 8004e48:	460b      	mov	r3, r1
 8004e4a:	4611      	mov	r1, r2
 8004e4c:	4b38      	ldr	r3, [pc, #224]	; (8004f30 <UART_SetConfig+0x4e4>)
 8004e4e:	fba3 2301 	umull	r2, r3, r3, r1
 8004e52:	095b      	lsrs	r3, r3, #5
 8004e54:	2264      	movs	r2, #100	; 0x64
 8004e56:	fb02 f303 	mul.w	r3, r2, r3
 8004e5a:	1acb      	subs	r3, r1, r3
 8004e5c:	011b      	lsls	r3, r3, #4
 8004e5e:	3332      	adds	r3, #50	; 0x32
 8004e60:	4a33      	ldr	r2, [pc, #204]	; (8004f30 <UART_SetConfig+0x4e4>)
 8004e62:	fba2 2303 	umull	r2, r3, r2, r3
 8004e66:	095b      	lsrs	r3, r3, #5
 8004e68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e6c:	441c      	add	r4, r3
 8004e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e72:	2200      	movs	r2, #0
 8004e74:	673b      	str	r3, [r7, #112]	; 0x70
 8004e76:	677a      	str	r2, [r7, #116]	; 0x74
 8004e78:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e7c:	4642      	mov	r2, r8
 8004e7e:	464b      	mov	r3, r9
 8004e80:	1891      	adds	r1, r2, r2
 8004e82:	60b9      	str	r1, [r7, #8]
 8004e84:	415b      	adcs	r3, r3
 8004e86:	60fb      	str	r3, [r7, #12]
 8004e88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e8c:	4641      	mov	r1, r8
 8004e8e:	1851      	adds	r1, r2, r1
 8004e90:	6039      	str	r1, [r7, #0]
 8004e92:	4649      	mov	r1, r9
 8004e94:	414b      	adcs	r3, r1
 8004e96:	607b      	str	r3, [r7, #4]
 8004e98:	f04f 0200 	mov.w	r2, #0
 8004e9c:	f04f 0300 	mov.w	r3, #0
 8004ea0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ea4:	4659      	mov	r1, fp
 8004ea6:	00cb      	lsls	r3, r1, #3
 8004ea8:	4651      	mov	r1, sl
 8004eaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eae:	4651      	mov	r1, sl
 8004eb0:	00ca      	lsls	r2, r1, #3
 8004eb2:	4610      	mov	r0, r2
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	4642      	mov	r2, r8
 8004eba:	189b      	adds	r3, r3, r2
 8004ebc:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ebe:	464b      	mov	r3, r9
 8004ec0:	460a      	mov	r2, r1
 8004ec2:	eb42 0303 	adc.w	r3, r2, r3
 8004ec6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	663b      	str	r3, [r7, #96]	; 0x60
 8004ed2:	667a      	str	r2, [r7, #100]	; 0x64
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	f04f 0300 	mov.w	r3, #0
 8004edc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ee0:	4649      	mov	r1, r9
 8004ee2:	008b      	lsls	r3, r1, #2
 8004ee4:	4641      	mov	r1, r8
 8004ee6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eea:	4641      	mov	r1, r8
 8004eec:	008a      	lsls	r2, r1, #2
 8004eee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ef2:	f7fb fec9 	bl	8000c88 <__aeabi_uldivmod>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	460b      	mov	r3, r1
 8004efa:	4b0d      	ldr	r3, [pc, #52]	; (8004f30 <UART_SetConfig+0x4e4>)
 8004efc:	fba3 1302 	umull	r1, r3, r3, r2
 8004f00:	095b      	lsrs	r3, r3, #5
 8004f02:	2164      	movs	r1, #100	; 0x64
 8004f04:	fb01 f303 	mul.w	r3, r1, r3
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	011b      	lsls	r3, r3, #4
 8004f0c:	3332      	adds	r3, #50	; 0x32
 8004f0e:	4a08      	ldr	r2, [pc, #32]	; (8004f30 <UART_SetConfig+0x4e4>)
 8004f10:	fba2 2303 	umull	r2, r3, r2, r3
 8004f14:	095b      	lsrs	r3, r3, #5
 8004f16:	f003 020f 	and.w	r2, r3, #15
 8004f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4422      	add	r2, r4
 8004f22:	609a      	str	r2, [r3, #8]
}
 8004f24:	bf00      	nop
 8004f26:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f30:	51eb851f 	.word	0x51eb851f

08004f34 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004f34:	b580      	push	{r7, lr}
 8004f36:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004f38:	4b05      	ldr	r3, [pc, #20]	; (8004f50 <SysTick_Handler+0x1c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004f3c:	f001 fbc8 	bl	80066d0 <xTaskGetSchedulerState>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d001      	beq.n	8004f4a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004f46:	f002 f9af 	bl	80072a8 <xPortSysTickHandler>
  }
}
 8004f4a:	bf00      	nop
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	e000e010 	.word	0xe000e010

08004f54 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4a07      	ldr	r2, [pc, #28]	; (8004f80 <vApplicationGetIdleTaskMemory+0x2c>)
 8004f64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	4a06      	ldr	r2, [pc, #24]	; (8004f84 <vApplicationGetIdleTaskMemory+0x30>)
 8004f6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2280      	movs	r2, #128	; 0x80
 8004f70:	601a      	str	r2, [r3, #0]
}
 8004f72:	bf00      	nop
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	20000768 	.word	0x20000768
 8004f84:	200007c4 	.word	0x200007c4

08004f88 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4a07      	ldr	r2, [pc, #28]	; (8004fb4 <vApplicationGetTimerTaskMemory+0x2c>)
 8004f98:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	4a06      	ldr	r2, [pc, #24]	; (8004fb8 <vApplicationGetTimerTaskMemory+0x30>)
 8004f9e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fa6:	601a      	str	r2, [r3, #0]
}
 8004fa8:	bf00      	nop
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	200009c4 	.word	0x200009c4
 8004fb8:	20000a20 	.word	0x20000a20

08004fbc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f103 0208 	add.w	r2, r3, #8
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8004fd4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f103 0208 	add.w	r2, r3, #8
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f103 0208 	add.w	r2, r3, #8
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800500a:	bf00      	nop
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005016:	b480      	push	{r7}
 8005018:	b085      	sub	sp, #20
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	689a      	ldr	r2, [r3, #8]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	601a      	str	r2, [r3, #0]
}
 8005052:	bf00      	nop
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800505e:	b480      	push	{r7}
 8005060:	b085      	sub	sp, #20
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005074:	d103      	bne.n	800507e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	60fb      	str	r3, [r7, #12]
 800507c:	e00c      	b.n	8005098 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	3308      	adds	r3, #8
 8005082:	60fb      	str	r3, [r7, #12]
 8005084:	e002      	b.n	800508c <vListInsert+0x2e>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	429a      	cmp	r2, r3
 8005096:	d2f6      	bcs.n	8005086 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	683a      	ldr	r2, [r7, #0]
 80050b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	601a      	str	r2, [r3, #0]
}
 80050c4:	bf00      	nop
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	6892      	ldr	r2, [r2, #8]
 80050e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	6852      	ldr	r2, [r2, #4]
 80050f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d103      	bne.n	8005104 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	1e5a      	subs	r2, r3, #1
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
}
 8005118:	4618      	mov	r0, r3
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10a      	bne.n	800514e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513c:	f383 8811 	msr	BASEPRI, r3
 8005140:	f3bf 8f6f 	isb	sy
 8005144:	f3bf 8f4f 	dsb	sy
 8005148:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800514a:	bf00      	nop
 800514c:	e7fe      	b.n	800514c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800514e:	f002 f819 	bl	8007184 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515a:	68f9      	ldr	r1, [r7, #12]
 800515c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800515e:	fb01 f303 	mul.w	r3, r1, r3
 8005162:	441a      	add	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800517e:	3b01      	subs	r3, #1
 8005180:	68f9      	ldr	r1, [r7, #12]
 8005182:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005184:	fb01 f303 	mul.w	r3, r1, r3
 8005188:	441a      	add	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	22ff      	movs	r2, #255	; 0xff
 8005192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	22ff      	movs	r2, #255	; 0xff
 800519a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d114      	bne.n	80051ce <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d01a      	beq.n	80051e2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	3310      	adds	r3, #16
 80051b0:	4618      	mov	r0, r3
 80051b2:	f001 f8cf 	bl	8006354 <xTaskRemoveFromEventList>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d012      	beq.n	80051e2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80051bc:	4b0c      	ldr	r3, [pc, #48]	; (80051f0 <xQueueGenericReset+0xcc>)
 80051be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051c2:	601a      	str	r2, [r3, #0]
 80051c4:	f3bf 8f4f 	dsb	sy
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	e009      	b.n	80051e2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	3310      	adds	r3, #16
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7ff fef2 	bl	8004fbc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	3324      	adds	r3, #36	; 0x24
 80051dc:	4618      	mov	r0, r3
 80051de:	f7ff feed 	bl	8004fbc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80051e2:	f001 ffff 	bl	80071e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80051e6:	2301      	movs	r3, #1
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	e000ed04 	.word	0xe000ed04

080051f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b08e      	sub	sp, #56	; 0x38
 80051f8:	af02      	add	r7, sp, #8
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10a      	bne.n	800521e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520c:	f383 8811 	msr	BASEPRI, r3
 8005210:	f3bf 8f6f 	isb	sy
 8005214:	f3bf 8f4f 	dsb	sy
 8005218:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800521a:	bf00      	nop
 800521c:	e7fe      	b.n	800521c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10a      	bne.n	800523a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005236:	bf00      	nop
 8005238:	e7fe      	b.n	8005238 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <xQueueGenericCreateStatic+0x52>
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <xQueueGenericCreateStatic+0x56>
 8005246:	2301      	movs	r3, #1
 8005248:	e000      	b.n	800524c <xQueueGenericCreateStatic+0x58>
 800524a:	2300      	movs	r3, #0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10a      	bne.n	8005266 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	623b      	str	r3, [r7, #32]
}
 8005262:	bf00      	nop
 8005264:	e7fe      	b.n	8005264 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d102      	bne.n	8005272 <xQueueGenericCreateStatic+0x7e>
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <xQueueGenericCreateStatic+0x82>
 8005272:	2301      	movs	r3, #1
 8005274:	e000      	b.n	8005278 <xQueueGenericCreateStatic+0x84>
 8005276:	2300      	movs	r3, #0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10a      	bne.n	8005292 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800527c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005280:	f383 8811 	msr	BASEPRI, r3
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	f3bf 8f4f 	dsb	sy
 800528c:	61fb      	str	r3, [r7, #28]
}
 800528e:	bf00      	nop
 8005290:	e7fe      	b.n	8005290 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005292:	2350      	movs	r3, #80	; 0x50
 8005294:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2b50      	cmp	r3, #80	; 0x50
 800529a:	d00a      	beq.n	80052b2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800529c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a0:	f383 8811 	msr	BASEPRI, r3
 80052a4:	f3bf 8f6f 	isb	sy
 80052a8:	f3bf 8f4f 	dsb	sy
 80052ac:	61bb      	str	r3, [r7, #24]
}
 80052ae:	bf00      	nop
 80052b0:	e7fe      	b.n	80052b0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80052b2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80052b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00d      	beq.n	80052da <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80052be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052c6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80052ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	4613      	mov	r3, r2
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	68b9      	ldr	r1, [r7, #8]
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 f805 	bl	80052e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80052da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80052dc:	4618      	mov	r0, r3
 80052de:	3730      	adds	r7, #48	; 0x30
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
 80052f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d103      	bne.n	8005300 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	e002      	b.n	8005306 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005312:	2101      	movs	r1, #1
 8005314:	69b8      	ldr	r0, [r7, #24]
 8005316:	f7ff ff05 	bl	8005124 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	78fa      	ldrb	r2, [r7, #3]
 800531e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005322:	bf00      	nop
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
	...

0800532c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b08e      	sub	sp, #56	; 0x38
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
 8005338:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800533a:	2300      	movs	r3, #0
 800533c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005344:	2b00      	cmp	r3, #0
 8005346:	d10a      	bne.n	800535e <xQueueGenericSend+0x32>
	__asm volatile
 8005348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534c:	f383 8811 	msr	BASEPRI, r3
 8005350:	f3bf 8f6f 	isb	sy
 8005354:	f3bf 8f4f 	dsb	sy
 8005358:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800535a:	bf00      	nop
 800535c:	e7fe      	b.n	800535c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d103      	bne.n	800536c <xQueueGenericSend+0x40>
 8005364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <xQueueGenericSend+0x44>
 800536c:	2301      	movs	r3, #1
 800536e:	e000      	b.n	8005372 <xQueueGenericSend+0x46>
 8005370:	2300      	movs	r3, #0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10a      	bne.n	800538c <xQueueGenericSend+0x60>
	__asm volatile
 8005376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537a:	f383 8811 	msr	BASEPRI, r3
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005388:	bf00      	nop
 800538a:	e7fe      	b.n	800538a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	2b02      	cmp	r3, #2
 8005390:	d103      	bne.n	800539a <xQueueGenericSend+0x6e>
 8005392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005396:	2b01      	cmp	r3, #1
 8005398:	d101      	bne.n	800539e <xQueueGenericSend+0x72>
 800539a:	2301      	movs	r3, #1
 800539c:	e000      	b.n	80053a0 <xQueueGenericSend+0x74>
 800539e:	2300      	movs	r3, #0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10a      	bne.n	80053ba <xQueueGenericSend+0x8e>
	__asm volatile
 80053a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a8:	f383 8811 	msr	BASEPRI, r3
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	f3bf 8f4f 	dsb	sy
 80053b4:	623b      	str	r3, [r7, #32]
}
 80053b6:	bf00      	nop
 80053b8:	e7fe      	b.n	80053b8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053ba:	f001 f989 	bl	80066d0 <xTaskGetSchedulerState>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d102      	bne.n	80053ca <xQueueGenericSend+0x9e>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <xQueueGenericSend+0xa2>
 80053ca:	2301      	movs	r3, #1
 80053cc:	e000      	b.n	80053d0 <xQueueGenericSend+0xa4>
 80053ce:	2300      	movs	r3, #0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10a      	bne.n	80053ea <xQueueGenericSend+0xbe>
	__asm volatile
 80053d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d8:	f383 8811 	msr	BASEPRI, r3
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	61fb      	str	r3, [r7, #28]
}
 80053e6:	bf00      	nop
 80053e8:	e7fe      	b.n	80053e8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053ea:	f001 fecb 	bl	8007184 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d302      	bcc.n	8005400 <xQueueGenericSend+0xd4>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d129      	bne.n	8005454 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	68b9      	ldr	r1, [r7, #8]
 8005404:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005406:	f000 fa0b 	bl	8005820 <prvCopyDataToQueue>
 800540a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	2b00      	cmp	r3, #0
 8005412:	d010      	beq.n	8005436 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005416:	3324      	adds	r3, #36	; 0x24
 8005418:	4618      	mov	r0, r3
 800541a:	f000 ff9b 	bl	8006354 <xTaskRemoveFromEventList>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d013      	beq.n	800544c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005424:	4b3f      	ldr	r3, [pc, #252]	; (8005524 <xQueueGenericSend+0x1f8>)
 8005426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800542a:	601a      	str	r2, [r3, #0]
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	e00a      	b.n	800544c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005438:	2b00      	cmp	r3, #0
 800543a:	d007      	beq.n	800544c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800543c:	4b39      	ldr	r3, [pc, #228]	; (8005524 <xQueueGenericSend+0x1f8>)
 800543e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	f3bf 8f4f 	dsb	sy
 8005448:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800544c:	f001 feca 	bl	80071e4 <vPortExitCritical>
				return pdPASS;
 8005450:	2301      	movs	r3, #1
 8005452:	e063      	b.n	800551c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d103      	bne.n	8005462 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800545a:	f001 fec3 	bl	80071e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800545e:	2300      	movs	r3, #0
 8005460:	e05c      	b.n	800551c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005464:	2b00      	cmp	r3, #0
 8005466:	d106      	bne.n	8005476 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005468:	f107 0314 	add.w	r3, r7, #20
 800546c:	4618      	mov	r0, r3
 800546e:	f000 ffd5 	bl	800641c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005472:	2301      	movs	r3, #1
 8005474:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005476:	f001 feb5 	bl	80071e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800547a:	f000 fd47 	bl	8005f0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800547e:	f001 fe81 	bl	8007184 <vPortEnterCritical>
 8005482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005484:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005488:	b25b      	sxtb	r3, r3
 800548a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548e:	d103      	bne.n	8005498 <xQueueGenericSend+0x16c>
 8005490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005492:	2200      	movs	r2, #0
 8005494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800549e:	b25b      	sxtb	r3, r3
 80054a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a4:	d103      	bne.n	80054ae <xQueueGenericSend+0x182>
 80054a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054ae:	f001 fe99 	bl	80071e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054b2:	1d3a      	adds	r2, r7, #4
 80054b4:	f107 0314 	add.w	r3, r7, #20
 80054b8:	4611      	mov	r1, r2
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 ffc4 	bl	8006448 <xTaskCheckForTimeOut>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d124      	bne.n	8005510 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80054c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054c8:	f000 faa2 	bl	8005a10 <prvIsQueueFull>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d018      	beq.n	8005504 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80054d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d4:	3310      	adds	r3, #16
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	4611      	mov	r1, r2
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 feea 	bl	80062b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80054e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054e2:	f000 fa2d 	bl	8005940 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80054e6:	f000 fd1f 	bl	8005f28 <xTaskResumeAll>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f47f af7c 	bne.w	80053ea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80054f2:	4b0c      	ldr	r3, [pc, #48]	; (8005524 <xQueueGenericSend+0x1f8>)
 80054f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054f8:	601a      	str	r2, [r3, #0]
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	e772      	b.n	80053ea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005504:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005506:	f000 fa1b 	bl	8005940 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800550a:	f000 fd0d 	bl	8005f28 <xTaskResumeAll>
 800550e:	e76c      	b.n	80053ea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005512:	f000 fa15 	bl	8005940 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005516:	f000 fd07 	bl	8005f28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800551a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800551c:	4618      	mov	r0, r3
 800551e:	3738      	adds	r7, #56	; 0x38
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	e000ed04 	.word	0xe000ed04

08005528 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b090      	sub	sp, #64	; 0x40
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
 8005534:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800553a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10a      	bne.n	8005556 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005552:	bf00      	nop
 8005554:	e7fe      	b.n	8005554 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d103      	bne.n	8005564 <xQueueGenericSendFromISR+0x3c>
 800555c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005560:	2b00      	cmp	r3, #0
 8005562:	d101      	bne.n	8005568 <xQueueGenericSendFromISR+0x40>
 8005564:	2301      	movs	r3, #1
 8005566:	e000      	b.n	800556a <xQueueGenericSendFromISR+0x42>
 8005568:	2300      	movs	r3, #0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10a      	bne.n	8005584 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800556e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005580:	bf00      	nop
 8005582:	e7fe      	b.n	8005582 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	2b02      	cmp	r3, #2
 8005588:	d103      	bne.n	8005592 <xQueueGenericSendFromISR+0x6a>
 800558a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558e:	2b01      	cmp	r3, #1
 8005590:	d101      	bne.n	8005596 <xQueueGenericSendFromISR+0x6e>
 8005592:	2301      	movs	r3, #1
 8005594:	e000      	b.n	8005598 <xQueueGenericSendFromISR+0x70>
 8005596:	2300      	movs	r3, #0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10a      	bne.n	80055b2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800559c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a0:	f383 8811 	msr	BASEPRI, r3
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	623b      	str	r3, [r7, #32]
}
 80055ae:	bf00      	nop
 80055b0:	e7fe      	b.n	80055b0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055b2:	f001 fec9 	bl	8007348 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80055b6:	f3ef 8211 	mrs	r2, BASEPRI
 80055ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055be:	f383 8811 	msr	BASEPRI, r3
 80055c2:	f3bf 8f6f 	isb	sy
 80055c6:	f3bf 8f4f 	dsb	sy
 80055ca:	61fa      	str	r2, [r7, #28]
 80055cc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80055ce:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055d0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055da:	429a      	cmp	r2, r3
 80055dc:	d302      	bcc.n	80055e4 <xQueueGenericSendFromISR+0xbc>
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d12f      	bne.n	8005644 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80055e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	68b9      	ldr	r1, [r7, #8]
 80055f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055fa:	f000 f911 	bl	8005820 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80055fe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005606:	d112      	bne.n	800562e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	2b00      	cmp	r3, #0
 800560e:	d016      	beq.n	800563e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005612:	3324      	adds	r3, #36	; 0x24
 8005614:	4618      	mov	r0, r3
 8005616:	f000 fe9d 	bl	8006354 <xTaskRemoveFromEventList>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00e      	beq.n	800563e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00b      	beq.n	800563e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	601a      	str	r2, [r3, #0]
 800562c:	e007      	b.n	800563e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800562e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005632:	3301      	adds	r3, #1
 8005634:	b2db      	uxtb	r3, r3
 8005636:	b25a      	sxtb	r2, r3
 8005638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800563e:	2301      	movs	r3, #1
 8005640:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005642:	e001      	b.n	8005648 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005644:	2300      	movs	r3, #0
 8005646:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800564a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005652:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005656:	4618      	mov	r0, r3
 8005658:	3740      	adds	r7, #64	; 0x40
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
	...

08005660 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b08c      	sub	sp, #48	; 0x30
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800566c:	2300      	movs	r3, #0
 800566e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10a      	bne.n	8005690 <xQueueReceive+0x30>
	__asm volatile
 800567a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567e:	f383 8811 	msr	BASEPRI, r3
 8005682:	f3bf 8f6f 	isb	sy
 8005686:	f3bf 8f4f 	dsb	sy
 800568a:	623b      	str	r3, [r7, #32]
}
 800568c:	bf00      	nop
 800568e:	e7fe      	b.n	800568e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d103      	bne.n	800569e <xQueueReceive+0x3e>
 8005696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <xQueueReceive+0x42>
 800569e:	2301      	movs	r3, #1
 80056a0:	e000      	b.n	80056a4 <xQueueReceive+0x44>
 80056a2:	2300      	movs	r3, #0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10a      	bne.n	80056be <xQueueReceive+0x5e>
	__asm volatile
 80056a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ac:	f383 8811 	msr	BASEPRI, r3
 80056b0:	f3bf 8f6f 	isb	sy
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	61fb      	str	r3, [r7, #28]
}
 80056ba:	bf00      	nop
 80056bc:	e7fe      	b.n	80056bc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056be:	f001 f807 	bl	80066d0 <xTaskGetSchedulerState>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d102      	bne.n	80056ce <xQueueReceive+0x6e>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d101      	bne.n	80056d2 <xQueueReceive+0x72>
 80056ce:	2301      	movs	r3, #1
 80056d0:	e000      	b.n	80056d4 <xQueueReceive+0x74>
 80056d2:	2300      	movs	r3, #0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10a      	bne.n	80056ee <xQueueReceive+0x8e>
	__asm volatile
 80056d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056dc:	f383 8811 	msr	BASEPRI, r3
 80056e0:	f3bf 8f6f 	isb	sy
 80056e4:	f3bf 8f4f 	dsb	sy
 80056e8:	61bb      	str	r3, [r7, #24]
}
 80056ea:	bf00      	nop
 80056ec:	e7fe      	b.n	80056ec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056ee:	f001 fd49 	bl	8007184 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d01f      	beq.n	800573e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80056fe:	68b9      	ldr	r1, [r7, #8]
 8005700:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005702:	f000 f8f7 	bl	80058f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	1e5a      	subs	r2, r3, #1
 800570a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800570e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00f      	beq.n	8005736 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005718:	3310      	adds	r3, #16
 800571a:	4618      	mov	r0, r3
 800571c:	f000 fe1a 	bl	8006354 <xTaskRemoveFromEventList>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d007      	beq.n	8005736 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005726:	4b3d      	ldr	r3, [pc, #244]	; (800581c <xQueueReceive+0x1bc>)
 8005728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005736:	f001 fd55 	bl	80071e4 <vPortExitCritical>
				return pdPASS;
 800573a:	2301      	movs	r3, #1
 800573c:	e069      	b.n	8005812 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d103      	bne.n	800574c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005744:	f001 fd4e 	bl	80071e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005748:	2300      	movs	r3, #0
 800574a:	e062      	b.n	8005812 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800574c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574e:	2b00      	cmp	r3, #0
 8005750:	d106      	bne.n	8005760 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005752:	f107 0310 	add.w	r3, r7, #16
 8005756:	4618      	mov	r0, r3
 8005758:	f000 fe60 	bl	800641c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800575c:	2301      	movs	r3, #1
 800575e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005760:	f001 fd40 	bl	80071e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005764:	f000 fbd2 	bl	8005f0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005768:	f001 fd0c 	bl	8007184 <vPortEnterCritical>
 800576c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005772:	b25b      	sxtb	r3, r3
 8005774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005778:	d103      	bne.n	8005782 <xQueueReceive+0x122>
 800577a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005784:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005788:	b25b      	sxtb	r3, r3
 800578a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578e:	d103      	bne.n	8005798 <xQueueReceive+0x138>
 8005790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005792:	2200      	movs	r2, #0
 8005794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005798:	f001 fd24 	bl	80071e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800579c:	1d3a      	adds	r2, r7, #4
 800579e:	f107 0310 	add.w	r3, r7, #16
 80057a2:	4611      	mov	r1, r2
 80057a4:	4618      	mov	r0, r3
 80057a6:	f000 fe4f 	bl	8006448 <xTaskCheckForTimeOut>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d123      	bne.n	80057f8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057b2:	f000 f917 	bl	80059e4 <prvIsQueueEmpty>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d017      	beq.n	80057ec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80057bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057be:	3324      	adds	r3, #36	; 0x24
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	4611      	mov	r1, r2
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 fd75 	bl	80062b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80057ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057cc:	f000 f8b8 	bl	8005940 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80057d0:	f000 fbaa 	bl	8005f28 <xTaskResumeAll>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d189      	bne.n	80056ee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80057da:	4b10      	ldr	r3, [pc, #64]	; (800581c <xQueueReceive+0x1bc>)
 80057dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057e0:	601a      	str	r2, [r3, #0]
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	e780      	b.n	80056ee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80057ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057ee:	f000 f8a7 	bl	8005940 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057f2:	f000 fb99 	bl	8005f28 <xTaskResumeAll>
 80057f6:	e77a      	b.n	80056ee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80057f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057fa:	f000 f8a1 	bl	8005940 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057fe:	f000 fb93 	bl	8005f28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005802:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005804:	f000 f8ee 	bl	80059e4 <prvIsQueueEmpty>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	f43f af6f 	beq.w	80056ee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005810:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005812:	4618      	mov	r0, r3
 8005814:	3730      	adds	r7, #48	; 0x30
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	e000ed04 	.word	0xe000ed04

08005820 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800582c:	2300      	movs	r3, #0
 800582e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005834:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10d      	bne.n	800585a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d14d      	bne.n	80058e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	4618      	mov	r0, r3
 800584c:	f000 ff5e 	bl	800670c <xTaskPriorityDisinherit>
 8005850:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	609a      	str	r2, [r3, #8]
 8005858:	e043      	b.n	80058e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d119      	bne.n	8005894 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6858      	ldr	r0, [r3, #4]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005868:	461a      	mov	r2, r3
 800586a:	68b9      	ldr	r1, [r7, #8]
 800586c:	f002 fda1 	bl	80083b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005878:	441a      	add	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	429a      	cmp	r2, r3
 8005888:	d32b      	bcc.n	80058e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	605a      	str	r2, [r3, #4]
 8005892:	e026      	b.n	80058e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	68d8      	ldr	r0, [r3, #12]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589c:	461a      	mov	r2, r3
 800589e:	68b9      	ldr	r1, [r7, #8]
 80058a0:	f002 fd87 	bl	80083b2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	68da      	ldr	r2, [r3, #12]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ac:	425b      	negs	r3, r3
 80058ae:	441a      	add	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	68da      	ldr	r2, [r3, #12]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d207      	bcs.n	80058d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	689a      	ldr	r2, [r3, #8]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c8:	425b      	negs	r3, r3
 80058ca:	441a      	add	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d105      	bne.n	80058e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d002      	beq.n	80058e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	3b01      	subs	r3, #1
 80058e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	1c5a      	adds	r2, r3, #1
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80058ea:	697b      	ldr	r3, [r7, #20]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3718      	adds	r7, #24
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005902:	2b00      	cmp	r3, #0
 8005904:	d018      	beq.n	8005938 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68da      	ldr	r2, [r3, #12]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590e:	441a      	add	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68da      	ldr	r2, [r3, #12]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	429a      	cmp	r2, r3
 800591e:	d303      	bcc.n	8005928 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68d9      	ldr	r1, [r3, #12]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005930:	461a      	mov	r2, r3
 8005932:	6838      	ldr	r0, [r7, #0]
 8005934:	f002 fd3d 	bl	80083b2 <memcpy>
	}
}
 8005938:	bf00      	nop
 800593a:	3708      	adds	r7, #8
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005948:	f001 fc1c 	bl	8007184 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005952:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005954:	e011      	b.n	800597a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595a:	2b00      	cmp	r3, #0
 800595c:	d012      	beq.n	8005984 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	3324      	adds	r3, #36	; 0x24
 8005962:	4618      	mov	r0, r3
 8005964:	f000 fcf6 	bl	8006354 <xTaskRemoveFromEventList>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800596e:	f000 fdcd 	bl	800650c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005972:	7bfb      	ldrb	r3, [r7, #15]
 8005974:	3b01      	subs	r3, #1
 8005976:	b2db      	uxtb	r3, r3
 8005978:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800597a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800597e:	2b00      	cmp	r3, #0
 8005980:	dce9      	bgt.n	8005956 <prvUnlockQueue+0x16>
 8005982:	e000      	b.n	8005986 <prvUnlockQueue+0x46>
					break;
 8005984:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	22ff      	movs	r2, #255	; 0xff
 800598a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800598e:	f001 fc29 	bl	80071e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005992:	f001 fbf7 	bl	8007184 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800599c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800599e:	e011      	b.n	80059c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d012      	beq.n	80059ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	3310      	adds	r3, #16
 80059ac:	4618      	mov	r0, r3
 80059ae:	f000 fcd1 	bl	8006354 <xTaskRemoveFromEventList>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d001      	beq.n	80059bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80059b8:	f000 fda8 	bl	800650c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80059bc:	7bbb      	ldrb	r3, [r7, #14]
 80059be:	3b01      	subs	r3, #1
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	dce9      	bgt.n	80059a0 <prvUnlockQueue+0x60>
 80059cc:	e000      	b.n	80059d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80059ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	22ff      	movs	r2, #255	; 0xff
 80059d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80059d8:	f001 fc04 	bl	80071e4 <vPortExitCritical>
}
 80059dc:	bf00      	nop
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059ec:	f001 fbca 	bl	8007184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d102      	bne.n	80059fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80059f8:	2301      	movs	r3, #1
 80059fa:	60fb      	str	r3, [r7, #12]
 80059fc:	e001      	b.n	8005a02 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80059fe:	2300      	movs	r3, #0
 8005a00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a02:	f001 fbef 	bl	80071e4 <vPortExitCritical>

	return xReturn;
 8005a06:	68fb      	ldr	r3, [r7, #12]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a18:	f001 fbb4 	bl	8007184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d102      	bne.n	8005a2e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	60fb      	str	r3, [r7, #12]
 8005a2c:	e001      	b.n	8005a32 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a32:	f001 fbd7 	bl	80071e4 <vPortExitCritical>

	return xReturn;
 8005a36:	68fb      	ldr	r3, [r7, #12]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	e014      	b.n	8005a7a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005a50:	4a0f      	ldr	r2, [pc, #60]	; (8005a90 <vQueueAddToRegistry+0x50>)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10b      	bne.n	8005a74 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005a5c:	490c      	ldr	r1, [pc, #48]	; (8005a90 <vQueueAddToRegistry+0x50>)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005a66:	4a0a      	ldr	r2, [pc, #40]	; (8005a90 <vQueueAddToRegistry+0x50>)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	00db      	lsls	r3, r3, #3
 8005a6c:	4413      	add	r3, r2
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005a72:	e006      	b.n	8005a82 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	3301      	adds	r3, #1
 8005a78:	60fb      	str	r3, [r7, #12]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2b07      	cmp	r3, #7
 8005a7e:	d9e7      	bls.n	8005a50 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005a80:	bf00      	nop
 8005a82:	bf00      	nop
 8005a84:	3714      	adds	r7, #20
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	20000e20 	.word	0x20000e20

08005a94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005aa4:	f001 fb6e 	bl	8007184 <vPortEnterCritical>
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005aae:	b25b      	sxtb	r3, r3
 8005ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab4:	d103      	bne.n	8005abe <vQueueWaitForMessageRestricted+0x2a>
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ac4:	b25b      	sxtb	r3, r3
 8005ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aca:	d103      	bne.n	8005ad4 <vQueueWaitForMessageRestricted+0x40>
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ad4:	f001 fb86 	bl	80071e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d106      	bne.n	8005aee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	3324      	adds	r3, #36	; 0x24
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	68b9      	ldr	r1, [r7, #8]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f000 fc07 	bl	80062fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005aee:	6978      	ldr	r0, [r7, #20]
 8005af0:	f7ff ff26 	bl	8005940 <prvUnlockQueue>
	}
 8005af4:	bf00      	nop
 8005af6:	3718      	adds	r7, #24
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08e      	sub	sp, #56	; 0x38
 8005b00:	af04      	add	r7, sp, #16
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
 8005b08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10a      	bne.n	8005b26 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	623b      	str	r3, [r7, #32]
}
 8005b22:	bf00      	nop
 8005b24:	e7fe      	b.n	8005b24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10a      	bne.n	8005b42 <xTaskCreateStatic+0x46>
	__asm volatile
 8005b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	61fb      	str	r3, [r7, #28]
}
 8005b3e:	bf00      	nop
 8005b40:	e7fe      	b.n	8005b40 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b42:	235c      	movs	r3, #92	; 0x5c
 8005b44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	2b5c      	cmp	r3, #92	; 0x5c
 8005b4a:	d00a      	beq.n	8005b62 <xTaskCreateStatic+0x66>
	__asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	61bb      	str	r3, [r7, #24]
}
 8005b5e:	bf00      	nop
 8005b60:	e7fe      	b.n	8005b60 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005b62:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d01e      	beq.n	8005ba8 <xTaskCreateStatic+0xac>
 8005b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d01b      	beq.n	8005ba8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b72:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b78:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b82:	2300      	movs	r3, #0
 8005b84:	9303      	str	r3, [sp, #12]
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	9302      	str	r3, [sp, #8]
 8005b8a:	f107 0314 	add.w	r3, r7, #20
 8005b8e:	9301      	str	r3, [sp, #4]
 8005b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	68b9      	ldr	r1, [r7, #8]
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f000 f850 	bl	8005c40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ba0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ba2:	f000 f8dd 	bl	8005d60 <prvAddNewTaskToReadyList>
 8005ba6:	e001      	b.n	8005bac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005bac:	697b      	ldr	r3, [r7, #20]
	}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3728      	adds	r7, #40	; 0x28
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b08c      	sub	sp, #48	; 0x30
 8005bba:	af04      	add	r7, sp, #16
 8005bbc:	60f8      	str	r0, [r7, #12]
 8005bbe:	60b9      	str	r1, [r7, #8]
 8005bc0:	603b      	str	r3, [r7, #0]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005bc6:	88fb      	ldrh	r3, [r7, #6]
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f001 fbfc 	bl	80073c8 <pvPortMalloc>
 8005bd0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00e      	beq.n	8005bf6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005bd8:	205c      	movs	r0, #92	; 0x5c
 8005bda:	f001 fbf5 	bl	80073c8 <pvPortMalloc>
 8005bde:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	631a      	str	r2, [r3, #48]	; 0x30
 8005bec:	e005      	b.n	8005bfa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005bee:	6978      	ldr	r0, [r7, #20]
 8005bf0:	f001 fcb6 	bl	8007560 <vPortFree>
 8005bf4:	e001      	b.n	8005bfa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d017      	beq.n	8005c30 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c08:	88fa      	ldrh	r2, [r7, #6]
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	9303      	str	r3, [sp, #12]
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	9302      	str	r3, [sp, #8]
 8005c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c14:	9301      	str	r3, [sp, #4]
 8005c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c18:	9300      	str	r3, [sp, #0]
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	68b9      	ldr	r1, [r7, #8]
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f000 f80e 	bl	8005c40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c24:	69f8      	ldr	r0, [r7, #28]
 8005c26:	f000 f89b 	bl	8005d60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	61bb      	str	r3, [r7, #24]
 8005c2e:	e002      	b.n	8005c36 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c30:	f04f 33ff 	mov.w	r3, #4294967295
 8005c34:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c36:	69bb      	ldr	r3, [r7, #24]
	}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3720      	adds	r7, #32
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b088      	sub	sp, #32
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
 8005c4c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c50:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	461a      	mov	r2, r3
 8005c58:	21a5      	movs	r1, #165	; 0xa5
 8005c5a:	f002 fb2a 	bl	80082b2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	f023 0307 	bic.w	r3, r3, #7
 8005c76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	f003 0307 	and.w	r3, r3, #7
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00a      	beq.n	8005c98 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c86:	f383 8811 	msr	BASEPRI, r3
 8005c8a:	f3bf 8f6f 	isb	sy
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	617b      	str	r3, [r7, #20]
}
 8005c94:	bf00      	nop
 8005c96:	e7fe      	b.n	8005c96 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d01f      	beq.n	8005cde <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	61fb      	str	r3, [r7, #28]
 8005ca2:	e012      	b.n	8005cca <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	4413      	add	r3, r2
 8005caa:	7819      	ldrb	r1, [r3, #0]
 8005cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	3334      	adds	r3, #52	; 0x34
 8005cb4:	460a      	mov	r2, r1
 8005cb6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d006      	beq.n	8005cd2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	61fb      	str	r3, [r7, #28]
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	2b0f      	cmp	r3, #15
 8005cce:	d9e9      	bls.n	8005ca4 <prvInitialiseNewTask+0x64>
 8005cd0:	e000      	b.n	8005cd4 <prvInitialiseNewTask+0x94>
			{
				break;
 8005cd2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cdc:	e003      	b.n	8005ce6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce8:	2b37      	cmp	r3, #55	; 0x37
 8005cea:	d901      	bls.n	8005cf0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005cec:	2337      	movs	r3, #55	; 0x37
 8005cee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cf4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cfa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfe:	2200      	movs	r2, #0
 8005d00:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d04:	3304      	adds	r3, #4
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7ff f978 	bl	8004ffc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0e:	3318      	adds	r3, #24
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7ff f973 	bl	8004ffc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d1a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d24:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d2a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2e:	2200      	movs	r2, #0
 8005d30:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d3a:	683a      	ldr	r2, [r7, #0]
 8005d3c:	68f9      	ldr	r1, [r7, #12]
 8005d3e:	69b8      	ldr	r0, [r7, #24]
 8005d40:	f001 f8f4 	bl	8006f2c <pxPortInitialiseStack>
 8005d44:	4602      	mov	r2, r0
 8005d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d48:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d002      	beq.n	8005d56 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d56:	bf00      	nop
 8005d58:	3720      	adds	r7, #32
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
	...

08005d60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d68:	f001 fa0c 	bl	8007184 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d6c:	4b2d      	ldr	r3, [pc, #180]	; (8005e24 <prvAddNewTaskToReadyList+0xc4>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3301      	adds	r3, #1
 8005d72:	4a2c      	ldr	r2, [pc, #176]	; (8005e24 <prvAddNewTaskToReadyList+0xc4>)
 8005d74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d76:	4b2c      	ldr	r3, [pc, #176]	; (8005e28 <prvAddNewTaskToReadyList+0xc8>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d109      	bne.n	8005d92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d7e:	4a2a      	ldr	r2, [pc, #168]	; (8005e28 <prvAddNewTaskToReadyList+0xc8>)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d84:	4b27      	ldr	r3, [pc, #156]	; (8005e24 <prvAddNewTaskToReadyList+0xc4>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d110      	bne.n	8005dae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d8c:	f000 fbe2 	bl	8006554 <prvInitialiseTaskLists>
 8005d90:	e00d      	b.n	8005dae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d92:	4b26      	ldr	r3, [pc, #152]	; (8005e2c <prvAddNewTaskToReadyList+0xcc>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d109      	bne.n	8005dae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d9a:	4b23      	ldr	r3, [pc, #140]	; (8005e28 <prvAddNewTaskToReadyList+0xc8>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d802      	bhi.n	8005dae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005da8:	4a1f      	ldr	r2, [pc, #124]	; (8005e28 <prvAddNewTaskToReadyList+0xc8>)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005dae:	4b20      	ldr	r3, [pc, #128]	; (8005e30 <prvAddNewTaskToReadyList+0xd0>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3301      	adds	r3, #1
 8005db4:	4a1e      	ldr	r2, [pc, #120]	; (8005e30 <prvAddNewTaskToReadyList+0xd0>)
 8005db6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005db8:	4b1d      	ldr	r3, [pc, #116]	; (8005e30 <prvAddNewTaskToReadyList+0xd0>)
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc4:	4b1b      	ldr	r3, [pc, #108]	; (8005e34 <prvAddNewTaskToReadyList+0xd4>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d903      	bls.n	8005dd4 <prvAddNewTaskToReadyList+0x74>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd0:	4a18      	ldr	r2, [pc, #96]	; (8005e34 <prvAddNewTaskToReadyList+0xd4>)
 8005dd2:	6013      	str	r3, [r2, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd8:	4613      	mov	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4413      	add	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4a15      	ldr	r2, [pc, #84]	; (8005e38 <prvAddNewTaskToReadyList+0xd8>)
 8005de2:	441a      	add	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	3304      	adds	r3, #4
 8005de8:	4619      	mov	r1, r3
 8005dea:	4610      	mov	r0, r2
 8005dec:	f7ff f913 	bl	8005016 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005df0:	f001 f9f8 	bl	80071e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005df4:	4b0d      	ldr	r3, [pc, #52]	; (8005e2c <prvAddNewTaskToReadyList+0xcc>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00e      	beq.n	8005e1a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005dfc:	4b0a      	ldr	r3, [pc, #40]	; (8005e28 <prvAddNewTaskToReadyList+0xc8>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d207      	bcs.n	8005e1a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e0a:	4b0c      	ldr	r3, [pc, #48]	; (8005e3c <prvAddNewTaskToReadyList+0xdc>)
 8005e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e10:	601a      	str	r2, [r3, #0]
 8005e12:	f3bf 8f4f 	dsb	sy
 8005e16:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e1a:	bf00      	nop
 8005e1c:	3708      	adds	r7, #8
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20001334 	.word	0x20001334
 8005e28:	20000e60 	.word	0x20000e60
 8005e2c:	20001340 	.word	0x20001340
 8005e30:	20001350 	.word	0x20001350
 8005e34:	2000133c 	.word	0x2000133c
 8005e38:	20000e64 	.word	0x20000e64
 8005e3c:	e000ed04 	.word	0xe000ed04

08005e40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b08a      	sub	sp, #40	; 0x28
 8005e44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e46:	2300      	movs	r3, #0
 8005e48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e4e:	463a      	mov	r2, r7
 8005e50:	1d39      	adds	r1, r7, #4
 8005e52:	f107 0308 	add.w	r3, r7, #8
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7ff f87c 	bl	8004f54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e5c:	6839      	ldr	r1, [r7, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	9202      	str	r2, [sp, #8]
 8005e64:	9301      	str	r3, [sp, #4]
 8005e66:	2300      	movs	r3, #0
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	460a      	mov	r2, r1
 8005e6e:	4921      	ldr	r1, [pc, #132]	; (8005ef4 <vTaskStartScheduler+0xb4>)
 8005e70:	4821      	ldr	r0, [pc, #132]	; (8005ef8 <vTaskStartScheduler+0xb8>)
 8005e72:	f7ff fe43 	bl	8005afc <xTaskCreateStatic>
 8005e76:	4603      	mov	r3, r0
 8005e78:	4a20      	ldr	r2, [pc, #128]	; (8005efc <vTaskStartScheduler+0xbc>)
 8005e7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e7c:	4b1f      	ldr	r3, [pc, #124]	; (8005efc <vTaskStartScheduler+0xbc>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d002      	beq.n	8005e8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e84:	2301      	movs	r3, #1
 8005e86:	617b      	str	r3, [r7, #20]
 8005e88:	e001      	b.n	8005e8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d102      	bne.n	8005e9a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005e94:	f000 fcfc 	bl	8006890 <xTimerCreateTimerTask>
 8005e98:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d116      	bne.n	8005ece <vTaskStartScheduler+0x8e>
	__asm volatile
 8005ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	613b      	str	r3, [r7, #16]
}
 8005eb2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005eb4:	4b12      	ldr	r3, [pc, #72]	; (8005f00 <vTaskStartScheduler+0xc0>)
 8005eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ebc:	4b11      	ldr	r3, [pc, #68]	; (8005f04 <vTaskStartScheduler+0xc4>)
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ec2:	4b11      	ldr	r3, [pc, #68]	; (8005f08 <vTaskStartScheduler+0xc8>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ec8:	f001 f8ba 	bl	8007040 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ecc:	e00e      	b.n	8005eec <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed4:	d10a      	bne.n	8005eec <vTaskStartScheduler+0xac>
	__asm volatile
 8005ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eda:	f383 8811 	msr	BASEPRI, r3
 8005ede:	f3bf 8f6f 	isb	sy
 8005ee2:	f3bf 8f4f 	dsb	sy
 8005ee6:	60fb      	str	r3, [r7, #12]
}
 8005ee8:	bf00      	nop
 8005eea:	e7fe      	b.n	8005eea <vTaskStartScheduler+0xaa>
}
 8005eec:	bf00      	nop
 8005eee:	3718      	adds	r7, #24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	0800a4e8 	.word	0x0800a4e8
 8005ef8:	08006525 	.word	0x08006525
 8005efc:	20001358 	.word	0x20001358
 8005f00:	20001354 	.word	0x20001354
 8005f04:	20001340 	.word	0x20001340
 8005f08:	20001338 	.word	0x20001338

08005f0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005f10:	4b04      	ldr	r3, [pc, #16]	; (8005f24 <vTaskSuspendAll+0x18>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3301      	adds	r3, #1
 8005f16:	4a03      	ldr	r2, [pc, #12]	; (8005f24 <vTaskSuspendAll+0x18>)
 8005f18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005f1a:	bf00      	nop
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr
 8005f24:	2000135c 	.word	0x2000135c

08005f28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f32:	2300      	movs	r3, #0
 8005f34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f36:	4b42      	ldr	r3, [pc, #264]	; (8006040 <xTaskResumeAll+0x118>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10a      	bne.n	8005f54 <xTaskResumeAll+0x2c>
	__asm volatile
 8005f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f42:	f383 8811 	msr	BASEPRI, r3
 8005f46:	f3bf 8f6f 	isb	sy
 8005f4a:	f3bf 8f4f 	dsb	sy
 8005f4e:	603b      	str	r3, [r7, #0]
}
 8005f50:	bf00      	nop
 8005f52:	e7fe      	b.n	8005f52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f54:	f001 f916 	bl	8007184 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f58:	4b39      	ldr	r3, [pc, #228]	; (8006040 <xTaskResumeAll+0x118>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	4a38      	ldr	r2, [pc, #224]	; (8006040 <xTaskResumeAll+0x118>)
 8005f60:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f62:	4b37      	ldr	r3, [pc, #220]	; (8006040 <xTaskResumeAll+0x118>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d162      	bne.n	8006030 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f6a:	4b36      	ldr	r3, [pc, #216]	; (8006044 <xTaskResumeAll+0x11c>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d05e      	beq.n	8006030 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f72:	e02f      	b.n	8005fd4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f74:	4b34      	ldr	r3, [pc, #208]	; (8006048 <xTaskResumeAll+0x120>)
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	3318      	adds	r3, #24
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7ff f8a5 	bl	80050d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	3304      	adds	r3, #4
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7ff f8a0 	bl	80050d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f94:	4b2d      	ldr	r3, [pc, #180]	; (800604c <xTaskResumeAll+0x124>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d903      	bls.n	8005fa4 <xTaskResumeAll+0x7c>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa0:	4a2a      	ldr	r2, [pc, #168]	; (800604c <xTaskResumeAll+0x124>)
 8005fa2:	6013      	str	r3, [r2, #0]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa8:	4613      	mov	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4a27      	ldr	r2, [pc, #156]	; (8006050 <xTaskResumeAll+0x128>)
 8005fb2:	441a      	add	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	3304      	adds	r3, #4
 8005fb8:	4619      	mov	r1, r3
 8005fba:	4610      	mov	r0, r2
 8005fbc:	f7ff f82b 	bl	8005016 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc4:	4b23      	ldr	r3, [pc, #140]	; (8006054 <xTaskResumeAll+0x12c>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d302      	bcc.n	8005fd4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005fce:	4b22      	ldr	r3, [pc, #136]	; (8006058 <xTaskResumeAll+0x130>)
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fd4:	4b1c      	ldr	r3, [pc, #112]	; (8006048 <xTaskResumeAll+0x120>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1cb      	bne.n	8005f74 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005fe2:	f000 fb55 	bl	8006690 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005fe6:	4b1d      	ldr	r3, [pc, #116]	; (800605c <xTaskResumeAll+0x134>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d010      	beq.n	8006014 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ff2:	f000 f847 	bl	8006084 <xTaskIncrementTick>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d002      	beq.n	8006002 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005ffc:	4b16      	ldr	r3, [pc, #88]	; (8006058 <xTaskResumeAll+0x130>)
 8005ffe:	2201      	movs	r2, #1
 8006000:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	3b01      	subs	r3, #1
 8006006:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1f1      	bne.n	8005ff2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800600e:	4b13      	ldr	r3, [pc, #76]	; (800605c <xTaskResumeAll+0x134>)
 8006010:	2200      	movs	r2, #0
 8006012:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006014:	4b10      	ldr	r3, [pc, #64]	; (8006058 <xTaskResumeAll+0x130>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d009      	beq.n	8006030 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800601c:	2301      	movs	r3, #1
 800601e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006020:	4b0f      	ldr	r3, [pc, #60]	; (8006060 <xTaskResumeAll+0x138>)
 8006022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006030:	f001 f8d8 	bl	80071e4 <vPortExitCritical>

	return xAlreadyYielded;
 8006034:	68bb      	ldr	r3, [r7, #8]
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	2000135c 	.word	0x2000135c
 8006044:	20001334 	.word	0x20001334
 8006048:	200012f4 	.word	0x200012f4
 800604c:	2000133c 	.word	0x2000133c
 8006050:	20000e64 	.word	0x20000e64
 8006054:	20000e60 	.word	0x20000e60
 8006058:	20001348 	.word	0x20001348
 800605c:	20001344 	.word	0x20001344
 8006060:	e000ed04 	.word	0xe000ed04

08006064 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800606a:	4b05      	ldr	r3, [pc, #20]	; (8006080 <xTaskGetTickCount+0x1c>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006070:	687b      	ldr	r3, [r7, #4]
}
 8006072:	4618      	mov	r0, r3
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	20001338 	.word	0x20001338

08006084 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800608a:	2300      	movs	r3, #0
 800608c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800608e:	4b4f      	ldr	r3, [pc, #316]	; (80061cc <xTaskIncrementTick+0x148>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	f040 808f 	bne.w	80061b6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006098:	4b4d      	ldr	r3, [pc, #308]	; (80061d0 <xTaskIncrementTick+0x14c>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3301      	adds	r3, #1
 800609e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80060a0:	4a4b      	ldr	r2, [pc, #300]	; (80061d0 <xTaskIncrementTick+0x14c>)
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d120      	bne.n	80060ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80060ac:	4b49      	ldr	r3, [pc, #292]	; (80061d4 <xTaskIncrementTick+0x150>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00a      	beq.n	80060cc <xTaskIncrementTick+0x48>
	__asm volatile
 80060b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ba:	f383 8811 	msr	BASEPRI, r3
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f3bf 8f4f 	dsb	sy
 80060c6:	603b      	str	r3, [r7, #0]
}
 80060c8:	bf00      	nop
 80060ca:	e7fe      	b.n	80060ca <xTaskIncrementTick+0x46>
 80060cc:	4b41      	ldr	r3, [pc, #260]	; (80061d4 <xTaskIncrementTick+0x150>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	60fb      	str	r3, [r7, #12]
 80060d2:	4b41      	ldr	r3, [pc, #260]	; (80061d8 <xTaskIncrementTick+0x154>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a3f      	ldr	r2, [pc, #252]	; (80061d4 <xTaskIncrementTick+0x150>)
 80060d8:	6013      	str	r3, [r2, #0]
 80060da:	4a3f      	ldr	r2, [pc, #252]	; (80061d8 <xTaskIncrementTick+0x154>)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6013      	str	r3, [r2, #0]
 80060e0:	4b3e      	ldr	r3, [pc, #248]	; (80061dc <xTaskIncrementTick+0x158>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3301      	adds	r3, #1
 80060e6:	4a3d      	ldr	r2, [pc, #244]	; (80061dc <xTaskIncrementTick+0x158>)
 80060e8:	6013      	str	r3, [r2, #0]
 80060ea:	f000 fad1 	bl	8006690 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80060ee:	4b3c      	ldr	r3, [pc, #240]	; (80061e0 <xTaskIncrementTick+0x15c>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d349      	bcc.n	800618c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060f8:	4b36      	ldr	r3, [pc, #216]	; (80061d4 <xTaskIncrementTick+0x150>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d104      	bne.n	800610c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006102:	4b37      	ldr	r3, [pc, #220]	; (80061e0 <xTaskIncrementTick+0x15c>)
 8006104:	f04f 32ff 	mov.w	r2, #4294967295
 8006108:	601a      	str	r2, [r3, #0]
					break;
 800610a:	e03f      	b.n	800618c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800610c:	4b31      	ldr	r3, [pc, #196]	; (80061d4 <xTaskIncrementTick+0x150>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	429a      	cmp	r2, r3
 8006122:	d203      	bcs.n	800612c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006124:	4a2e      	ldr	r2, [pc, #184]	; (80061e0 <xTaskIncrementTick+0x15c>)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800612a:	e02f      	b.n	800618c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	3304      	adds	r3, #4
 8006130:	4618      	mov	r0, r3
 8006132:	f7fe ffcd 	bl	80050d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613a:	2b00      	cmp	r3, #0
 800613c:	d004      	beq.n	8006148 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	3318      	adds	r3, #24
 8006142:	4618      	mov	r0, r3
 8006144:	f7fe ffc4 	bl	80050d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800614c:	4b25      	ldr	r3, [pc, #148]	; (80061e4 <xTaskIncrementTick+0x160>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	429a      	cmp	r2, r3
 8006152:	d903      	bls.n	800615c <xTaskIncrementTick+0xd8>
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006158:	4a22      	ldr	r2, [pc, #136]	; (80061e4 <xTaskIncrementTick+0x160>)
 800615a:	6013      	str	r3, [r2, #0]
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006160:	4613      	mov	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	4a1f      	ldr	r2, [pc, #124]	; (80061e8 <xTaskIncrementTick+0x164>)
 800616a:	441a      	add	r2, r3
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	3304      	adds	r3, #4
 8006170:	4619      	mov	r1, r3
 8006172:	4610      	mov	r0, r2
 8006174:	f7fe ff4f 	bl	8005016 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800617c:	4b1b      	ldr	r3, [pc, #108]	; (80061ec <xTaskIncrementTick+0x168>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006182:	429a      	cmp	r2, r3
 8006184:	d3b8      	bcc.n	80060f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006186:	2301      	movs	r3, #1
 8006188:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800618a:	e7b5      	b.n	80060f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800618c:	4b17      	ldr	r3, [pc, #92]	; (80061ec <xTaskIncrementTick+0x168>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006192:	4915      	ldr	r1, [pc, #84]	; (80061e8 <xTaskIncrementTick+0x164>)
 8006194:	4613      	mov	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	440b      	add	r3, r1
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d901      	bls.n	80061a8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80061a4:	2301      	movs	r3, #1
 80061a6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80061a8:	4b11      	ldr	r3, [pc, #68]	; (80061f0 <xTaskIncrementTick+0x16c>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d007      	beq.n	80061c0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80061b0:	2301      	movs	r3, #1
 80061b2:	617b      	str	r3, [r7, #20]
 80061b4:	e004      	b.n	80061c0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80061b6:	4b0f      	ldr	r3, [pc, #60]	; (80061f4 <xTaskIncrementTick+0x170>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	3301      	adds	r3, #1
 80061bc:	4a0d      	ldr	r2, [pc, #52]	; (80061f4 <xTaskIncrementTick+0x170>)
 80061be:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80061c0:	697b      	ldr	r3, [r7, #20]
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3718      	adds	r7, #24
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	2000135c 	.word	0x2000135c
 80061d0:	20001338 	.word	0x20001338
 80061d4:	200012ec 	.word	0x200012ec
 80061d8:	200012f0 	.word	0x200012f0
 80061dc:	2000134c 	.word	0x2000134c
 80061e0:	20001354 	.word	0x20001354
 80061e4:	2000133c 	.word	0x2000133c
 80061e8:	20000e64 	.word	0x20000e64
 80061ec:	20000e60 	.word	0x20000e60
 80061f0:	20001348 	.word	0x20001348
 80061f4:	20001344 	.word	0x20001344

080061f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80061fe:	4b28      	ldr	r3, [pc, #160]	; (80062a0 <vTaskSwitchContext+0xa8>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006206:	4b27      	ldr	r3, [pc, #156]	; (80062a4 <vTaskSwitchContext+0xac>)
 8006208:	2201      	movs	r2, #1
 800620a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800620c:	e041      	b.n	8006292 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800620e:	4b25      	ldr	r3, [pc, #148]	; (80062a4 <vTaskSwitchContext+0xac>)
 8006210:	2200      	movs	r2, #0
 8006212:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006214:	4b24      	ldr	r3, [pc, #144]	; (80062a8 <vTaskSwitchContext+0xb0>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	60fb      	str	r3, [r7, #12]
 800621a:	e010      	b.n	800623e <vTaskSwitchContext+0x46>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10a      	bne.n	8006238 <vTaskSwitchContext+0x40>
	__asm volatile
 8006222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	607b      	str	r3, [r7, #4]
}
 8006234:	bf00      	nop
 8006236:	e7fe      	b.n	8006236 <vTaskSwitchContext+0x3e>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	3b01      	subs	r3, #1
 800623c:	60fb      	str	r3, [r7, #12]
 800623e:	491b      	ldr	r1, [pc, #108]	; (80062ac <vTaskSwitchContext+0xb4>)
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	4613      	mov	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	440b      	add	r3, r1
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d0e4      	beq.n	800621c <vTaskSwitchContext+0x24>
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	4613      	mov	r3, r2
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	4413      	add	r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4a13      	ldr	r2, [pc, #76]	; (80062ac <vTaskSwitchContext+0xb4>)
 800625e:	4413      	add	r3, r2
 8006260:	60bb      	str	r3, [r7, #8]
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	605a      	str	r2, [r3, #4]
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	685a      	ldr	r2, [r3, #4]
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	3308      	adds	r3, #8
 8006274:	429a      	cmp	r2, r3
 8006276:	d104      	bne.n	8006282 <vTaskSwitchContext+0x8a>
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	605a      	str	r2, [r3, #4]
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	4a09      	ldr	r2, [pc, #36]	; (80062b0 <vTaskSwitchContext+0xb8>)
 800628a:	6013      	str	r3, [r2, #0]
 800628c:	4a06      	ldr	r2, [pc, #24]	; (80062a8 <vTaskSwitchContext+0xb0>)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6013      	str	r3, [r2, #0]
}
 8006292:	bf00      	nop
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	2000135c 	.word	0x2000135c
 80062a4:	20001348 	.word	0x20001348
 80062a8:	2000133c 	.word	0x2000133c
 80062ac:	20000e64 	.word	0x20000e64
 80062b0:	20000e60 	.word	0x20000e60

080062b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10a      	bne.n	80062da <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80062c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c8:	f383 8811 	msr	BASEPRI, r3
 80062cc:	f3bf 8f6f 	isb	sy
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	60fb      	str	r3, [r7, #12]
}
 80062d6:	bf00      	nop
 80062d8:	e7fe      	b.n	80062d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062da:	4b07      	ldr	r3, [pc, #28]	; (80062f8 <vTaskPlaceOnEventList+0x44>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	3318      	adds	r3, #24
 80062e0:	4619      	mov	r1, r3
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7fe febb 	bl	800505e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80062e8:	2101      	movs	r1, #1
 80062ea:	6838      	ldr	r0, [r7, #0]
 80062ec:	f000 fa7c 	bl	80067e8 <prvAddCurrentTaskToDelayedList>
}
 80062f0:	bf00      	nop
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	20000e60 	.word	0x20000e60

080062fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10a      	bne.n	8006324 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	617b      	str	r3, [r7, #20]
}
 8006320:	bf00      	nop
 8006322:	e7fe      	b.n	8006322 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006324:	4b0a      	ldr	r3, [pc, #40]	; (8006350 <vTaskPlaceOnEventListRestricted+0x54>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	3318      	adds	r3, #24
 800632a:	4619      	mov	r1, r3
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f7fe fe72 	bl	8005016 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d002      	beq.n	800633e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006338:	f04f 33ff 	mov.w	r3, #4294967295
 800633c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800633e:	6879      	ldr	r1, [r7, #4]
 8006340:	68b8      	ldr	r0, [r7, #8]
 8006342:	f000 fa51 	bl	80067e8 <prvAddCurrentTaskToDelayedList>
	}
 8006346:	bf00      	nop
 8006348:	3718      	adds	r7, #24
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	20000e60 	.word	0x20000e60

08006354 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10a      	bne.n	8006380 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800636a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	60fb      	str	r3, [r7, #12]
}
 800637c:	bf00      	nop
 800637e:	e7fe      	b.n	800637e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	3318      	adds	r3, #24
 8006384:	4618      	mov	r0, r3
 8006386:	f7fe fea3 	bl	80050d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800638a:	4b1e      	ldr	r3, [pc, #120]	; (8006404 <xTaskRemoveFromEventList+0xb0>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d11d      	bne.n	80063ce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	3304      	adds	r3, #4
 8006396:	4618      	mov	r0, r3
 8006398:	f7fe fe9a 	bl	80050d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a0:	4b19      	ldr	r3, [pc, #100]	; (8006408 <xTaskRemoveFromEventList+0xb4>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d903      	bls.n	80063b0 <xTaskRemoveFromEventList+0x5c>
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ac:	4a16      	ldr	r2, [pc, #88]	; (8006408 <xTaskRemoveFromEventList+0xb4>)
 80063ae:	6013      	str	r3, [r2, #0]
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b4:	4613      	mov	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4a13      	ldr	r2, [pc, #76]	; (800640c <xTaskRemoveFromEventList+0xb8>)
 80063be:	441a      	add	r2, r3
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	3304      	adds	r3, #4
 80063c4:	4619      	mov	r1, r3
 80063c6:	4610      	mov	r0, r2
 80063c8:	f7fe fe25 	bl	8005016 <vListInsertEnd>
 80063cc:	e005      	b.n	80063da <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	3318      	adds	r3, #24
 80063d2:	4619      	mov	r1, r3
 80063d4:	480e      	ldr	r0, [pc, #56]	; (8006410 <xTaskRemoveFromEventList+0xbc>)
 80063d6:	f7fe fe1e 	bl	8005016 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063de:	4b0d      	ldr	r3, [pc, #52]	; (8006414 <xTaskRemoveFromEventList+0xc0>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d905      	bls.n	80063f4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80063e8:	2301      	movs	r3, #1
 80063ea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80063ec:	4b0a      	ldr	r3, [pc, #40]	; (8006418 <xTaskRemoveFromEventList+0xc4>)
 80063ee:	2201      	movs	r2, #1
 80063f0:	601a      	str	r2, [r3, #0]
 80063f2:	e001      	b.n	80063f8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80063f4:	2300      	movs	r3, #0
 80063f6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80063f8:	697b      	ldr	r3, [r7, #20]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3718      	adds	r7, #24
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	2000135c 	.word	0x2000135c
 8006408:	2000133c 	.word	0x2000133c
 800640c:	20000e64 	.word	0x20000e64
 8006410:	200012f4 	.word	0x200012f4
 8006414:	20000e60 	.word	0x20000e60
 8006418:	20001348 	.word	0x20001348

0800641c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006424:	4b06      	ldr	r3, [pc, #24]	; (8006440 <vTaskInternalSetTimeOutState+0x24>)
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800642c:	4b05      	ldr	r3, [pc, #20]	; (8006444 <vTaskInternalSetTimeOutState+0x28>)
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	605a      	str	r2, [r3, #4]
}
 8006434:	bf00      	nop
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr
 8006440:	2000134c 	.word	0x2000134c
 8006444:	20001338 	.word	0x20001338

08006448 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b088      	sub	sp, #32
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d10a      	bne.n	800646e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645c:	f383 8811 	msr	BASEPRI, r3
 8006460:	f3bf 8f6f 	isb	sy
 8006464:	f3bf 8f4f 	dsb	sy
 8006468:	613b      	str	r3, [r7, #16]
}
 800646a:	bf00      	nop
 800646c:	e7fe      	b.n	800646c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10a      	bne.n	800648a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006478:	f383 8811 	msr	BASEPRI, r3
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	f3bf 8f4f 	dsb	sy
 8006484:	60fb      	str	r3, [r7, #12]
}
 8006486:	bf00      	nop
 8006488:	e7fe      	b.n	8006488 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800648a:	f000 fe7b 	bl	8007184 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800648e:	4b1d      	ldr	r3, [pc, #116]	; (8006504 <xTaskCheckForTimeOut+0xbc>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a6:	d102      	bne.n	80064ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80064a8:	2300      	movs	r3, #0
 80064aa:	61fb      	str	r3, [r7, #28]
 80064ac:	e023      	b.n	80064f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	4b15      	ldr	r3, [pc, #84]	; (8006508 <xTaskCheckForTimeOut+0xc0>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d007      	beq.n	80064ca <xTaskCheckForTimeOut+0x82>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d302      	bcc.n	80064ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80064c4:	2301      	movs	r3, #1
 80064c6:	61fb      	str	r3, [r7, #28]
 80064c8:	e015      	b.n	80064f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d20b      	bcs.n	80064ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	1ad2      	subs	r2, r2, r3
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f7ff ff9b 	bl	800641c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80064e6:	2300      	movs	r3, #0
 80064e8:	61fb      	str	r3, [r7, #28]
 80064ea:	e004      	b.n	80064f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	2200      	movs	r2, #0
 80064f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80064f2:	2301      	movs	r3, #1
 80064f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80064f6:	f000 fe75 	bl	80071e4 <vPortExitCritical>

	return xReturn;
 80064fa:	69fb      	ldr	r3, [r7, #28]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3720      	adds	r7, #32
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	20001338 	.word	0x20001338
 8006508:	2000134c 	.word	0x2000134c

0800650c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800650c:	b480      	push	{r7}
 800650e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006510:	4b03      	ldr	r3, [pc, #12]	; (8006520 <vTaskMissedYield+0x14>)
 8006512:	2201      	movs	r2, #1
 8006514:	601a      	str	r2, [r3, #0]
}
 8006516:	bf00      	nop
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	20001348 	.word	0x20001348

08006524 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800652c:	f000 f852 	bl	80065d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006530:	4b06      	ldr	r3, [pc, #24]	; (800654c <prvIdleTask+0x28>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d9f9      	bls.n	800652c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006538:	4b05      	ldr	r3, [pc, #20]	; (8006550 <prvIdleTask+0x2c>)
 800653a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800653e:	601a      	str	r2, [r3, #0]
 8006540:	f3bf 8f4f 	dsb	sy
 8006544:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006548:	e7f0      	b.n	800652c <prvIdleTask+0x8>
 800654a:	bf00      	nop
 800654c:	20000e64 	.word	0x20000e64
 8006550:	e000ed04 	.word	0xe000ed04

08006554 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800655a:	2300      	movs	r3, #0
 800655c:	607b      	str	r3, [r7, #4]
 800655e:	e00c      	b.n	800657a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	4613      	mov	r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4413      	add	r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4a12      	ldr	r2, [pc, #72]	; (80065b4 <prvInitialiseTaskLists+0x60>)
 800656c:	4413      	add	r3, r2
 800656e:	4618      	mov	r0, r3
 8006570:	f7fe fd24 	bl	8004fbc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	3301      	adds	r3, #1
 8006578:	607b      	str	r3, [r7, #4]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2b37      	cmp	r3, #55	; 0x37
 800657e:	d9ef      	bls.n	8006560 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006580:	480d      	ldr	r0, [pc, #52]	; (80065b8 <prvInitialiseTaskLists+0x64>)
 8006582:	f7fe fd1b 	bl	8004fbc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006586:	480d      	ldr	r0, [pc, #52]	; (80065bc <prvInitialiseTaskLists+0x68>)
 8006588:	f7fe fd18 	bl	8004fbc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800658c:	480c      	ldr	r0, [pc, #48]	; (80065c0 <prvInitialiseTaskLists+0x6c>)
 800658e:	f7fe fd15 	bl	8004fbc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006592:	480c      	ldr	r0, [pc, #48]	; (80065c4 <prvInitialiseTaskLists+0x70>)
 8006594:	f7fe fd12 	bl	8004fbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006598:	480b      	ldr	r0, [pc, #44]	; (80065c8 <prvInitialiseTaskLists+0x74>)
 800659a:	f7fe fd0f 	bl	8004fbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800659e:	4b0b      	ldr	r3, [pc, #44]	; (80065cc <prvInitialiseTaskLists+0x78>)
 80065a0:	4a05      	ldr	r2, [pc, #20]	; (80065b8 <prvInitialiseTaskLists+0x64>)
 80065a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80065a4:	4b0a      	ldr	r3, [pc, #40]	; (80065d0 <prvInitialiseTaskLists+0x7c>)
 80065a6:	4a05      	ldr	r2, [pc, #20]	; (80065bc <prvInitialiseTaskLists+0x68>)
 80065a8:	601a      	str	r2, [r3, #0]
}
 80065aa:	bf00      	nop
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	20000e64 	.word	0x20000e64
 80065b8:	200012c4 	.word	0x200012c4
 80065bc:	200012d8 	.word	0x200012d8
 80065c0:	200012f4 	.word	0x200012f4
 80065c4:	20001308 	.word	0x20001308
 80065c8:	20001320 	.word	0x20001320
 80065cc:	200012ec 	.word	0x200012ec
 80065d0:	200012f0 	.word	0x200012f0

080065d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065da:	e019      	b.n	8006610 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80065dc:	f000 fdd2 	bl	8007184 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065e0:	4b10      	ldr	r3, [pc, #64]	; (8006624 <prvCheckTasksWaitingTermination+0x50>)
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	3304      	adds	r3, #4
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7fe fd6f 	bl	80050d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80065f2:	4b0d      	ldr	r3, [pc, #52]	; (8006628 <prvCheckTasksWaitingTermination+0x54>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	3b01      	subs	r3, #1
 80065f8:	4a0b      	ldr	r2, [pc, #44]	; (8006628 <prvCheckTasksWaitingTermination+0x54>)
 80065fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80065fc:	4b0b      	ldr	r3, [pc, #44]	; (800662c <prvCheckTasksWaitingTermination+0x58>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3b01      	subs	r3, #1
 8006602:	4a0a      	ldr	r2, [pc, #40]	; (800662c <prvCheckTasksWaitingTermination+0x58>)
 8006604:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006606:	f000 fded 	bl	80071e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f810 	bl	8006630 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006610:	4b06      	ldr	r3, [pc, #24]	; (800662c <prvCheckTasksWaitingTermination+0x58>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1e1      	bne.n	80065dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006618:	bf00      	nop
 800661a:	bf00      	nop
 800661c:	3708      	adds	r7, #8
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	20001308 	.word	0x20001308
 8006628:	20001334 	.word	0x20001334
 800662c:	2000131c 	.word	0x2000131c

08006630 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800663e:	2b00      	cmp	r3, #0
 8006640:	d108      	bne.n	8006654 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006646:	4618      	mov	r0, r3
 8006648:	f000 ff8a 	bl	8007560 <vPortFree>
				vPortFree( pxTCB );
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 ff87 	bl	8007560 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006652:	e018      	b.n	8006686 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800665a:	2b01      	cmp	r3, #1
 800665c:	d103      	bne.n	8006666 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 ff7e 	bl	8007560 <vPortFree>
	}
 8006664:	e00f      	b.n	8006686 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800666c:	2b02      	cmp	r3, #2
 800666e:	d00a      	beq.n	8006686 <prvDeleteTCB+0x56>
	__asm volatile
 8006670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006674:	f383 8811 	msr	BASEPRI, r3
 8006678:	f3bf 8f6f 	isb	sy
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	60fb      	str	r3, [r7, #12]
}
 8006682:	bf00      	nop
 8006684:	e7fe      	b.n	8006684 <prvDeleteTCB+0x54>
	}
 8006686:	bf00      	nop
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
	...

08006690 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006696:	4b0c      	ldr	r3, [pc, #48]	; (80066c8 <prvResetNextTaskUnblockTime+0x38>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d104      	bne.n	80066aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80066a0:	4b0a      	ldr	r3, [pc, #40]	; (80066cc <prvResetNextTaskUnblockTime+0x3c>)
 80066a2:	f04f 32ff 	mov.w	r2, #4294967295
 80066a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80066a8:	e008      	b.n	80066bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066aa:	4b07      	ldr	r3, [pc, #28]	; (80066c8 <prvResetNextTaskUnblockTime+0x38>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	4a04      	ldr	r2, [pc, #16]	; (80066cc <prvResetNextTaskUnblockTime+0x3c>)
 80066ba:	6013      	str	r3, [r2, #0]
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr
 80066c8:	200012ec 	.word	0x200012ec
 80066cc:	20001354 	.word	0x20001354

080066d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80066d6:	4b0b      	ldr	r3, [pc, #44]	; (8006704 <xTaskGetSchedulerState+0x34>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d102      	bne.n	80066e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80066de:	2301      	movs	r3, #1
 80066e0:	607b      	str	r3, [r7, #4]
 80066e2:	e008      	b.n	80066f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066e4:	4b08      	ldr	r3, [pc, #32]	; (8006708 <xTaskGetSchedulerState+0x38>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d102      	bne.n	80066f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80066ec:	2302      	movs	r3, #2
 80066ee:	607b      	str	r3, [r7, #4]
 80066f0:	e001      	b.n	80066f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80066f2:	2300      	movs	r3, #0
 80066f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80066f6:	687b      	ldr	r3, [r7, #4]
	}
 80066f8:	4618      	mov	r0, r3
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr
 8006704:	20001340 	.word	0x20001340
 8006708:	2000135c 	.word	0x2000135c

0800670c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006718:	2300      	movs	r3, #0
 800671a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d056      	beq.n	80067d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006722:	4b2e      	ldr	r3, [pc, #184]	; (80067dc <xTaskPriorityDisinherit+0xd0>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	429a      	cmp	r2, r3
 800672a:	d00a      	beq.n	8006742 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800672c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006730:	f383 8811 	msr	BASEPRI, r3
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	f3bf 8f4f 	dsb	sy
 800673c:	60fb      	str	r3, [r7, #12]
}
 800673e:	bf00      	nop
 8006740:	e7fe      	b.n	8006740 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10a      	bne.n	8006760 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800674a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674e:	f383 8811 	msr	BASEPRI, r3
 8006752:	f3bf 8f6f 	isb	sy
 8006756:	f3bf 8f4f 	dsb	sy
 800675a:	60bb      	str	r3, [r7, #8]
}
 800675c:	bf00      	nop
 800675e:	e7fe      	b.n	800675e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006764:	1e5a      	subs	r2, r3, #1
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006772:	429a      	cmp	r2, r3
 8006774:	d02c      	beq.n	80067d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800677a:	2b00      	cmp	r3, #0
 800677c:	d128      	bne.n	80067d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	3304      	adds	r3, #4
 8006782:	4618      	mov	r0, r3
 8006784:	f7fe fca4 	bl	80050d0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006794:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a0:	4b0f      	ldr	r3, [pc, #60]	; (80067e0 <xTaskPriorityDisinherit+0xd4>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d903      	bls.n	80067b0 <xTaskPriorityDisinherit+0xa4>
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ac:	4a0c      	ldr	r2, [pc, #48]	; (80067e0 <xTaskPriorityDisinherit+0xd4>)
 80067ae:	6013      	str	r3, [r2, #0]
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b4:	4613      	mov	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4a09      	ldr	r2, [pc, #36]	; (80067e4 <xTaskPriorityDisinherit+0xd8>)
 80067be:	441a      	add	r2, r3
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	3304      	adds	r3, #4
 80067c4:	4619      	mov	r1, r3
 80067c6:	4610      	mov	r0, r2
 80067c8:	f7fe fc25 	bl	8005016 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80067cc:	2301      	movs	r3, #1
 80067ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80067d0:	697b      	ldr	r3, [r7, #20]
	}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3718      	adds	r7, #24
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	20000e60 	.word	0x20000e60
 80067e0:	2000133c 	.word	0x2000133c
 80067e4:	20000e64 	.word	0x20000e64

080067e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80067f2:	4b21      	ldr	r3, [pc, #132]	; (8006878 <prvAddCurrentTaskToDelayedList+0x90>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067f8:	4b20      	ldr	r3, [pc, #128]	; (800687c <prvAddCurrentTaskToDelayedList+0x94>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	3304      	adds	r3, #4
 80067fe:	4618      	mov	r0, r3
 8006800:	f7fe fc66 	bl	80050d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800680a:	d10a      	bne.n	8006822 <prvAddCurrentTaskToDelayedList+0x3a>
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d007      	beq.n	8006822 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006812:	4b1a      	ldr	r3, [pc, #104]	; (800687c <prvAddCurrentTaskToDelayedList+0x94>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	3304      	adds	r3, #4
 8006818:	4619      	mov	r1, r3
 800681a:	4819      	ldr	r0, [pc, #100]	; (8006880 <prvAddCurrentTaskToDelayedList+0x98>)
 800681c:	f7fe fbfb 	bl	8005016 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006820:	e026      	b.n	8006870 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4413      	add	r3, r2
 8006828:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800682a:	4b14      	ldr	r3, [pc, #80]	; (800687c <prvAddCurrentTaskToDelayedList+0x94>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006832:	68ba      	ldr	r2, [r7, #8]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	429a      	cmp	r2, r3
 8006838:	d209      	bcs.n	800684e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800683a:	4b12      	ldr	r3, [pc, #72]	; (8006884 <prvAddCurrentTaskToDelayedList+0x9c>)
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	4b0f      	ldr	r3, [pc, #60]	; (800687c <prvAddCurrentTaskToDelayedList+0x94>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	3304      	adds	r3, #4
 8006844:	4619      	mov	r1, r3
 8006846:	4610      	mov	r0, r2
 8006848:	f7fe fc09 	bl	800505e <vListInsert>
}
 800684c:	e010      	b.n	8006870 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800684e:	4b0e      	ldr	r3, [pc, #56]	; (8006888 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	4b0a      	ldr	r3, [pc, #40]	; (800687c <prvAddCurrentTaskToDelayedList+0x94>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	3304      	adds	r3, #4
 8006858:	4619      	mov	r1, r3
 800685a:	4610      	mov	r0, r2
 800685c:	f7fe fbff 	bl	800505e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006860:	4b0a      	ldr	r3, [pc, #40]	; (800688c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	429a      	cmp	r2, r3
 8006868:	d202      	bcs.n	8006870 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800686a:	4a08      	ldr	r2, [pc, #32]	; (800688c <prvAddCurrentTaskToDelayedList+0xa4>)
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	6013      	str	r3, [r2, #0]
}
 8006870:	bf00      	nop
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	20001338 	.word	0x20001338
 800687c:	20000e60 	.word	0x20000e60
 8006880:	20001320 	.word	0x20001320
 8006884:	200012f0 	.word	0x200012f0
 8006888:	200012ec 	.word	0x200012ec
 800688c:	20001354 	.word	0x20001354

08006890 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b08a      	sub	sp, #40	; 0x28
 8006894:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006896:	2300      	movs	r3, #0
 8006898:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800689a:	f000 fb07 	bl	8006eac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800689e:	4b1c      	ldr	r3, [pc, #112]	; (8006910 <xTimerCreateTimerTask+0x80>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d021      	beq.n	80068ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80068a6:	2300      	movs	r3, #0
 80068a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80068aa:	2300      	movs	r3, #0
 80068ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80068ae:	1d3a      	adds	r2, r7, #4
 80068b0:	f107 0108 	add.w	r1, r7, #8
 80068b4:	f107 030c 	add.w	r3, r7, #12
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7fe fb65 	bl	8004f88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80068be:	6879      	ldr	r1, [r7, #4]
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	9202      	str	r2, [sp, #8]
 80068c6:	9301      	str	r3, [sp, #4]
 80068c8:	2302      	movs	r3, #2
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	2300      	movs	r3, #0
 80068ce:	460a      	mov	r2, r1
 80068d0:	4910      	ldr	r1, [pc, #64]	; (8006914 <xTimerCreateTimerTask+0x84>)
 80068d2:	4811      	ldr	r0, [pc, #68]	; (8006918 <xTimerCreateTimerTask+0x88>)
 80068d4:	f7ff f912 	bl	8005afc <xTaskCreateStatic>
 80068d8:	4603      	mov	r3, r0
 80068da:	4a10      	ldr	r2, [pc, #64]	; (800691c <xTimerCreateTimerTask+0x8c>)
 80068dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80068de:	4b0f      	ldr	r3, [pc, #60]	; (800691c <xTimerCreateTimerTask+0x8c>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80068e6:	2301      	movs	r3, #1
 80068e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d10a      	bne.n	8006906 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80068f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f4:	f383 8811 	msr	BASEPRI, r3
 80068f8:	f3bf 8f6f 	isb	sy
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	613b      	str	r3, [r7, #16]
}
 8006902:	bf00      	nop
 8006904:	e7fe      	b.n	8006904 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006906:	697b      	ldr	r3, [r7, #20]
}
 8006908:	4618      	mov	r0, r3
 800690a:	3718      	adds	r7, #24
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	20001390 	.word	0x20001390
 8006914:	0800a4f0 	.word	0x0800a4f0
 8006918:	08006a55 	.word	0x08006a55
 800691c:	20001394 	.word	0x20001394

08006920 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b08a      	sub	sp, #40	; 0x28
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
 800692c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800692e:	2300      	movs	r3, #0
 8006930:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d10a      	bne.n	800694e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693c:	f383 8811 	msr	BASEPRI, r3
 8006940:	f3bf 8f6f 	isb	sy
 8006944:	f3bf 8f4f 	dsb	sy
 8006948:	623b      	str	r3, [r7, #32]
}
 800694a:	bf00      	nop
 800694c:	e7fe      	b.n	800694c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800694e:	4b1a      	ldr	r3, [pc, #104]	; (80069b8 <xTimerGenericCommand+0x98>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d02a      	beq.n	80069ac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	2b05      	cmp	r3, #5
 8006966:	dc18      	bgt.n	800699a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006968:	f7ff feb2 	bl	80066d0 <xTaskGetSchedulerState>
 800696c:	4603      	mov	r3, r0
 800696e:	2b02      	cmp	r3, #2
 8006970:	d109      	bne.n	8006986 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006972:	4b11      	ldr	r3, [pc, #68]	; (80069b8 <xTimerGenericCommand+0x98>)
 8006974:	6818      	ldr	r0, [r3, #0]
 8006976:	f107 0110 	add.w	r1, r7, #16
 800697a:	2300      	movs	r3, #0
 800697c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800697e:	f7fe fcd5 	bl	800532c <xQueueGenericSend>
 8006982:	6278      	str	r0, [r7, #36]	; 0x24
 8006984:	e012      	b.n	80069ac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006986:	4b0c      	ldr	r3, [pc, #48]	; (80069b8 <xTimerGenericCommand+0x98>)
 8006988:	6818      	ldr	r0, [r3, #0]
 800698a:	f107 0110 	add.w	r1, r7, #16
 800698e:	2300      	movs	r3, #0
 8006990:	2200      	movs	r2, #0
 8006992:	f7fe fccb 	bl	800532c <xQueueGenericSend>
 8006996:	6278      	str	r0, [r7, #36]	; 0x24
 8006998:	e008      	b.n	80069ac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800699a:	4b07      	ldr	r3, [pc, #28]	; (80069b8 <xTimerGenericCommand+0x98>)
 800699c:	6818      	ldr	r0, [r3, #0]
 800699e:	f107 0110 	add.w	r1, r7, #16
 80069a2:	2300      	movs	r3, #0
 80069a4:	683a      	ldr	r2, [r7, #0]
 80069a6:	f7fe fdbf 	bl	8005528 <xQueueGenericSendFromISR>
 80069aa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80069ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3728      	adds	r7, #40	; 0x28
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	20001390 	.word	0x20001390

080069bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b088      	sub	sp, #32
 80069c0:	af02      	add	r7, sp, #8
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069c6:	4b22      	ldr	r3, [pc, #136]	; (8006a50 <prvProcessExpiredTimer+0x94>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	3304      	adds	r3, #4
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7fe fb7b 	bl	80050d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069e0:	f003 0304 	and.w	r3, r3, #4
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d022      	beq.n	8006a2e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	699a      	ldr	r2, [r3, #24]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	18d1      	adds	r1, r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	683a      	ldr	r2, [r7, #0]
 80069f4:	6978      	ldr	r0, [r7, #20]
 80069f6:	f000 f8d1 	bl	8006b9c <prvInsertTimerInActiveList>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d01f      	beq.n	8006a40 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a00:	2300      	movs	r3, #0
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	2300      	movs	r3, #0
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	2100      	movs	r1, #0
 8006a0a:	6978      	ldr	r0, [r7, #20]
 8006a0c:	f7ff ff88 	bl	8006920 <xTimerGenericCommand>
 8006a10:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d113      	bne.n	8006a40 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1c:	f383 8811 	msr	BASEPRI, r3
 8006a20:	f3bf 8f6f 	isb	sy
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	60fb      	str	r3, [r7, #12]
}
 8006a2a:	bf00      	nop
 8006a2c:	e7fe      	b.n	8006a2c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a34:	f023 0301 	bic.w	r3, r3, #1
 8006a38:	b2da      	uxtb	r2, r3
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	6a1b      	ldr	r3, [r3, #32]
 8006a44:	6978      	ldr	r0, [r7, #20]
 8006a46:	4798      	blx	r3
}
 8006a48:	bf00      	nop
 8006a4a:	3718      	adds	r7, #24
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	20001388 	.word	0x20001388

08006a54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a5c:	f107 0308 	add.w	r3, r7, #8
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 f857 	bl	8006b14 <prvGetNextExpireTime>
 8006a66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f000 f803 	bl	8006a78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006a72:	f000 f8d5 	bl	8006c20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a76:	e7f1      	b.n	8006a5c <prvTimerTask+0x8>

08006a78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006a82:	f7ff fa43 	bl	8005f0c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a86:	f107 0308 	add.w	r3, r7, #8
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f000 f866 	bl	8006b5c <prvSampleTimeNow>
 8006a90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d130      	bne.n	8006afa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10a      	bne.n	8006ab4 <prvProcessTimerOrBlockTask+0x3c>
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d806      	bhi.n	8006ab4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006aa6:	f7ff fa3f 	bl	8005f28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006aaa:	68f9      	ldr	r1, [r7, #12]
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f7ff ff85 	bl	80069bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006ab2:	e024      	b.n	8006afe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d008      	beq.n	8006acc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006aba:	4b13      	ldr	r3, [pc, #76]	; (8006b08 <prvProcessTimerOrBlockTask+0x90>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d101      	bne.n	8006ac8 <prvProcessTimerOrBlockTask+0x50>
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e000      	b.n	8006aca <prvProcessTimerOrBlockTask+0x52>
 8006ac8:	2300      	movs	r3, #0
 8006aca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006acc:	4b0f      	ldr	r3, [pc, #60]	; (8006b0c <prvProcessTimerOrBlockTask+0x94>)
 8006ace:	6818      	ldr	r0, [r3, #0]
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	683a      	ldr	r2, [r7, #0]
 8006ad8:	4619      	mov	r1, r3
 8006ada:	f7fe ffdb 	bl	8005a94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006ade:	f7ff fa23 	bl	8005f28 <xTaskResumeAll>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d10a      	bne.n	8006afe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006ae8:	4b09      	ldr	r3, [pc, #36]	; (8006b10 <prvProcessTimerOrBlockTask+0x98>)
 8006aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aee:	601a      	str	r2, [r3, #0]
 8006af0:	f3bf 8f4f 	dsb	sy
 8006af4:	f3bf 8f6f 	isb	sy
}
 8006af8:	e001      	b.n	8006afe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006afa:	f7ff fa15 	bl	8005f28 <xTaskResumeAll>
}
 8006afe:	bf00      	nop
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	2000138c 	.word	0x2000138c
 8006b0c:	20001390 	.word	0x20001390
 8006b10:	e000ed04 	.word	0xe000ed04

08006b14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b1c:	4b0e      	ldr	r3, [pc, #56]	; (8006b58 <prvGetNextExpireTime+0x44>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d101      	bne.n	8006b2a <prvGetNextExpireTime+0x16>
 8006b26:	2201      	movs	r2, #1
 8006b28:	e000      	b.n	8006b2c <prvGetNextExpireTime+0x18>
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d105      	bne.n	8006b44 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b38:	4b07      	ldr	r3, [pc, #28]	; (8006b58 <prvGetNextExpireTime+0x44>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	60fb      	str	r3, [r7, #12]
 8006b42:	e001      	b.n	8006b48 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006b44:	2300      	movs	r3, #0
 8006b46:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006b48:	68fb      	ldr	r3, [r7, #12]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3714      	adds	r7, #20
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	20001388 	.word	0x20001388

08006b5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006b64:	f7ff fa7e 	bl	8006064 <xTaskGetTickCount>
 8006b68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006b6a:	4b0b      	ldr	r3, [pc, #44]	; (8006b98 <prvSampleTimeNow+0x3c>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d205      	bcs.n	8006b80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006b74:	f000 f936 	bl	8006de4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	601a      	str	r2, [r3, #0]
 8006b7e:	e002      	b.n	8006b86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006b86:	4a04      	ldr	r2, [pc, #16]	; (8006b98 <prvSampleTimeNow+0x3c>)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	20001398 	.word	0x20001398

08006b9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	607a      	str	r2, [r7, #4]
 8006ba8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006baa:	2300      	movs	r3, #0
 8006bac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d812      	bhi.n	8006be8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	1ad2      	subs	r2, r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d302      	bcc.n	8006bd6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	617b      	str	r3, [r7, #20]
 8006bd4:	e01b      	b.n	8006c0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006bd6:	4b10      	ldr	r3, [pc, #64]	; (8006c18 <prvInsertTimerInActiveList+0x7c>)
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	3304      	adds	r3, #4
 8006bde:	4619      	mov	r1, r3
 8006be0:	4610      	mov	r0, r2
 8006be2:	f7fe fa3c 	bl	800505e <vListInsert>
 8006be6:	e012      	b.n	8006c0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d206      	bcs.n	8006bfe <prvInsertTimerInActiveList+0x62>
 8006bf0:	68ba      	ldr	r2, [r7, #8]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d302      	bcc.n	8006bfe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	617b      	str	r3, [r7, #20]
 8006bfc:	e007      	b.n	8006c0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006bfe:	4b07      	ldr	r3, [pc, #28]	; (8006c1c <prvInsertTimerInActiveList+0x80>)
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	3304      	adds	r3, #4
 8006c06:	4619      	mov	r1, r3
 8006c08:	4610      	mov	r0, r2
 8006c0a:	f7fe fa28 	bl	800505e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006c0e:	697b      	ldr	r3, [r7, #20]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3718      	adds	r7, #24
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	2000138c 	.word	0x2000138c
 8006c1c:	20001388 	.word	0x20001388

08006c20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b08e      	sub	sp, #56	; 0x38
 8006c24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c26:	e0ca      	b.n	8006dbe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	da18      	bge.n	8006c60 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006c2e:	1d3b      	adds	r3, r7, #4
 8006c30:	3304      	adds	r3, #4
 8006c32:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10a      	bne.n	8006c50 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3e:	f383 8811 	msr	BASEPRI, r3
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	61fb      	str	r3, [r7, #28]
}
 8006c4c:	bf00      	nop
 8006c4e:	e7fe      	b.n	8006c4e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c56:	6850      	ldr	r0, [r2, #4]
 8006c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c5a:	6892      	ldr	r2, [r2, #8]
 8006c5c:	4611      	mov	r1, r2
 8006c5e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f2c0 80ab 	blt.w	8006dbe <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6e:	695b      	ldr	r3, [r3, #20]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d004      	beq.n	8006c7e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c76:	3304      	adds	r3, #4
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7fe fa29 	bl	80050d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c7e:	463b      	mov	r3, r7
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7ff ff6b 	bl	8006b5c <prvSampleTimeNow>
 8006c86:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b09      	cmp	r3, #9
 8006c8c:	f200 8096 	bhi.w	8006dbc <prvProcessReceivedCommands+0x19c>
 8006c90:	a201      	add	r2, pc, #4	; (adr r2, 8006c98 <prvProcessReceivedCommands+0x78>)
 8006c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c96:	bf00      	nop
 8006c98:	08006cc1 	.word	0x08006cc1
 8006c9c:	08006cc1 	.word	0x08006cc1
 8006ca0:	08006cc1 	.word	0x08006cc1
 8006ca4:	08006d35 	.word	0x08006d35
 8006ca8:	08006d49 	.word	0x08006d49
 8006cac:	08006d93 	.word	0x08006d93
 8006cb0:	08006cc1 	.word	0x08006cc1
 8006cb4:	08006cc1 	.word	0x08006cc1
 8006cb8:	08006d35 	.word	0x08006d35
 8006cbc:	08006d49 	.word	0x08006d49
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cc6:	f043 0301 	orr.w	r3, r3, #1
 8006cca:	b2da      	uxtb	r2, r3
 8006ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	18d1      	adds	r1, r2, r3
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ce0:	f7ff ff5c 	bl	8006b9c <prvInsertTimerInActiveList>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d069      	beq.n	8006dbe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cf0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cf8:	f003 0304 	and.w	r3, r3, #4
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d05e      	beq.n	8006dbe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	441a      	add	r2, r3
 8006d08:	2300      	movs	r3, #0
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	2100      	movs	r1, #0
 8006d10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d12:	f7ff fe05 	bl	8006920 <xTimerGenericCommand>
 8006d16:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006d18:	6a3b      	ldr	r3, [r7, #32]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d14f      	bne.n	8006dbe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d22:	f383 8811 	msr	BASEPRI, r3
 8006d26:	f3bf 8f6f 	isb	sy
 8006d2a:	f3bf 8f4f 	dsb	sy
 8006d2e:	61bb      	str	r3, [r7, #24]
}
 8006d30:	bf00      	nop
 8006d32:	e7fe      	b.n	8006d32 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d3a:	f023 0301 	bic.w	r3, r3, #1
 8006d3e:	b2da      	uxtb	r2, r3
 8006d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006d46:	e03a      	b.n	8006dbe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d4e:	f043 0301 	orr.w	r3, r3, #1
 8006d52:	b2da      	uxtb	r2, r3
 8006d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10a      	bne.n	8006d7e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6c:	f383 8811 	msr	BASEPRI, r3
 8006d70:	f3bf 8f6f 	isb	sy
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	617b      	str	r3, [r7, #20]
}
 8006d7a:	bf00      	nop
 8006d7c:	e7fe      	b.n	8006d7c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d80:	699a      	ldr	r2, [r3, #24]
 8006d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d84:	18d1      	adds	r1, r2, r3
 8006d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d8c:	f7ff ff06 	bl	8006b9c <prvInsertTimerInActiveList>
					break;
 8006d90:	e015      	b.n	8006dbe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d98:	f003 0302 	and.w	r3, r3, #2
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d103      	bne.n	8006da8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006da0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006da2:	f000 fbdd 	bl	8007560 <vPortFree>
 8006da6:	e00a      	b.n	8006dbe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006daa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dae:	f023 0301 	bic.w	r3, r3, #1
 8006db2:	b2da      	uxtb	r2, r3
 8006db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006dba:	e000      	b.n	8006dbe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006dbc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006dbe:	4b08      	ldr	r3, [pc, #32]	; (8006de0 <prvProcessReceivedCommands+0x1c0>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	1d39      	adds	r1, r7, #4
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7fe fc4a 	bl	8005660 <xQueueReceive>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f47f af2a 	bne.w	8006c28 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006dd4:	bf00      	nop
 8006dd6:	bf00      	nop
 8006dd8:	3730      	adds	r7, #48	; 0x30
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	20001390 	.word	0x20001390

08006de4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b088      	sub	sp, #32
 8006de8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006dea:	e048      	b.n	8006e7e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006dec:	4b2d      	ldr	r3, [pc, #180]	; (8006ea4 <prvSwitchTimerLists+0xc0>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006df6:	4b2b      	ldr	r3, [pc, #172]	; (8006ea4 <prvSwitchTimerLists+0xc0>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	3304      	adds	r3, #4
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7fe f963 	bl	80050d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e18:	f003 0304 	and.w	r3, r3, #4
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d02e      	beq.n	8006e7e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	4413      	add	r3, r2
 8006e28:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d90e      	bls.n	8006e50 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	68ba      	ldr	r2, [r7, #8]
 8006e36:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e3e:	4b19      	ldr	r3, [pc, #100]	; (8006ea4 <prvSwitchTimerLists+0xc0>)
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	3304      	adds	r3, #4
 8006e46:	4619      	mov	r1, r3
 8006e48:	4610      	mov	r0, r2
 8006e4a:	f7fe f908 	bl	800505e <vListInsert>
 8006e4e:	e016      	b.n	8006e7e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e50:	2300      	movs	r3, #0
 8006e52:	9300      	str	r3, [sp, #0]
 8006e54:	2300      	movs	r3, #0
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	2100      	movs	r1, #0
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f7ff fd60 	bl	8006920 <xTimerGenericCommand>
 8006e60:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d10a      	bne.n	8006e7e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6c:	f383 8811 	msr	BASEPRI, r3
 8006e70:	f3bf 8f6f 	isb	sy
 8006e74:	f3bf 8f4f 	dsb	sy
 8006e78:	603b      	str	r3, [r7, #0]
}
 8006e7a:	bf00      	nop
 8006e7c:	e7fe      	b.n	8006e7c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e7e:	4b09      	ldr	r3, [pc, #36]	; (8006ea4 <prvSwitchTimerLists+0xc0>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1b1      	bne.n	8006dec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e88:	4b06      	ldr	r3, [pc, #24]	; (8006ea4 <prvSwitchTimerLists+0xc0>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e8e:	4b06      	ldr	r3, [pc, #24]	; (8006ea8 <prvSwitchTimerLists+0xc4>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a04      	ldr	r2, [pc, #16]	; (8006ea4 <prvSwitchTimerLists+0xc0>)
 8006e94:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006e96:	4a04      	ldr	r2, [pc, #16]	; (8006ea8 <prvSwitchTimerLists+0xc4>)
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	6013      	str	r3, [r2, #0]
}
 8006e9c:	bf00      	nop
 8006e9e:	3718      	adds	r7, #24
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	20001388 	.word	0x20001388
 8006ea8:	2000138c 	.word	0x2000138c

08006eac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006eb2:	f000 f967 	bl	8007184 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006eb6:	4b15      	ldr	r3, [pc, #84]	; (8006f0c <prvCheckForValidListAndQueue+0x60>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d120      	bne.n	8006f00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006ebe:	4814      	ldr	r0, [pc, #80]	; (8006f10 <prvCheckForValidListAndQueue+0x64>)
 8006ec0:	f7fe f87c 	bl	8004fbc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006ec4:	4813      	ldr	r0, [pc, #76]	; (8006f14 <prvCheckForValidListAndQueue+0x68>)
 8006ec6:	f7fe f879 	bl	8004fbc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006eca:	4b13      	ldr	r3, [pc, #76]	; (8006f18 <prvCheckForValidListAndQueue+0x6c>)
 8006ecc:	4a10      	ldr	r2, [pc, #64]	; (8006f10 <prvCheckForValidListAndQueue+0x64>)
 8006ece:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006ed0:	4b12      	ldr	r3, [pc, #72]	; (8006f1c <prvCheckForValidListAndQueue+0x70>)
 8006ed2:	4a10      	ldr	r2, [pc, #64]	; (8006f14 <prvCheckForValidListAndQueue+0x68>)
 8006ed4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	4b11      	ldr	r3, [pc, #68]	; (8006f20 <prvCheckForValidListAndQueue+0x74>)
 8006edc:	4a11      	ldr	r2, [pc, #68]	; (8006f24 <prvCheckForValidListAndQueue+0x78>)
 8006ede:	2110      	movs	r1, #16
 8006ee0:	200a      	movs	r0, #10
 8006ee2:	f7fe f987 	bl	80051f4 <xQueueGenericCreateStatic>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	4a08      	ldr	r2, [pc, #32]	; (8006f0c <prvCheckForValidListAndQueue+0x60>)
 8006eea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006eec:	4b07      	ldr	r3, [pc, #28]	; (8006f0c <prvCheckForValidListAndQueue+0x60>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d005      	beq.n	8006f00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ef4:	4b05      	ldr	r3, [pc, #20]	; (8006f0c <prvCheckForValidListAndQueue+0x60>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	490b      	ldr	r1, [pc, #44]	; (8006f28 <prvCheckForValidListAndQueue+0x7c>)
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7fe fda0 	bl	8005a40 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f00:	f000 f970 	bl	80071e4 <vPortExitCritical>
}
 8006f04:	bf00      	nop
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	20001390 	.word	0x20001390
 8006f10:	20001360 	.word	0x20001360
 8006f14:	20001374 	.word	0x20001374
 8006f18:	20001388 	.word	0x20001388
 8006f1c:	2000138c 	.word	0x2000138c
 8006f20:	2000143c 	.word	0x2000143c
 8006f24:	2000139c 	.word	0x2000139c
 8006f28:	0800a4f8 	.word	0x0800a4f8

08006f2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	3b04      	subs	r3, #4
 8006f3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	3b04      	subs	r3, #4
 8006f4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	f023 0201 	bic.w	r2, r3, #1
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	3b04      	subs	r3, #4
 8006f5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f5c:	4a0c      	ldr	r2, [pc, #48]	; (8006f90 <pxPortInitialiseStack+0x64>)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	3b14      	subs	r3, #20
 8006f66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	3b04      	subs	r3, #4
 8006f72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f06f 0202 	mvn.w	r2, #2
 8006f7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	3b20      	subs	r3, #32
 8006f80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f82:	68fb      	ldr	r3, [r7, #12]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr
 8006f90:	08006f95 	.word	0x08006f95

08006f94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f9e:	4b12      	ldr	r3, [pc, #72]	; (8006fe8 <prvTaskExitError+0x54>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa6:	d00a      	beq.n	8006fbe <prvTaskExitError+0x2a>
	__asm volatile
 8006fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fac:	f383 8811 	msr	BASEPRI, r3
 8006fb0:	f3bf 8f6f 	isb	sy
 8006fb4:	f3bf 8f4f 	dsb	sy
 8006fb8:	60fb      	str	r3, [r7, #12]
}
 8006fba:	bf00      	nop
 8006fbc:	e7fe      	b.n	8006fbc <prvTaskExitError+0x28>
	__asm volatile
 8006fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	60bb      	str	r3, [r7, #8]
}
 8006fd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006fd2:	bf00      	nop
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d0fc      	beq.n	8006fd4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006fda:	bf00      	nop
 8006fdc:	bf00      	nop
 8006fde:	3714      	adds	r7, #20
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr
 8006fe8:	20000014 	.word	0x20000014
 8006fec:	00000000 	.word	0x00000000

08006ff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ff0:	4b07      	ldr	r3, [pc, #28]	; (8007010 <pxCurrentTCBConst2>)
 8006ff2:	6819      	ldr	r1, [r3, #0]
 8006ff4:	6808      	ldr	r0, [r1, #0]
 8006ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffa:	f380 8809 	msr	PSP, r0
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f04f 0000 	mov.w	r0, #0
 8007006:	f380 8811 	msr	BASEPRI, r0
 800700a:	4770      	bx	lr
 800700c:	f3af 8000 	nop.w

08007010 <pxCurrentTCBConst2>:
 8007010:	20000e60 	.word	0x20000e60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007014:	bf00      	nop
 8007016:	bf00      	nop

08007018 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007018:	4808      	ldr	r0, [pc, #32]	; (800703c <prvPortStartFirstTask+0x24>)
 800701a:	6800      	ldr	r0, [r0, #0]
 800701c:	6800      	ldr	r0, [r0, #0]
 800701e:	f380 8808 	msr	MSP, r0
 8007022:	f04f 0000 	mov.w	r0, #0
 8007026:	f380 8814 	msr	CONTROL, r0
 800702a:	b662      	cpsie	i
 800702c:	b661      	cpsie	f
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	df00      	svc	0
 8007038:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800703a:	bf00      	nop
 800703c:	e000ed08 	.word	0xe000ed08

08007040 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b086      	sub	sp, #24
 8007044:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007046:	4b46      	ldr	r3, [pc, #280]	; (8007160 <xPortStartScheduler+0x120>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a46      	ldr	r2, [pc, #280]	; (8007164 <xPortStartScheduler+0x124>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d10a      	bne.n	8007066 <xPortStartScheduler+0x26>
	__asm volatile
 8007050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007054:	f383 8811 	msr	BASEPRI, r3
 8007058:	f3bf 8f6f 	isb	sy
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	613b      	str	r3, [r7, #16]
}
 8007062:	bf00      	nop
 8007064:	e7fe      	b.n	8007064 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007066:	4b3e      	ldr	r3, [pc, #248]	; (8007160 <xPortStartScheduler+0x120>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a3f      	ldr	r2, [pc, #252]	; (8007168 <xPortStartScheduler+0x128>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d10a      	bne.n	8007086 <xPortStartScheduler+0x46>
	__asm volatile
 8007070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007074:	f383 8811 	msr	BASEPRI, r3
 8007078:	f3bf 8f6f 	isb	sy
 800707c:	f3bf 8f4f 	dsb	sy
 8007080:	60fb      	str	r3, [r7, #12]
}
 8007082:	bf00      	nop
 8007084:	e7fe      	b.n	8007084 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007086:	4b39      	ldr	r3, [pc, #228]	; (800716c <xPortStartScheduler+0x12c>)
 8007088:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	b2db      	uxtb	r3, r3
 8007090:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	22ff      	movs	r2, #255	; 0xff
 8007096:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	b2db      	uxtb	r3, r3
 800709e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80070a0:	78fb      	ldrb	r3, [r7, #3]
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80070a8:	b2da      	uxtb	r2, r3
 80070aa:	4b31      	ldr	r3, [pc, #196]	; (8007170 <xPortStartScheduler+0x130>)
 80070ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80070ae:	4b31      	ldr	r3, [pc, #196]	; (8007174 <xPortStartScheduler+0x134>)
 80070b0:	2207      	movs	r2, #7
 80070b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070b4:	e009      	b.n	80070ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80070b6:	4b2f      	ldr	r3, [pc, #188]	; (8007174 <xPortStartScheduler+0x134>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	3b01      	subs	r3, #1
 80070bc:	4a2d      	ldr	r2, [pc, #180]	; (8007174 <xPortStartScheduler+0x134>)
 80070be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80070c0:	78fb      	ldrb	r3, [r7, #3]
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	005b      	lsls	r3, r3, #1
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070ca:	78fb      	ldrb	r3, [r7, #3]
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070d2:	2b80      	cmp	r3, #128	; 0x80
 80070d4:	d0ef      	beq.n	80070b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80070d6:	4b27      	ldr	r3, [pc, #156]	; (8007174 <xPortStartScheduler+0x134>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f1c3 0307 	rsb	r3, r3, #7
 80070de:	2b04      	cmp	r3, #4
 80070e0:	d00a      	beq.n	80070f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80070e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	60bb      	str	r3, [r7, #8]
}
 80070f4:	bf00      	nop
 80070f6:	e7fe      	b.n	80070f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80070f8:	4b1e      	ldr	r3, [pc, #120]	; (8007174 <xPortStartScheduler+0x134>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	021b      	lsls	r3, r3, #8
 80070fe:	4a1d      	ldr	r2, [pc, #116]	; (8007174 <xPortStartScheduler+0x134>)
 8007100:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007102:	4b1c      	ldr	r3, [pc, #112]	; (8007174 <xPortStartScheduler+0x134>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800710a:	4a1a      	ldr	r2, [pc, #104]	; (8007174 <xPortStartScheduler+0x134>)
 800710c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	b2da      	uxtb	r2, r3
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007116:	4b18      	ldr	r3, [pc, #96]	; (8007178 <xPortStartScheduler+0x138>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a17      	ldr	r2, [pc, #92]	; (8007178 <xPortStartScheduler+0x138>)
 800711c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007120:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007122:	4b15      	ldr	r3, [pc, #84]	; (8007178 <xPortStartScheduler+0x138>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a14      	ldr	r2, [pc, #80]	; (8007178 <xPortStartScheduler+0x138>)
 8007128:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800712c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800712e:	f000 f8dd 	bl	80072ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007132:	4b12      	ldr	r3, [pc, #72]	; (800717c <xPortStartScheduler+0x13c>)
 8007134:	2200      	movs	r2, #0
 8007136:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007138:	f000 f8fc 	bl	8007334 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800713c:	4b10      	ldr	r3, [pc, #64]	; (8007180 <xPortStartScheduler+0x140>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a0f      	ldr	r2, [pc, #60]	; (8007180 <xPortStartScheduler+0x140>)
 8007142:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007146:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007148:	f7ff ff66 	bl	8007018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800714c:	f7ff f854 	bl	80061f8 <vTaskSwitchContext>
	prvTaskExitError();
 8007150:	f7ff ff20 	bl	8006f94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3718      	adds	r7, #24
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	e000ed00 	.word	0xe000ed00
 8007164:	410fc271 	.word	0x410fc271
 8007168:	410fc270 	.word	0x410fc270
 800716c:	e000e400 	.word	0xe000e400
 8007170:	2000148c 	.word	0x2000148c
 8007174:	20001490 	.word	0x20001490
 8007178:	e000ed20 	.word	0xe000ed20
 800717c:	20000014 	.word	0x20000014
 8007180:	e000ef34 	.word	0xe000ef34

08007184 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
	__asm volatile
 800718a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718e:	f383 8811 	msr	BASEPRI, r3
 8007192:	f3bf 8f6f 	isb	sy
 8007196:	f3bf 8f4f 	dsb	sy
 800719a:	607b      	str	r3, [r7, #4]
}
 800719c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800719e:	4b0f      	ldr	r3, [pc, #60]	; (80071dc <vPortEnterCritical+0x58>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	3301      	adds	r3, #1
 80071a4:	4a0d      	ldr	r2, [pc, #52]	; (80071dc <vPortEnterCritical+0x58>)
 80071a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80071a8:	4b0c      	ldr	r3, [pc, #48]	; (80071dc <vPortEnterCritical+0x58>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d10f      	bne.n	80071d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80071b0:	4b0b      	ldr	r3, [pc, #44]	; (80071e0 <vPortEnterCritical+0x5c>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00a      	beq.n	80071d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80071ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071be:	f383 8811 	msr	BASEPRI, r3
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	603b      	str	r3, [r7, #0]
}
 80071cc:	bf00      	nop
 80071ce:	e7fe      	b.n	80071ce <vPortEnterCritical+0x4a>
	}
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr
 80071dc:	20000014 	.word	0x20000014
 80071e0:	e000ed04 	.word	0xe000ed04

080071e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80071ea:	4b12      	ldr	r3, [pc, #72]	; (8007234 <vPortExitCritical+0x50>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10a      	bne.n	8007208 <vPortExitCritical+0x24>
	__asm volatile
 80071f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f6:	f383 8811 	msr	BASEPRI, r3
 80071fa:	f3bf 8f6f 	isb	sy
 80071fe:	f3bf 8f4f 	dsb	sy
 8007202:	607b      	str	r3, [r7, #4]
}
 8007204:	bf00      	nop
 8007206:	e7fe      	b.n	8007206 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007208:	4b0a      	ldr	r3, [pc, #40]	; (8007234 <vPortExitCritical+0x50>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	3b01      	subs	r3, #1
 800720e:	4a09      	ldr	r2, [pc, #36]	; (8007234 <vPortExitCritical+0x50>)
 8007210:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007212:	4b08      	ldr	r3, [pc, #32]	; (8007234 <vPortExitCritical+0x50>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d105      	bne.n	8007226 <vPortExitCritical+0x42>
 800721a:	2300      	movs	r3, #0
 800721c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	f383 8811 	msr	BASEPRI, r3
}
 8007224:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007226:	bf00      	nop
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	20000014 	.word	0x20000014
	...

08007240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007240:	f3ef 8009 	mrs	r0, PSP
 8007244:	f3bf 8f6f 	isb	sy
 8007248:	4b15      	ldr	r3, [pc, #84]	; (80072a0 <pxCurrentTCBConst>)
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	f01e 0f10 	tst.w	lr, #16
 8007250:	bf08      	it	eq
 8007252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800725a:	6010      	str	r0, [r2, #0]
 800725c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007260:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007264:	f380 8811 	msr	BASEPRI, r0
 8007268:	f3bf 8f4f 	dsb	sy
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	f7fe ffc2 	bl	80061f8 <vTaskSwitchContext>
 8007274:	f04f 0000 	mov.w	r0, #0
 8007278:	f380 8811 	msr	BASEPRI, r0
 800727c:	bc09      	pop	{r0, r3}
 800727e:	6819      	ldr	r1, [r3, #0]
 8007280:	6808      	ldr	r0, [r1, #0]
 8007282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007286:	f01e 0f10 	tst.w	lr, #16
 800728a:	bf08      	it	eq
 800728c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007290:	f380 8809 	msr	PSP, r0
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	f3af 8000 	nop.w

080072a0 <pxCurrentTCBConst>:
 80072a0:	20000e60 	.word	0x20000e60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80072a4:	bf00      	nop
 80072a6:	bf00      	nop

080072a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
	__asm volatile
 80072ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b2:	f383 8811 	msr	BASEPRI, r3
 80072b6:	f3bf 8f6f 	isb	sy
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	607b      	str	r3, [r7, #4]
}
 80072c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80072c2:	f7fe fedf 	bl	8006084 <xTaskIncrementTick>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d003      	beq.n	80072d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80072cc:	4b06      	ldr	r3, [pc, #24]	; (80072e8 <xPortSysTickHandler+0x40>)
 80072ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	2300      	movs	r3, #0
 80072d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	f383 8811 	msr	BASEPRI, r3
}
 80072de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80072e0:	bf00      	nop
 80072e2:	3708      	adds	r7, #8
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	e000ed04 	.word	0xe000ed04

080072ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80072ec:	b480      	push	{r7}
 80072ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80072f0:	4b0b      	ldr	r3, [pc, #44]	; (8007320 <vPortSetupTimerInterrupt+0x34>)
 80072f2:	2200      	movs	r2, #0
 80072f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80072f6:	4b0b      	ldr	r3, [pc, #44]	; (8007324 <vPortSetupTimerInterrupt+0x38>)
 80072f8:	2200      	movs	r2, #0
 80072fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80072fc:	4b0a      	ldr	r3, [pc, #40]	; (8007328 <vPortSetupTimerInterrupt+0x3c>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a0a      	ldr	r2, [pc, #40]	; (800732c <vPortSetupTimerInterrupt+0x40>)
 8007302:	fba2 2303 	umull	r2, r3, r2, r3
 8007306:	099b      	lsrs	r3, r3, #6
 8007308:	4a09      	ldr	r2, [pc, #36]	; (8007330 <vPortSetupTimerInterrupt+0x44>)
 800730a:	3b01      	subs	r3, #1
 800730c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800730e:	4b04      	ldr	r3, [pc, #16]	; (8007320 <vPortSetupTimerInterrupt+0x34>)
 8007310:	2207      	movs	r2, #7
 8007312:	601a      	str	r2, [r3, #0]
}
 8007314:	bf00      	nop
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	e000e010 	.word	0xe000e010
 8007324:	e000e018 	.word	0xe000e018
 8007328:	20000008 	.word	0x20000008
 800732c:	10624dd3 	.word	0x10624dd3
 8007330:	e000e014 	.word	0xe000e014

08007334 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007334:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007344 <vPortEnableVFP+0x10>
 8007338:	6801      	ldr	r1, [r0, #0]
 800733a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800733e:	6001      	str	r1, [r0, #0]
 8007340:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007342:	bf00      	nop
 8007344:	e000ed88 	.word	0xe000ed88

08007348 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007348:	b480      	push	{r7}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800734e:	f3ef 8305 	mrs	r3, IPSR
 8007352:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2b0f      	cmp	r3, #15
 8007358:	d914      	bls.n	8007384 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800735a:	4a17      	ldr	r2, [pc, #92]	; (80073b8 <vPortValidateInterruptPriority+0x70>)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	4413      	add	r3, r2
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007364:	4b15      	ldr	r3, [pc, #84]	; (80073bc <vPortValidateInterruptPriority+0x74>)
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	7afa      	ldrb	r2, [r7, #11]
 800736a:	429a      	cmp	r2, r3
 800736c:	d20a      	bcs.n	8007384 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800736e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007372:	f383 8811 	msr	BASEPRI, r3
 8007376:	f3bf 8f6f 	isb	sy
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	607b      	str	r3, [r7, #4]
}
 8007380:	bf00      	nop
 8007382:	e7fe      	b.n	8007382 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007384:	4b0e      	ldr	r3, [pc, #56]	; (80073c0 <vPortValidateInterruptPriority+0x78>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800738c:	4b0d      	ldr	r3, [pc, #52]	; (80073c4 <vPortValidateInterruptPriority+0x7c>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	429a      	cmp	r2, r3
 8007392:	d90a      	bls.n	80073aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007398:	f383 8811 	msr	BASEPRI, r3
 800739c:	f3bf 8f6f 	isb	sy
 80073a0:	f3bf 8f4f 	dsb	sy
 80073a4:	603b      	str	r3, [r7, #0]
}
 80073a6:	bf00      	nop
 80073a8:	e7fe      	b.n	80073a8 <vPortValidateInterruptPriority+0x60>
	}
 80073aa:	bf00      	nop
 80073ac:	3714      	adds	r7, #20
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	e000e3f0 	.word	0xe000e3f0
 80073bc:	2000148c 	.word	0x2000148c
 80073c0:	e000ed0c 	.word	0xe000ed0c
 80073c4:	20001490 	.word	0x20001490

080073c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b08a      	sub	sp, #40	; 0x28
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80073d0:	2300      	movs	r3, #0
 80073d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80073d4:	f7fe fd9a 	bl	8005f0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80073d8:	4b5b      	ldr	r3, [pc, #364]	; (8007548 <pvPortMalloc+0x180>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d101      	bne.n	80073e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80073e0:	f000 f920 	bl	8007624 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80073e4:	4b59      	ldr	r3, [pc, #356]	; (800754c <pvPortMalloc+0x184>)
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4013      	ands	r3, r2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f040 8093 	bne.w	8007518 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d01d      	beq.n	8007434 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80073f8:	2208      	movs	r2, #8
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4413      	add	r3, r2
 80073fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f003 0307 	and.w	r3, r3, #7
 8007406:	2b00      	cmp	r3, #0
 8007408:	d014      	beq.n	8007434 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f023 0307 	bic.w	r3, r3, #7
 8007410:	3308      	adds	r3, #8
 8007412:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f003 0307 	and.w	r3, r3, #7
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00a      	beq.n	8007434 <pvPortMalloc+0x6c>
	__asm volatile
 800741e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007422:	f383 8811 	msr	BASEPRI, r3
 8007426:	f3bf 8f6f 	isb	sy
 800742a:	f3bf 8f4f 	dsb	sy
 800742e:	617b      	str	r3, [r7, #20]
}
 8007430:	bf00      	nop
 8007432:	e7fe      	b.n	8007432 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d06e      	beq.n	8007518 <pvPortMalloc+0x150>
 800743a:	4b45      	ldr	r3, [pc, #276]	; (8007550 <pvPortMalloc+0x188>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	429a      	cmp	r2, r3
 8007442:	d869      	bhi.n	8007518 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007444:	4b43      	ldr	r3, [pc, #268]	; (8007554 <pvPortMalloc+0x18c>)
 8007446:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007448:	4b42      	ldr	r3, [pc, #264]	; (8007554 <pvPortMalloc+0x18c>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800744e:	e004      	b.n	800745a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007452:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800745a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	429a      	cmp	r2, r3
 8007462:	d903      	bls.n	800746c <pvPortMalloc+0xa4>
 8007464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1f1      	bne.n	8007450 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800746c:	4b36      	ldr	r3, [pc, #216]	; (8007548 <pvPortMalloc+0x180>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007472:	429a      	cmp	r2, r3
 8007474:	d050      	beq.n	8007518 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007476:	6a3b      	ldr	r3, [r7, #32]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2208      	movs	r2, #8
 800747c:	4413      	add	r3, r2
 800747e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748a:	685a      	ldr	r2, [r3, #4]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	1ad2      	subs	r2, r2, r3
 8007490:	2308      	movs	r3, #8
 8007492:	005b      	lsls	r3, r3, #1
 8007494:	429a      	cmp	r2, r3
 8007496:	d91f      	bls.n	80074d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4413      	add	r3, r2
 800749e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	f003 0307 	and.w	r3, r3, #7
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00a      	beq.n	80074c0 <pvPortMalloc+0xf8>
	__asm volatile
 80074aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ae:	f383 8811 	msr	BASEPRI, r3
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	f3bf 8f4f 	dsb	sy
 80074ba:	613b      	str	r3, [r7, #16]
}
 80074bc:	bf00      	nop
 80074be:	e7fe      	b.n	80074be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80074c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c2:	685a      	ldr	r2, [r3, #4]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	1ad2      	subs	r2, r2, r3
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80074cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80074d2:	69b8      	ldr	r0, [r7, #24]
 80074d4:	f000 f908 	bl	80076e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80074d8:	4b1d      	ldr	r3, [pc, #116]	; (8007550 <pvPortMalloc+0x188>)
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	4a1b      	ldr	r2, [pc, #108]	; (8007550 <pvPortMalloc+0x188>)
 80074e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80074e6:	4b1a      	ldr	r3, [pc, #104]	; (8007550 <pvPortMalloc+0x188>)
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	4b1b      	ldr	r3, [pc, #108]	; (8007558 <pvPortMalloc+0x190>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d203      	bcs.n	80074fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80074f2:	4b17      	ldr	r3, [pc, #92]	; (8007550 <pvPortMalloc+0x188>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a18      	ldr	r2, [pc, #96]	; (8007558 <pvPortMalloc+0x190>)
 80074f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80074fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fc:	685a      	ldr	r2, [r3, #4]
 80074fe:	4b13      	ldr	r3, [pc, #76]	; (800754c <pvPortMalloc+0x184>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	431a      	orrs	r2, r3
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750a:	2200      	movs	r2, #0
 800750c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800750e:	4b13      	ldr	r3, [pc, #76]	; (800755c <pvPortMalloc+0x194>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	3301      	adds	r3, #1
 8007514:	4a11      	ldr	r2, [pc, #68]	; (800755c <pvPortMalloc+0x194>)
 8007516:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007518:	f7fe fd06 	bl	8005f28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	f003 0307 	and.w	r3, r3, #7
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00a      	beq.n	800753c <pvPortMalloc+0x174>
	__asm volatile
 8007526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752a:	f383 8811 	msr	BASEPRI, r3
 800752e:	f3bf 8f6f 	isb	sy
 8007532:	f3bf 8f4f 	dsb	sy
 8007536:	60fb      	str	r3, [r7, #12]
}
 8007538:	bf00      	nop
 800753a:	e7fe      	b.n	800753a <pvPortMalloc+0x172>
	return pvReturn;
 800753c:	69fb      	ldr	r3, [r7, #28]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3728      	adds	r7, #40	; 0x28
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	2000509c 	.word	0x2000509c
 800754c:	200050b0 	.word	0x200050b0
 8007550:	200050a0 	.word	0x200050a0
 8007554:	20005094 	.word	0x20005094
 8007558:	200050a4 	.word	0x200050a4
 800755c:	200050a8 	.word	0x200050a8

08007560 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d04d      	beq.n	800760e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007572:	2308      	movs	r3, #8
 8007574:	425b      	negs	r3, r3
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	4413      	add	r3, r2
 800757a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	4b24      	ldr	r3, [pc, #144]	; (8007618 <vPortFree+0xb8>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4013      	ands	r3, r2
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10a      	bne.n	80075a4 <vPortFree+0x44>
	__asm volatile
 800758e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007592:	f383 8811 	msr	BASEPRI, r3
 8007596:	f3bf 8f6f 	isb	sy
 800759a:	f3bf 8f4f 	dsb	sy
 800759e:	60fb      	str	r3, [r7, #12]
}
 80075a0:	bf00      	nop
 80075a2:	e7fe      	b.n	80075a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00a      	beq.n	80075c2 <vPortFree+0x62>
	__asm volatile
 80075ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b0:	f383 8811 	msr	BASEPRI, r3
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	f3bf 8f4f 	dsb	sy
 80075bc:	60bb      	str	r3, [r7, #8]
}
 80075be:	bf00      	nop
 80075c0:	e7fe      	b.n	80075c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	685a      	ldr	r2, [r3, #4]
 80075c6:	4b14      	ldr	r3, [pc, #80]	; (8007618 <vPortFree+0xb8>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4013      	ands	r3, r2
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d01e      	beq.n	800760e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d11a      	bne.n	800760e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	685a      	ldr	r2, [r3, #4]
 80075dc:	4b0e      	ldr	r3, [pc, #56]	; (8007618 <vPortFree+0xb8>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	43db      	mvns	r3, r3
 80075e2:	401a      	ands	r2, r3
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80075e8:	f7fe fc90 	bl	8005f0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	685a      	ldr	r2, [r3, #4]
 80075f0:	4b0a      	ldr	r3, [pc, #40]	; (800761c <vPortFree+0xbc>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4413      	add	r3, r2
 80075f6:	4a09      	ldr	r2, [pc, #36]	; (800761c <vPortFree+0xbc>)
 80075f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80075fa:	6938      	ldr	r0, [r7, #16]
 80075fc:	f000 f874 	bl	80076e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007600:	4b07      	ldr	r3, [pc, #28]	; (8007620 <vPortFree+0xc0>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	3301      	adds	r3, #1
 8007606:	4a06      	ldr	r2, [pc, #24]	; (8007620 <vPortFree+0xc0>)
 8007608:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800760a:	f7fe fc8d 	bl	8005f28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800760e:	bf00      	nop
 8007610:	3718      	adds	r7, #24
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	200050b0 	.word	0x200050b0
 800761c:	200050a0 	.word	0x200050a0
 8007620:	200050ac 	.word	0x200050ac

08007624 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800762a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800762e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007630:	4b27      	ldr	r3, [pc, #156]	; (80076d0 <prvHeapInit+0xac>)
 8007632:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f003 0307 	and.w	r3, r3, #7
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00c      	beq.n	8007658 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	3307      	adds	r3, #7
 8007642:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f023 0307 	bic.w	r3, r3, #7
 800764a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800764c:	68ba      	ldr	r2, [r7, #8]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	1ad3      	subs	r3, r2, r3
 8007652:	4a1f      	ldr	r2, [pc, #124]	; (80076d0 <prvHeapInit+0xac>)
 8007654:	4413      	add	r3, r2
 8007656:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800765c:	4a1d      	ldr	r2, [pc, #116]	; (80076d4 <prvHeapInit+0xb0>)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007662:	4b1c      	ldr	r3, [pc, #112]	; (80076d4 <prvHeapInit+0xb0>)
 8007664:	2200      	movs	r2, #0
 8007666:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	4413      	add	r3, r2
 800766e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007670:	2208      	movs	r2, #8
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	1a9b      	subs	r3, r3, r2
 8007676:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f023 0307 	bic.w	r3, r3, #7
 800767e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	4a15      	ldr	r2, [pc, #84]	; (80076d8 <prvHeapInit+0xb4>)
 8007684:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007686:	4b14      	ldr	r3, [pc, #80]	; (80076d8 <prvHeapInit+0xb4>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2200      	movs	r2, #0
 800768c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800768e:	4b12      	ldr	r3, [pc, #72]	; (80076d8 <prvHeapInit+0xb4>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2200      	movs	r2, #0
 8007694:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	1ad2      	subs	r2, r2, r3
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80076a4:	4b0c      	ldr	r3, [pc, #48]	; (80076d8 <prvHeapInit+0xb4>)
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	4a0a      	ldr	r2, [pc, #40]	; (80076dc <prvHeapInit+0xb8>)
 80076b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	4a09      	ldr	r2, [pc, #36]	; (80076e0 <prvHeapInit+0xbc>)
 80076ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80076bc:	4b09      	ldr	r3, [pc, #36]	; (80076e4 <prvHeapInit+0xc0>)
 80076be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80076c2:	601a      	str	r2, [r3, #0]
}
 80076c4:	bf00      	nop
 80076c6:	3714      	adds	r7, #20
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr
 80076d0:	20001494 	.word	0x20001494
 80076d4:	20005094 	.word	0x20005094
 80076d8:	2000509c 	.word	0x2000509c
 80076dc:	200050a4 	.word	0x200050a4
 80076e0:	200050a0 	.word	0x200050a0
 80076e4:	200050b0 	.word	0x200050b0

080076e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80076f0:	4b28      	ldr	r3, [pc, #160]	; (8007794 <prvInsertBlockIntoFreeList+0xac>)
 80076f2:	60fb      	str	r3, [r7, #12]
 80076f4:	e002      	b.n	80076fc <prvInsertBlockIntoFreeList+0x14>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	60fb      	str	r3, [r7, #12]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	429a      	cmp	r2, r3
 8007704:	d8f7      	bhi.n	80076f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	4413      	add	r3, r2
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	429a      	cmp	r2, r3
 8007716:	d108      	bne.n	800772a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	685a      	ldr	r2, [r3, #4]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	441a      	add	r2, r3
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	441a      	add	r2, r3
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	429a      	cmp	r2, r3
 800773c:	d118      	bne.n	8007770 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	4b15      	ldr	r3, [pc, #84]	; (8007798 <prvInsertBlockIntoFreeList+0xb0>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	429a      	cmp	r2, r3
 8007748:	d00d      	beq.n	8007766 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685a      	ldr	r2, [r3, #4]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	441a      	add	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	601a      	str	r2, [r3, #0]
 8007764:	e008      	b.n	8007778 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007766:	4b0c      	ldr	r3, [pc, #48]	; (8007798 <prvInsertBlockIntoFreeList+0xb0>)
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	601a      	str	r2, [r3, #0]
 800776e:	e003      	b.n	8007778 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	429a      	cmp	r2, r3
 800777e:	d002      	beq.n	8007786 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007786:	bf00      	nop
 8007788:	3714      	adds	r7, #20
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	20005094 	.word	0x20005094
 8007798:	2000509c 	.word	0x2000509c

0800779c <__cvt>:
 800779c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077a0:	ec55 4b10 	vmov	r4, r5, d0
 80077a4:	2d00      	cmp	r5, #0
 80077a6:	460e      	mov	r6, r1
 80077a8:	4619      	mov	r1, r3
 80077aa:	462b      	mov	r3, r5
 80077ac:	bfbb      	ittet	lt
 80077ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80077b2:	461d      	movlt	r5, r3
 80077b4:	2300      	movge	r3, #0
 80077b6:	232d      	movlt	r3, #45	; 0x2d
 80077b8:	700b      	strb	r3, [r1, #0]
 80077ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80077c0:	4691      	mov	r9, r2
 80077c2:	f023 0820 	bic.w	r8, r3, #32
 80077c6:	bfbc      	itt	lt
 80077c8:	4622      	movlt	r2, r4
 80077ca:	4614      	movlt	r4, r2
 80077cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80077d0:	d005      	beq.n	80077de <__cvt+0x42>
 80077d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80077d6:	d100      	bne.n	80077da <__cvt+0x3e>
 80077d8:	3601      	adds	r6, #1
 80077da:	2102      	movs	r1, #2
 80077dc:	e000      	b.n	80077e0 <__cvt+0x44>
 80077de:	2103      	movs	r1, #3
 80077e0:	ab03      	add	r3, sp, #12
 80077e2:	9301      	str	r3, [sp, #4]
 80077e4:	ab02      	add	r3, sp, #8
 80077e6:	9300      	str	r3, [sp, #0]
 80077e8:	ec45 4b10 	vmov	d0, r4, r5
 80077ec:	4653      	mov	r3, sl
 80077ee:	4632      	mov	r2, r6
 80077f0:	f000 fe76 	bl	80084e0 <_dtoa_r>
 80077f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80077f8:	4607      	mov	r7, r0
 80077fa:	d102      	bne.n	8007802 <__cvt+0x66>
 80077fc:	f019 0f01 	tst.w	r9, #1
 8007800:	d022      	beq.n	8007848 <__cvt+0xac>
 8007802:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007806:	eb07 0906 	add.w	r9, r7, r6
 800780a:	d110      	bne.n	800782e <__cvt+0x92>
 800780c:	783b      	ldrb	r3, [r7, #0]
 800780e:	2b30      	cmp	r3, #48	; 0x30
 8007810:	d10a      	bne.n	8007828 <__cvt+0x8c>
 8007812:	2200      	movs	r2, #0
 8007814:	2300      	movs	r3, #0
 8007816:	4620      	mov	r0, r4
 8007818:	4629      	mov	r1, r5
 800781a:	f7f9 f975 	bl	8000b08 <__aeabi_dcmpeq>
 800781e:	b918      	cbnz	r0, 8007828 <__cvt+0x8c>
 8007820:	f1c6 0601 	rsb	r6, r6, #1
 8007824:	f8ca 6000 	str.w	r6, [sl]
 8007828:	f8da 3000 	ldr.w	r3, [sl]
 800782c:	4499      	add	r9, r3
 800782e:	2200      	movs	r2, #0
 8007830:	2300      	movs	r3, #0
 8007832:	4620      	mov	r0, r4
 8007834:	4629      	mov	r1, r5
 8007836:	f7f9 f967 	bl	8000b08 <__aeabi_dcmpeq>
 800783a:	b108      	cbz	r0, 8007840 <__cvt+0xa4>
 800783c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007840:	2230      	movs	r2, #48	; 0x30
 8007842:	9b03      	ldr	r3, [sp, #12]
 8007844:	454b      	cmp	r3, r9
 8007846:	d307      	bcc.n	8007858 <__cvt+0xbc>
 8007848:	9b03      	ldr	r3, [sp, #12]
 800784a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800784c:	1bdb      	subs	r3, r3, r7
 800784e:	4638      	mov	r0, r7
 8007850:	6013      	str	r3, [r2, #0]
 8007852:	b004      	add	sp, #16
 8007854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007858:	1c59      	adds	r1, r3, #1
 800785a:	9103      	str	r1, [sp, #12]
 800785c:	701a      	strb	r2, [r3, #0]
 800785e:	e7f0      	b.n	8007842 <__cvt+0xa6>

08007860 <__exponent>:
 8007860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007862:	4603      	mov	r3, r0
 8007864:	2900      	cmp	r1, #0
 8007866:	bfb8      	it	lt
 8007868:	4249      	neglt	r1, r1
 800786a:	f803 2b02 	strb.w	r2, [r3], #2
 800786e:	bfb4      	ite	lt
 8007870:	222d      	movlt	r2, #45	; 0x2d
 8007872:	222b      	movge	r2, #43	; 0x2b
 8007874:	2909      	cmp	r1, #9
 8007876:	7042      	strb	r2, [r0, #1]
 8007878:	dd2a      	ble.n	80078d0 <__exponent+0x70>
 800787a:	f10d 0207 	add.w	r2, sp, #7
 800787e:	4617      	mov	r7, r2
 8007880:	260a      	movs	r6, #10
 8007882:	4694      	mov	ip, r2
 8007884:	fb91 f5f6 	sdiv	r5, r1, r6
 8007888:	fb06 1415 	mls	r4, r6, r5, r1
 800788c:	3430      	adds	r4, #48	; 0x30
 800788e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007892:	460c      	mov	r4, r1
 8007894:	2c63      	cmp	r4, #99	; 0x63
 8007896:	f102 32ff 	add.w	r2, r2, #4294967295
 800789a:	4629      	mov	r1, r5
 800789c:	dcf1      	bgt.n	8007882 <__exponent+0x22>
 800789e:	3130      	adds	r1, #48	; 0x30
 80078a0:	f1ac 0402 	sub.w	r4, ip, #2
 80078a4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80078a8:	1c41      	adds	r1, r0, #1
 80078aa:	4622      	mov	r2, r4
 80078ac:	42ba      	cmp	r2, r7
 80078ae:	d30a      	bcc.n	80078c6 <__exponent+0x66>
 80078b0:	f10d 0209 	add.w	r2, sp, #9
 80078b4:	eba2 020c 	sub.w	r2, r2, ip
 80078b8:	42bc      	cmp	r4, r7
 80078ba:	bf88      	it	hi
 80078bc:	2200      	movhi	r2, #0
 80078be:	4413      	add	r3, r2
 80078c0:	1a18      	subs	r0, r3, r0
 80078c2:	b003      	add	sp, #12
 80078c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078c6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80078ca:	f801 5f01 	strb.w	r5, [r1, #1]!
 80078ce:	e7ed      	b.n	80078ac <__exponent+0x4c>
 80078d0:	2330      	movs	r3, #48	; 0x30
 80078d2:	3130      	adds	r1, #48	; 0x30
 80078d4:	7083      	strb	r3, [r0, #2]
 80078d6:	70c1      	strb	r1, [r0, #3]
 80078d8:	1d03      	adds	r3, r0, #4
 80078da:	e7f1      	b.n	80078c0 <__exponent+0x60>

080078dc <_printf_float>:
 80078dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e0:	ed2d 8b02 	vpush	{d8}
 80078e4:	b08d      	sub	sp, #52	; 0x34
 80078e6:	460c      	mov	r4, r1
 80078e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80078ec:	4616      	mov	r6, r2
 80078ee:	461f      	mov	r7, r3
 80078f0:	4605      	mov	r5, r0
 80078f2:	f000 fce7 	bl	80082c4 <_localeconv_r>
 80078f6:	f8d0 a000 	ldr.w	sl, [r0]
 80078fa:	4650      	mov	r0, sl
 80078fc:	f7f8 fcd8 	bl	80002b0 <strlen>
 8007900:	2300      	movs	r3, #0
 8007902:	930a      	str	r3, [sp, #40]	; 0x28
 8007904:	6823      	ldr	r3, [r4, #0]
 8007906:	9305      	str	r3, [sp, #20]
 8007908:	f8d8 3000 	ldr.w	r3, [r8]
 800790c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007910:	3307      	adds	r3, #7
 8007912:	f023 0307 	bic.w	r3, r3, #7
 8007916:	f103 0208 	add.w	r2, r3, #8
 800791a:	f8c8 2000 	str.w	r2, [r8]
 800791e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007922:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007926:	9307      	str	r3, [sp, #28]
 8007928:	f8cd 8018 	str.w	r8, [sp, #24]
 800792c:	ee08 0a10 	vmov	s16, r0
 8007930:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007934:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007938:	4b9e      	ldr	r3, [pc, #632]	; (8007bb4 <_printf_float+0x2d8>)
 800793a:	f04f 32ff 	mov.w	r2, #4294967295
 800793e:	f7f9 f915 	bl	8000b6c <__aeabi_dcmpun>
 8007942:	bb88      	cbnz	r0, 80079a8 <_printf_float+0xcc>
 8007944:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007948:	4b9a      	ldr	r3, [pc, #616]	; (8007bb4 <_printf_float+0x2d8>)
 800794a:	f04f 32ff 	mov.w	r2, #4294967295
 800794e:	f7f9 f8ef 	bl	8000b30 <__aeabi_dcmple>
 8007952:	bb48      	cbnz	r0, 80079a8 <_printf_float+0xcc>
 8007954:	2200      	movs	r2, #0
 8007956:	2300      	movs	r3, #0
 8007958:	4640      	mov	r0, r8
 800795a:	4649      	mov	r1, r9
 800795c:	f7f9 f8de 	bl	8000b1c <__aeabi_dcmplt>
 8007960:	b110      	cbz	r0, 8007968 <_printf_float+0x8c>
 8007962:	232d      	movs	r3, #45	; 0x2d
 8007964:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007968:	4a93      	ldr	r2, [pc, #588]	; (8007bb8 <_printf_float+0x2dc>)
 800796a:	4b94      	ldr	r3, [pc, #592]	; (8007bbc <_printf_float+0x2e0>)
 800796c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007970:	bf94      	ite	ls
 8007972:	4690      	movls	r8, r2
 8007974:	4698      	movhi	r8, r3
 8007976:	2303      	movs	r3, #3
 8007978:	6123      	str	r3, [r4, #16]
 800797a:	9b05      	ldr	r3, [sp, #20]
 800797c:	f023 0304 	bic.w	r3, r3, #4
 8007980:	6023      	str	r3, [r4, #0]
 8007982:	f04f 0900 	mov.w	r9, #0
 8007986:	9700      	str	r7, [sp, #0]
 8007988:	4633      	mov	r3, r6
 800798a:	aa0b      	add	r2, sp, #44	; 0x2c
 800798c:	4621      	mov	r1, r4
 800798e:	4628      	mov	r0, r5
 8007990:	f000 f9da 	bl	8007d48 <_printf_common>
 8007994:	3001      	adds	r0, #1
 8007996:	f040 8090 	bne.w	8007aba <_printf_float+0x1de>
 800799a:	f04f 30ff 	mov.w	r0, #4294967295
 800799e:	b00d      	add	sp, #52	; 0x34
 80079a0:	ecbd 8b02 	vpop	{d8}
 80079a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079a8:	4642      	mov	r2, r8
 80079aa:	464b      	mov	r3, r9
 80079ac:	4640      	mov	r0, r8
 80079ae:	4649      	mov	r1, r9
 80079b0:	f7f9 f8dc 	bl	8000b6c <__aeabi_dcmpun>
 80079b4:	b140      	cbz	r0, 80079c8 <_printf_float+0xec>
 80079b6:	464b      	mov	r3, r9
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	bfbc      	itt	lt
 80079bc:	232d      	movlt	r3, #45	; 0x2d
 80079be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80079c2:	4a7f      	ldr	r2, [pc, #508]	; (8007bc0 <_printf_float+0x2e4>)
 80079c4:	4b7f      	ldr	r3, [pc, #508]	; (8007bc4 <_printf_float+0x2e8>)
 80079c6:	e7d1      	b.n	800796c <_printf_float+0x90>
 80079c8:	6863      	ldr	r3, [r4, #4]
 80079ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80079ce:	9206      	str	r2, [sp, #24]
 80079d0:	1c5a      	adds	r2, r3, #1
 80079d2:	d13f      	bne.n	8007a54 <_printf_float+0x178>
 80079d4:	2306      	movs	r3, #6
 80079d6:	6063      	str	r3, [r4, #4]
 80079d8:	9b05      	ldr	r3, [sp, #20]
 80079da:	6861      	ldr	r1, [r4, #4]
 80079dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80079e0:	2300      	movs	r3, #0
 80079e2:	9303      	str	r3, [sp, #12]
 80079e4:	ab0a      	add	r3, sp, #40	; 0x28
 80079e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80079ea:	ab09      	add	r3, sp, #36	; 0x24
 80079ec:	ec49 8b10 	vmov	d0, r8, r9
 80079f0:	9300      	str	r3, [sp, #0]
 80079f2:	6022      	str	r2, [r4, #0]
 80079f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80079f8:	4628      	mov	r0, r5
 80079fa:	f7ff fecf 	bl	800779c <__cvt>
 80079fe:	9b06      	ldr	r3, [sp, #24]
 8007a00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a02:	2b47      	cmp	r3, #71	; 0x47
 8007a04:	4680      	mov	r8, r0
 8007a06:	d108      	bne.n	8007a1a <_printf_float+0x13e>
 8007a08:	1cc8      	adds	r0, r1, #3
 8007a0a:	db02      	blt.n	8007a12 <_printf_float+0x136>
 8007a0c:	6863      	ldr	r3, [r4, #4]
 8007a0e:	4299      	cmp	r1, r3
 8007a10:	dd41      	ble.n	8007a96 <_printf_float+0x1ba>
 8007a12:	f1ab 0302 	sub.w	r3, fp, #2
 8007a16:	fa5f fb83 	uxtb.w	fp, r3
 8007a1a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a1e:	d820      	bhi.n	8007a62 <_printf_float+0x186>
 8007a20:	3901      	subs	r1, #1
 8007a22:	465a      	mov	r2, fp
 8007a24:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007a28:	9109      	str	r1, [sp, #36]	; 0x24
 8007a2a:	f7ff ff19 	bl	8007860 <__exponent>
 8007a2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a30:	1813      	adds	r3, r2, r0
 8007a32:	2a01      	cmp	r2, #1
 8007a34:	4681      	mov	r9, r0
 8007a36:	6123      	str	r3, [r4, #16]
 8007a38:	dc02      	bgt.n	8007a40 <_printf_float+0x164>
 8007a3a:	6822      	ldr	r2, [r4, #0]
 8007a3c:	07d2      	lsls	r2, r2, #31
 8007a3e:	d501      	bpl.n	8007a44 <_printf_float+0x168>
 8007a40:	3301      	adds	r3, #1
 8007a42:	6123      	str	r3, [r4, #16]
 8007a44:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d09c      	beq.n	8007986 <_printf_float+0xaa>
 8007a4c:	232d      	movs	r3, #45	; 0x2d
 8007a4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a52:	e798      	b.n	8007986 <_printf_float+0xaa>
 8007a54:	9a06      	ldr	r2, [sp, #24]
 8007a56:	2a47      	cmp	r2, #71	; 0x47
 8007a58:	d1be      	bne.n	80079d8 <_printf_float+0xfc>
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1bc      	bne.n	80079d8 <_printf_float+0xfc>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e7b9      	b.n	80079d6 <_printf_float+0xfa>
 8007a62:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007a66:	d118      	bne.n	8007a9a <_printf_float+0x1be>
 8007a68:	2900      	cmp	r1, #0
 8007a6a:	6863      	ldr	r3, [r4, #4]
 8007a6c:	dd0b      	ble.n	8007a86 <_printf_float+0x1aa>
 8007a6e:	6121      	str	r1, [r4, #16]
 8007a70:	b913      	cbnz	r3, 8007a78 <_printf_float+0x19c>
 8007a72:	6822      	ldr	r2, [r4, #0]
 8007a74:	07d0      	lsls	r0, r2, #31
 8007a76:	d502      	bpl.n	8007a7e <_printf_float+0x1a2>
 8007a78:	3301      	adds	r3, #1
 8007a7a:	440b      	add	r3, r1
 8007a7c:	6123      	str	r3, [r4, #16]
 8007a7e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007a80:	f04f 0900 	mov.w	r9, #0
 8007a84:	e7de      	b.n	8007a44 <_printf_float+0x168>
 8007a86:	b913      	cbnz	r3, 8007a8e <_printf_float+0x1b2>
 8007a88:	6822      	ldr	r2, [r4, #0]
 8007a8a:	07d2      	lsls	r2, r2, #31
 8007a8c:	d501      	bpl.n	8007a92 <_printf_float+0x1b6>
 8007a8e:	3302      	adds	r3, #2
 8007a90:	e7f4      	b.n	8007a7c <_printf_float+0x1a0>
 8007a92:	2301      	movs	r3, #1
 8007a94:	e7f2      	b.n	8007a7c <_printf_float+0x1a0>
 8007a96:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007a9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a9c:	4299      	cmp	r1, r3
 8007a9e:	db05      	blt.n	8007aac <_printf_float+0x1d0>
 8007aa0:	6823      	ldr	r3, [r4, #0]
 8007aa2:	6121      	str	r1, [r4, #16]
 8007aa4:	07d8      	lsls	r0, r3, #31
 8007aa6:	d5ea      	bpl.n	8007a7e <_printf_float+0x1a2>
 8007aa8:	1c4b      	adds	r3, r1, #1
 8007aaa:	e7e7      	b.n	8007a7c <_printf_float+0x1a0>
 8007aac:	2900      	cmp	r1, #0
 8007aae:	bfd4      	ite	le
 8007ab0:	f1c1 0202 	rsble	r2, r1, #2
 8007ab4:	2201      	movgt	r2, #1
 8007ab6:	4413      	add	r3, r2
 8007ab8:	e7e0      	b.n	8007a7c <_printf_float+0x1a0>
 8007aba:	6823      	ldr	r3, [r4, #0]
 8007abc:	055a      	lsls	r2, r3, #21
 8007abe:	d407      	bmi.n	8007ad0 <_printf_float+0x1f4>
 8007ac0:	6923      	ldr	r3, [r4, #16]
 8007ac2:	4642      	mov	r2, r8
 8007ac4:	4631      	mov	r1, r6
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	47b8      	blx	r7
 8007aca:	3001      	adds	r0, #1
 8007acc:	d12c      	bne.n	8007b28 <_printf_float+0x24c>
 8007ace:	e764      	b.n	800799a <_printf_float+0xbe>
 8007ad0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ad4:	f240 80e0 	bls.w	8007c98 <_printf_float+0x3bc>
 8007ad8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007adc:	2200      	movs	r2, #0
 8007ade:	2300      	movs	r3, #0
 8007ae0:	f7f9 f812 	bl	8000b08 <__aeabi_dcmpeq>
 8007ae4:	2800      	cmp	r0, #0
 8007ae6:	d034      	beq.n	8007b52 <_printf_float+0x276>
 8007ae8:	4a37      	ldr	r2, [pc, #220]	; (8007bc8 <_printf_float+0x2ec>)
 8007aea:	2301      	movs	r3, #1
 8007aec:	4631      	mov	r1, r6
 8007aee:	4628      	mov	r0, r5
 8007af0:	47b8      	blx	r7
 8007af2:	3001      	adds	r0, #1
 8007af4:	f43f af51 	beq.w	800799a <_printf_float+0xbe>
 8007af8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007afc:	429a      	cmp	r2, r3
 8007afe:	db02      	blt.n	8007b06 <_printf_float+0x22a>
 8007b00:	6823      	ldr	r3, [r4, #0]
 8007b02:	07d8      	lsls	r0, r3, #31
 8007b04:	d510      	bpl.n	8007b28 <_printf_float+0x24c>
 8007b06:	ee18 3a10 	vmov	r3, s16
 8007b0a:	4652      	mov	r2, sl
 8007b0c:	4631      	mov	r1, r6
 8007b0e:	4628      	mov	r0, r5
 8007b10:	47b8      	blx	r7
 8007b12:	3001      	adds	r0, #1
 8007b14:	f43f af41 	beq.w	800799a <_printf_float+0xbe>
 8007b18:	f04f 0800 	mov.w	r8, #0
 8007b1c:	f104 091a 	add.w	r9, r4, #26
 8007b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b22:	3b01      	subs	r3, #1
 8007b24:	4543      	cmp	r3, r8
 8007b26:	dc09      	bgt.n	8007b3c <_printf_float+0x260>
 8007b28:	6823      	ldr	r3, [r4, #0]
 8007b2a:	079b      	lsls	r3, r3, #30
 8007b2c:	f100 8107 	bmi.w	8007d3e <_printf_float+0x462>
 8007b30:	68e0      	ldr	r0, [r4, #12]
 8007b32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b34:	4298      	cmp	r0, r3
 8007b36:	bfb8      	it	lt
 8007b38:	4618      	movlt	r0, r3
 8007b3a:	e730      	b.n	800799e <_printf_float+0xc2>
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	464a      	mov	r2, r9
 8007b40:	4631      	mov	r1, r6
 8007b42:	4628      	mov	r0, r5
 8007b44:	47b8      	blx	r7
 8007b46:	3001      	adds	r0, #1
 8007b48:	f43f af27 	beq.w	800799a <_printf_float+0xbe>
 8007b4c:	f108 0801 	add.w	r8, r8, #1
 8007b50:	e7e6      	b.n	8007b20 <_printf_float+0x244>
 8007b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	dc39      	bgt.n	8007bcc <_printf_float+0x2f0>
 8007b58:	4a1b      	ldr	r2, [pc, #108]	; (8007bc8 <_printf_float+0x2ec>)
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	4631      	mov	r1, r6
 8007b5e:	4628      	mov	r0, r5
 8007b60:	47b8      	blx	r7
 8007b62:	3001      	adds	r0, #1
 8007b64:	f43f af19 	beq.w	800799a <_printf_float+0xbe>
 8007b68:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	d102      	bne.n	8007b76 <_printf_float+0x29a>
 8007b70:	6823      	ldr	r3, [r4, #0]
 8007b72:	07d9      	lsls	r1, r3, #31
 8007b74:	d5d8      	bpl.n	8007b28 <_printf_float+0x24c>
 8007b76:	ee18 3a10 	vmov	r3, s16
 8007b7a:	4652      	mov	r2, sl
 8007b7c:	4631      	mov	r1, r6
 8007b7e:	4628      	mov	r0, r5
 8007b80:	47b8      	blx	r7
 8007b82:	3001      	adds	r0, #1
 8007b84:	f43f af09 	beq.w	800799a <_printf_float+0xbe>
 8007b88:	f04f 0900 	mov.w	r9, #0
 8007b8c:	f104 0a1a 	add.w	sl, r4, #26
 8007b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b92:	425b      	negs	r3, r3
 8007b94:	454b      	cmp	r3, r9
 8007b96:	dc01      	bgt.n	8007b9c <_printf_float+0x2c0>
 8007b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b9a:	e792      	b.n	8007ac2 <_printf_float+0x1e6>
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	4652      	mov	r2, sl
 8007ba0:	4631      	mov	r1, r6
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	47b8      	blx	r7
 8007ba6:	3001      	adds	r0, #1
 8007ba8:	f43f aef7 	beq.w	800799a <_printf_float+0xbe>
 8007bac:	f109 0901 	add.w	r9, r9, #1
 8007bb0:	e7ee      	b.n	8007b90 <_printf_float+0x2b4>
 8007bb2:	bf00      	nop
 8007bb4:	7fefffff 	.word	0x7fefffff
 8007bb8:	0800b864 	.word	0x0800b864
 8007bbc:	0800b868 	.word	0x0800b868
 8007bc0:	0800b86c 	.word	0x0800b86c
 8007bc4:	0800b870 	.word	0x0800b870
 8007bc8:	0800b874 	.word	0x0800b874
 8007bcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	bfa8      	it	ge
 8007bd4:	461a      	movge	r2, r3
 8007bd6:	2a00      	cmp	r2, #0
 8007bd8:	4691      	mov	r9, r2
 8007bda:	dc37      	bgt.n	8007c4c <_printf_float+0x370>
 8007bdc:	f04f 0b00 	mov.w	fp, #0
 8007be0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007be4:	f104 021a 	add.w	r2, r4, #26
 8007be8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007bea:	9305      	str	r3, [sp, #20]
 8007bec:	eba3 0309 	sub.w	r3, r3, r9
 8007bf0:	455b      	cmp	r3, fp
 8007bf2:	dc33      	bgt.n	8007c5c <_printf_float+0x380>
 8007bf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	db3b      	blt.n	8007c74 <_printf_float+0x398>
 8007bfc:	6823      	ldr	r3, [r4, #0]
 8007bfe:	07da      	lsls	r2, r3, #31
 8007c00:	d438      	bmi.n	8007c74 <_printf_float+0x398>
 8007c02:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007c06:	eba2 0903 	sub.w	r9, r2, r3
 8007c0a:	9b05      	ldr	r3, [sp, #20]
 8007c0c:	1ad2      	subs	r2, r2, r3
 8007c0e:	4591      	cmp	r9, r2
 8007c10:	bfa8      	it	ge
 8007c12:	4691      	movge	r9, r2
 8007c14:	f1b9 0f00 	cmp.w	r9, #0
 8007c18:	dc35      	bgt.n	8007c86 <_printf_float+0x3aa>
 8007c1a:	f04f 0800 	mov.w	r8, #0
 8007c1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c22:	f104 0a1a 	add.w	sl, r4, #26
 8007c26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c2a:	1a9b      	subs	r3, r3, r2
 8007c2c:	eba3 0309 	sub.w	r3, r3, r9
 8007c30:	4543      	cmp	r3, r8
 8007c32:	f77f af79 	ble.w	8007b28 <_printf_float+0x24c>
 8007c36:	2301      	movs	r3, #1
 8007c38:	4652      	mov	r2, sl
 8007c3a:	4631      	mov	r1, r6
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	47b8      	blx	r7
 8007c40:	3001      	adds	r0, #1
 8007c42:	f43f aeaa 	beq.w	800799a <_printf_float+0xbe>
 8007c46:	f108 0801 	add.w	r8, r8, #1
 8007c4a:	e7ec      	b.n	8007c26 <_printf_float+0x34a>
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	4631      	mov	r1, r6
 8007c50:	4642      	mov	r2, r8
 8007c52:	4628      	mov	r0, r5
 8007c54:	47b8      	blx	r7
 8007c56:	3001      	adds	r0, #1
 8007c58:	d1c0      	bne.n	8007bdc <_printf_float+0x300>
 8007c5a:	e69e      	b.n	800799a <_printf_float+0xbe>
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	4631      	mov	r1, r6
 8007c60:	4628      	mov	r0, r5
 8007c62:	9205      	str	r2, [sp, #20]
 8007c64:	47b8      	blx	r7
 8007c66:	3001      	adds	r0, #1
 8007c68:	f43f ae97 	beq.w	800799a <_printf_float+0xbe>
 8007c6c:	9a05      	ldr	r2, [sp, #20]
 8007c6e:	f10b 0b01 	add.w	fp, fp, #1
 8007c72:	e7b9      	b.n	8007be8 <_printf_float+0x30c>
 8007c74:	ee18 3a10 	vmov	r3, s16
 8007c78:	4652      	mov	r2, sl
 8007c7a:	4631      	mov	r1, r6
 8007c7c:	4628      	mov	r0, r5
 8007c7e:	47b8      	blx	r7
 8007c80:	3001      	adds	r0, #1
 8007c82:	d1be      	bne.n	8007c02 <_printf_float+0x326>
 8007c84:	e689      	b.n	800799a <_printf_float+0xbe>
 8007c86:	9a05      	ldr	r2, [sp, #20]
 8007c88:	464b      	mov	r3, r9
 8007c8a:	4442      	add	r2, r8
 8007c8c:	4631      	mov	r1, r6
 8007c8e:	4628      	mov	r0, r5
 8007c90:	47b8      	blx	r7
 8007c92:	3001      	adds	r0, #1
 8007c94:	d1c1      	bne.n	8007c1a <_printf_float+0x33e>
 8007c96:	e680      	b.n	800799a <_printf_float+0xbe>
 8007c98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c9a:	2a01      	cmp	r2, #1
 8007c9c:	dc01      	bgt.n	8007ca2 <_printf_float+0x3c6>
 8007c9e:	07db      	lsls	r3, r3, #31
 8007ca0:	d53a      	bpl.n	8007d18 <_printf_float+0x43c>
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	4642      	mov	r2, r8
 8007ca6:	4631      	mov	r1, r6
 8007ca8:	4628      	mov	r0, r5
 8007caa:	47b8      	blx	r7
 8007cac:	3001      	adds	r0, #1
 8007cae:	f43f ae74 	beq.w	800799a <_printf_float+0xbe>
 8007cb2:	ee18 3a10 	vmov	r3, s16
 8007cb6:	4652      	mov	r2, sl
 8007cb8:	4631      	mov	r1, r6
 8007cba:	4628      	mov	r0, r5
 8007cbc:	47b8      	blx	r7
 8007cbe:	3001      	adds	r0, #1
 8007cc0:	f43f ae6b 	beq.w	800799a <_printf_float+0xbe>
 8007cc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007cc8:	2200      	movs	r2, #0
 8007cca:	2300      	movs	r3, #0
 8007ccc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007cd0:	f7f8 ff1a 	bl	8000b08 <__aeabi_dcmpeq>
 8007cd4:	b9d8      	cbnz	r0, 8007d0e <_printf_float+0x432>
 8007cd6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007cda:	f108 0201 	add.w	r2, r8, #1
 8007cde:	4631      	mov	r1, r6
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	47b8      	blx	r7
 8007ce4:	3001      	adds	r0, #1
 8007ce6:	d10e      	bne.n	8007d06 <_printf_float+0x42a>
 8007ce8:	e657      	b.n	800799a <_printf_float+0xbe>
 8007cea:	2301      	movs	r3, #1
 8007cec:	4652      	mov	r2, sl
 8007cee:	4631      	mov	r1, r6
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	47b8      	blx	r7
 8007cf4:	3001      	adds	r0, #1
 8007cf6:	f43f ae50 	beq.w	800799a <_printf_float+0xbe>
 8007cfa:	f108 0801 	add.w	r8, r8, #1
 8007cfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d00:	3b01      	subs	r3, #1
 8007d02:	4543      	cmp	r3, r8
 8007d04:	dcf1      	bgt.n	8007cea <_printf_float+0x40e>
 8007d06:	464b      	mov	r3, r9
 8007d08:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007d0c:	e6da      	b.n	8007ac4 <_printf_float+0x1e8>
 8007d0e:	f04f 0800 	mov.w	r8, #0
 8007d12:	f104 0a1a 	add.w	sl, r4, #26
 8007d16:	e7f2      	b.n	8007cfe <_printf_float+0x422>
 8007d18:	2301      	movs	r3, #1
 8007d1a:	4642      	mov	r2, r8
 8007d1c:	e7df      	b.n	8007cde <_printf_float+0x402>
 8007d1e:	2301      	movs	r3, #1
 8007d20:	464a      	mov	r2, r9
 8007d22:	4631      	mov	r1, r6
 8007d24:	4628      	mov	r0, r5
 8007d26:	47b8      	blx	r7
 8007d28:	3001      	adds	r0, #1
 8007d2a:	f43f ae36 	beq.w	800799a <_printf_float+0xbe>
 8007d2e:	f108 0801 	add.w	r8, r8, #1
 8007d32:	68e3      	ldr	r3, [r4, #12]
 8007d34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d36:	1a5b      	subs	r3, r3, r1
 8007d38:	4543      	cmp	r3, r8
 8007d3a:	dcf0      	bgt.n	8007d1e <_printf_float+0x442>
 8007d3c:	e6f8      	b.n	8007b30 <_printf_float+0x254>
 8007d3e:	f04f 0800 	mov.w	r8, #0
 8007d42:	f104 0919 	add.w	r9, r4, #25
 8007d46:	e7f4      	b.n	8007d32 <_printf_float+0x456>

08007d48 <_printf_common>:
 8007d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d4c:	4616      	mov	r6, r2
 8007d4e:	4699      	mov	r9, r3
 8007d50:	688a      	ldr	r2, [r1, #8]
 8007d52:	690b      	ldr	r3, [r1, #16]
 8007d54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	bfb8      	it	lt
 8007d5c:	4613      	movlt	r3, r2
 8007d5e:	6033      	str	r3, [r6, #0]
 8007d60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d64:	4607      	mov	r7, r0
 8007d66:	460c      	mov	r4, r1
 8007d68:	b10a      	cbz	r2, 8007d6e <_printf_common+0x26>
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	6033      	str	r3, [r6, #0]
 8007d6e:	6823      	ldr	r3, [r4, #0]
 8007d70:	0699      	lsls	r1, r3, #26
 8007d72:	bf42      	ittt	mi
 8007d74:	6833      	ldrmi	r3, [r6, #0]
 8007d76:	3302      	addmi	r3, #2
 8007d78:	6033      	strmi	r3, [r6, #0]
 8007d7a:	6825      	ldr	r5, [r4, #0]
 8007d7c:	f015 0506 	ands.w	r5, r5, #6
 8007d80:	d106      	bne.n	8007d90 <_printf_common+0x48>
 8007d82:	f104 0a19 	add.w	sl, r4, #25
 8007d86:	68e3      	ldr	r3, [r4, #12]
 8007d88:	6832      	ldr	r2, [r6, #0]
 8007d8a:	1a9b      	subs	r3, r3, r2
 8007d8c:	42ab      	cmp	r3, r5
 8007d8e:	dc26      	bgt.n	8007dde <_printf_common+0x96>
 8007d90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d94:	1e13      	subs	r3, r2, #0
 8007d96:	6822      	ldr	r2, [r4, #0]
 8007d98:	bf18      	it	ne
 8007d9a:	2301      	movne	r3, #1
 8007d9c:	0692      	lsls	r2, r2, #26
 8007d9e:	d42b      	bmi.n	8007df8 <_printf_common+0xb0>
 8007da0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007da4:	4649      	mov	r1, r9
 8007da6:	4638      	mov	r0, r7
 8007da8:	47c0      	blx	r8
 8007daa:	3001      	adds	r0, #1
 8007dac:	d01e      	beq.n	8007dec <_printf_common+0xa4>
 8007dae:	6823      	ldr	r3, [r4, #0]
 8007db0:	6922      	ldr	r2, [r4, #16]
 8007db2:	f003 0306 	and.w	r3, r3, #6
 8007db6:	2b04      	cmp	r3, #4
 8007db8:	bf02      	ittt	eq
 8007dba:	68e5      	ldreq	r5, [r4, #12]
 8007dbc:	6833      	ldreq	r3, [r6, #0]
 8007dbe:	1aed      	subeq	r5, r5, r3
 8007dc0:	68a3      	ldr	r3, [r4, #8]
 8007dc2:	bf0c      	ite	eq
 8007dc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007dc8:	2500      	movne	r5, #0
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	bfc4      	itt	gt
 8007dce:	1a9b      	subgt	r3, r3, r2
 8007dd0:	18ed      	addgt	r5, r5, r3
 8007dd2:	2600      	movs	r6, #0
 8007dd4:	341a      	adds	r4, #26
 8007dd6:	42b5      	cmp	r5, r6
 8007dd8:	d11a      	bne.n	8007e10 <_printf_common+0xc8>
 8007dda:	2000      	movs	r0, #0
 8007ddc:	e008      	b.n	8007df0 <_printf_common+0xa8>
 8007dde:	2301      	movs	r3, #1
 8007de0:	4652      	mov	r2, sl
 8007de2:	4649      	mov	r1, r9
 8007de4:	4638      	mov	r0, r7
 8007de6:	47c0      	blx	r8
 8007de8:	3001      	adds	r0, #1
 8007dea:	d103      	bne.n	8007df4 <_printf_common+0xac>
 8007dec:	f04f 30ff 	mov.w	r0, #4294967295
 8007df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007df4:	3501      	adds	r5, #1
 8007df6:	e7c6      	b.n	8007d86 <_printf_common+0x3e>
 8007df8:	18e1      	adds	r1, r4, r3
 8007dfa:	1c5a      	adds	r2, r3, #1
 8007dfc:	2030      	movs	r0, #48	; 0x30
 8007dfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e02:	4422      	add	r2, r4
 8007e04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e0c:	3302      	adds	r3, #2
 8007e0e:	e7c7      	b.n	8007da0 <_printf_common+0x58>
 8007e10:	2301      	movs	r3, #1
 8007e12:	4622      	mov	r2, r4
 8007e14:	4649      	mov	r1, r9
 8007e16:	4638      	mov	r0, r7
 8007e18:	47c0      	blx	r8
 8007e1a:	3001      	adds	r0, #1
 8007e1c:	d0e6      	beq.n	8007dec <_printf_common+0xa4>
 8007e1e:	3601      	adds	r6, #1
 8007e20:	e7d9      	b.n	8007dd6 <_printf_common+0x8e>
	...

08007e24 <_printf_i>:
 8007e24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e28:	7e0f      	ldrb	r7, [r1, #24]
 8007e2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e2c:	2f78      	cmp	r7, #120	; 0x78
 8007e2e:	4691      	mov	r9, r2
 8007e30:	4680      	mov	r8, r0
 8007e32:	460c      	mov	r4, r1
 8007e34:	469a      	mov	sl, r3
 8007e36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e3a:	d807      	bhi.n	8007e4c <_printf_i+0x28>
 8007e3c:	2f62      	cmp	r7, #98	; 0x62
 8007e3e:	d80a      	bhi.n	8007e56 <_printf_i+0x32>
 8007e40:	2f00      	cmp	r7, #0
 8007e42:	f000 80d4 	beq.w	8007fee <_printf_i+0x1ca>
 8007e46:	2f58      	cmp	r7, #88	; 0x58
 8007e48:	f000 80c0 	beq.w	8007fcc <_printf_i+0x1a8>
 8007e4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e54:	e03a      	b.n	8007ecc <_printf_i+0xa8>
 8007e56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e5a:	2b15      	cmp	r3, #21
 8007e5c:	d8f6      	bhi.n	8007e4c <_printf_i+0x28>
 8007e5e:	a101      	add	r1, pc, #4	; (adr r1, 8007e64 <_printf_i+0x40>)
 8007e60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e64:	08007ebd 	.word	0x08007ebd
 8007e68:	08007ed1 	.word	0x08007ed1
 8007e6c:	08007e4d 	.word	0x08007e4d
 8007e70:	08007e4d 	.word	0x08007e4d
 8007e74:	08007e4d 	.word	0x08007e4d
 8007e78:	08007e4d 	.word	0x08007e4d
 8007e7c:	08007ed1 	.word	0x08007ed1
 8007e80:	08007e4d 	.word	0x08007e4d
 8007e84:	08007e4d 	.word	0x08007e4d
 8007e88:	08007e4d 	.word	0x08007e4d
 8007e8c:	08007e4d 	.word	0x08007e4d
 8007e90:	08007fd5 	.word	0x08007fd5
 8007e94:	08007efd 	.word	0x08007efd
 8007e98:	08007f8f 	.word	0x08007f8f
 8007e9c:	08007e4d 	.word	0x08007e4d
 8007ea0:	08007e4d 	.word	0x08007e4d
 8007ea4:	08007ff7 	.word	0x08007ff7
 8007ea8:	08007e4d 	.word	0x08007e4d
 8007eac:	08007efd 	.word	0x08007efd
 8007eb0:	08007e4d 	.word	0x08007e4d
 8007eb4:	08007e4d 	.word	0x08007e4d
 8007eb8:	08007f97 	.word	0x08007f97
 8007ebc:	682b      	ldr	r3, [r5, #0]
 8007ebe:	1d1a      	adds	r2, r3, #4
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	602a      	str	r2, [r5, #0]
 8007ec4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ec8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e09f      	b.n	8008010 <_printf_i+0x1ec>
 8007ed0:	6820      	ldr	r0, [r4, #0]
 8007ed2:	682b      	ldr	r3, [r5, #0]
 8007ed4:	0607      	lsls	r7, r0, #24
 8007ed6:	f103 0104 	add.w	r1, r3, #4
 8007eda:	6029      	str	r1, [r5, #0]
 8007edc:	d501      	bpl.n	8007ee2 <_printf_i+0xbe>
 8007ede:	681e      	ldr	r6, [r3, #0]
 8007ee0:	e003      	b.n	8007eea <_printf_i+0xc6>
 8007ee2:	0646      	lsls	r6, r0, #25
 8007ee4:	d5fb      	bpl.n	8007ede <_printf_i+0xba>
 8007ee6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007eea:	2e00      	cmp	r6, #0
 8007eec:	da03      	bge.n	8007ef6 <_printf_i+0xd2>
 8007eee:	232d      	movs	r3, #45	; 0x2d
 8007ef0:	4276      	negs	r6, r6
 8007ef2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ef6:	485a      	ldr	r0, [pc, #360]	; (8008060 <_printf_i+0x23c>)
 8007ef8:	230a      	movs	r3, #10
 8007efa:	e012      	b.n	8007f22 <_printf_i+0xfe>
 8007efc:	682b      	ldr	r3, [r5, #0]
 8007efe:	6820      	ldr	r0, [r4, #0]
 8007f00:	1d19      	adds	r1, r3, #4
 8007f02:	6029      	str	r1, [r5, #0]
 8007f04:	0605      	lsls	r5, r0, #24
 8007f06:	d501      	bpl.n	8007f0c <_printf_i+0xe8>
 8007f08:	681e      	ldr	r6, [r3, #0]
 8007f0a:	e002      	b.n	8007f12 <_printf_i+0xee>
 8007f0c:	0641      	lsls	r1, r0, #25
 8007f0e:	d5fb      	bpl.n	8007f08 <_printf_i+0xe4>
 8007f10:	881e      	ldrh	r6, [r3, #0]
 8007f12:	4853      	ldr	r0, [pc, #332]	; (8008060 <_printf_i+0x23c>)
 8007f14:	2f6f      	cmp	r7, #111	; 0x6f
 8007f16:	bf0c      	ite	eq
 8007f18:	2308      	moveq	r3, #8
 8007f1a:	230a      	movne	r3, #10
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f22:	6865      	ldr	r5, [r4, #4]
 8007f24:	60a5      	str	r5, [r4, #8]
 8007f26:	2d00      	cmp	r5, #0
 8007f28:	bfa2      	ittt	ge
 8007f2a:	6821      	ldrge	r1, [r4, #0]
 8007f2c:	f021 0104 	bicge.w	r1, r1, #4
 8007f30:	6021      	strge	r1, [r4, #0]
 8007f32:	b90e      	cbnz	r6, 8007f38 <_printf_i+0x114>
 8007f34:	2d00      	cmp	r5, #0
 8007f36:	d04b      	beq.n	8007fd0 <_printf_i+0x1ac>
 8007f38:	4615      	mov	r5, r2
 8007f3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f3e:	fb03 6711 	mls	r7, r3, r1, r6
 8007f42:	5dc7      	ldrb	r7, [r0, r7]
 8007f44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f48:	4637      	mov	r7, r6
 8007f4a:	42bb      	cmp	r3, r7
 8007f4c:	460e      	mov	r6, r1
 8007f4e:	d9f4      	bls.n	8007f3a <_printf_i+0x116>
 8007f50:	2b08      	cmp	r3, #8
 8007f52:	d10b      	bne.n	8007f6c <_printf_i+0x148>
 8007f54:	6823      	ldr	r3, [r4, #0]
 8007f56:	07de      	lsls	r6, r3, #31
 8007f58:	d508      	bpl.n	8007f6c <_printf_i+0x148>
 8007f5a:	6923      	ldr	r3, [r4, #16]
 8007f5c:	6861      	ldr	r1, [r4, #4]
 8007f5e:	4299      	cmp	r1, r3
 8007f60:	bfde      	ittt	le
 8007f62:	2330      	movle	r3, #48	; 0x30
 8007f64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f6c:	1b52      	subs	r2, r2, r5
 8007f6e:	6122      	str	r2, [r4, #16]
 8007f70:	f8cd a000 	str.w	sl, [sp]
 8007f74:	464b      	mov	r3, r9
 8007f76:	aa03      	add	r2, sp, #12
 8007f78:	4621      	mov	r1, r4
 8007f7a:	4640      	mov	r0, r8
 8007f7c:	f7ff fee4 	bl	8007d48 <_printf_common>
 8007f80:	3001      	adds	r0, #1
 8007f82:	d14a      	bne.n	800801a <_printf_i+0x1f6>
 8007f84:	f04f 30ff 	mov.w	r0, #4294967295
 8007f88:	b004      	add	sp, #16
 8007f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f8e:	6823      	ldr	r3, [r4, #0]
 8007f90:	f043 0320 	orr.w	r3, r3, #32
 8007f94:	6023      	str	r3, [r4, #0]
 8007f96:	4833      	ldr	r0, [pc, #204]	; (8008064 <_printf_i+0x240>)
 8007f98:	2778      	movs	r7, #120	; 0x78
 8007f9a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007f9e:	6823      	ldr	r3, [r4, #0]
 8007fa0:	6829      	ldr	r1, [r5, #0]
 8007fa2:	061f      	lsls	r7, r3, #24
 8007fa4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007fa8:	d402      	bmi.n	8007fb0 <_printf_i+0x18c>
 8007faa:	065f      	lsls	r7, r3, #25
 8007fac:	bf48      	it	mi
 8007fae:	b2b6      	uxthmi	r6, r6
 8007fb0:	07df      	lsls	r7, r3, #31
 8007fb2:	bf48      	it	mi
 8007fb4:	f043 0320 	orrmi.w	r3, r3, #32
 8007fb8:	6029      	str	r1, [r5, #0]
 8007fba:	bf48      	it	mi
 8007fbc:	6023      	strmi	r3, [r4, #0]
 8007fbe:	b91e      	cbnz	r6, 8007fc8 <_printf_i+0x1a4>
 8007fc0:	6823      	ldr	r3, [r4, #0]
 8007fc2:	f023 0320 	bic.w	r3, r3, #32
 8007fc6:	6023      	str	r3, [r4, #0]
 8007fc8:	2310      	movs	r3, #16
 8007fca:	e7a7      	b.n	8007f1c <_printf_i+0xf8>
 8007fcc:	4824      	ldr	r0, [pc, #144]	; (8008060 <_printf_i+0x23c>)
 8007fce:	e7e4      	b.n	8007f9a <_printf_i+0x176>
 8007fd0:	4615      	mov	r5, r2
 8007fd2:	e7bd      	b.n	8007f50 <_printf_i+0x12c>
 8007fd4:	682b      	ldr	r3, [r5, #0]
 8007fd6:	6826      	ldr	r6, [r4, #0]
 8007fd8:	6961      	ldr	r1, [r4, #20]
 8007fda:	1d18      	adds	r0, r3, #4
 8007fdc:	6028      	str	r0, [r5, #0]
 8007fde:	0635      	lsls	r5, r6, #24
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	d501      	bpl.n	8007fe8 <_printf_i+0x1c4>
 8007fe4:	6019      	str	r1, [r3, #0]
 8007fe6:	e002      	b.n	8007fee <_printf_i+0x1ca>
 8007fe8:	0670      	lsls	r0, r6, #25
 8007fea:	d5fb      	bpl.n	8007fe4 <_printf_i+0x1c0>
 8007fec:	8019      	strh	r1, [r3, #0]
 8007fee:	2300      	movs	r3, #0
 8007ff0:	6123      	str	r3, [r4, #16]
 8007ff2:	4615      	mov	r5, r2
 8007ff4:	e7bc      	b.n	8007f70 <_printf_i+0x14c>
 8007ff6:	682b      	ldr	r3, [r5, #0]
 8007ff8:	1d1a      	adds	r2, r3, #4
 8007ffa:	602a      	str	r2, [r5, #0]
 8007ffc:	681d      	ldr	r5, [r3, #0]
 8007ffe:	6862      	ldr	r2, [r4, #4]
 8008000:	2100      	movs	r1, #0
 8008002:	4628      	mov	r0, r5
 8008004:	f7f8 f904 	bl	8000210 <memchr>
 8008008:	b108      	cbz	r0, 800800e <_printf_i+0x1ea>
 800800a:	1b40      	subs	r0, r0, r5
 800800c:	6060      	str	r0, [r4, #4]
 800800e:	6863      	ldr	r3, [r4, #4]
 8008010:	6123      	str	r3, [r4, #16]
 8008012:	2300      	movs	r3, #0
 8008014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008018:	e7aa      	b.n	8007f70 <_printf_i+0x14c>
 800801a:	6923      	ldr	r3, [r4, #16]
 800801c:	462a      	mov	r2, r5
 800801e:	4649      	mov	r1, r9
 8008020:	4640      	mov	r0, r8
 8008022:	47d0      	blx	sl
 8008024:	3001      	adds	r0, #1
 8008026:	d0ad      	beq.n	8007f84 <_printf_i+0x160>
 8008028:	6823      	ldr	r3, [r4, #0]
 800802a:	079b      	lsls	r3, r3, #30
 800802c:	d413      	bmi.n	8008056 <_printf_i+0x232>
 800802e:	68e0      	ldr	r0, [r4, #12]
 8008030:	9b03      	ldr	r3, [sp, #12]
 8008032:	4298      	cmp	r0, r3
 8008034:	bfb8      	it	lt
 8008036:	4618      	movlt	r0, r3
 8008038:	e7a6      	b.n	8007f88 <_printf_i+0x164>
 800803a:	2301      	movs	r3, #1
 800803c:	4632      	mov	r2, r6
 800803e:	4649      	mov	r1, r9
 8008040:	4640      	mov	r0, r8
 8008042:	47d0      	blx	sl
 8008044:	3001      	adds	r0, #1
 8008046:	d09d      	beq.n	8007f84 <_printf_i+0x160>
 8008048:	3501      	adds	r5, #1
 800804a:	68e3      	ldr	r3, [r4, #12]
 800804c:	9903      	ldr	r1, [sp, #12]
 800804e:	1a5b      	subs	r3, r3, r1
 8008050:	42ab      	cmp	r3, r5
 8008052:	dcf2      	bgt.n	800803a <_printf_i+0x216>
 8008054:	e7eb      	b.n	800802e <_printf_i+0x20a>
 8008056:	2500      	movs	r5, #0
 8008058:	f104 0619 	add.w	r6, r4, #25
 800805c:	e7f5      	b.n	800804a <_printf_i+0x226>
 800805e:	bf00      	nop
 8008060:	0800b876 	.word	0x0800b876
 8008064:	0800b887 	.word	0x0800b887

08008068 <std>:
 8008068:	2300      	movs	r3, #0
 800806a:	b510      	push	{r4, lr}
 800806c:	4604      	mov	r4, r0
 800806e:	e9c0 3300 	strd	r3, r3, [r0]
 8008072:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008076:	6083      	str	r3, [r0, #8]
 8008078:	8181      	strh	r1, [r0, #12]
 800807a:	6643      	str	r3, [r0, #100]	; 0x64
 800807c:	81c2      	strh	r2, [r0, #14]
 800807e:	6183      	str	r3, [r0, #24]
 8008080:	4619      	mov	r1, r3
 8008082:	2208      	movs	r2, #8
 8008084:	305c      	adds	r0, #92	; 0x5c
 8008086:	f000 f914 	bl	80082b2 <memset>
 800808a:	4b0d      	ldr	r3, [pc, #52]	; (80080c0 <std+0x58>)
 800808c:	6263      	str	r3, [r4, #36]	; 0x24
 800808e:	4b0d      	ldr	r3, [pc, #52]	; (80080c4 <std+0x5c>)
 8008090:	62a3      	str	r3, [r4, #40]	; 0x28
 8008092:	4b0d      	ldr	r3, [pc, #52]	; (80080c8 <std+0x60>)
 8008094:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008096:	4b0d      	ldr	r3, [pc, #52]	; (80080cc <std+0x64>)
 8008098:	6323      	str	r3, [r4, #48]	; 0x30
 800809a:	4b0d      	ldr	r3, [pc, #52]	; (80080d0 <std+0x68>)
 800809c:	6224      	str	r4, [r4, #32]
 800809e:	429c      	cmp	r4, r3
 80080a0:	d006      	beq.n	80080b0 <std+0x48>
 80080a2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80080a6:	4294      	cmp	r4, r2
 80080a8:	d002      	beq.n	80080b0 <std+0x48>
 80080aa:	33d0      	adds	r3, #208	; 0xd0
 80080ac:	429c      	cmp	r4, r3
 80080ae:	d105      	bne.n	80080bc <std+0x54>
 80080b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80080b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080b8:	f000 b978 	b.w	80083ac <__retarget_lock_init_recursive>
 80080bc:	bd10      	pop	{r4, pc}
 80080be:	bf00      	nop
 80080c0:	0800822d 	.word	0x0800822d
 80080c4:	0800824f 	.word	0x0800824f
 80080c8:	08008287 	.word	0x08008287
 80080cc:	080082ab 	.word	0x080082ab
 80080d0:	200050b4 	.word	0x200050b4

080080d4 <stdio_exit_handler>:
 80080d4:	4a02      	ldr	r2, [pc, #8]	; (80080e0 <stdio_exit_handler+0xc>)
 80080d6:	4903      	ldr	r1, [pc, #12]	; (80080e4 <stdio_exit_handler+0x10>)
 80080d8:	4803      	ldr	r0, [pc, #12]	; (80080e8 <stdio_exit_handler+0x14>)
 80080da:	f000 b869 	b.w	80081b0 <_fwalk_sglue>
 80080de:	bf00      	nop
 80080e0:	20000018 	.word	0x20000018
 80080e4:	08009d79 	.word	0x08009d79
 80080e8:	20000024 	.word	0x20000024

080080ec <cleanup_stdio>:
 80080ec:	6841      	ldr	r1, [r0, #4]
 80080ee:	4b0c      	ldr	r3, [pc, #48]	; (8008120 <cleanup_stdio+0x34>)
 80080f0:	4299      	cmp	r1, r3
 80080f2:	b510      	push	{r4, lr}
 80080f4:	4604      	mov	r4, r0
 80080f6:	d001      	beq.n	80080fc <cleanup_stdio+0x10>
 80080f8:	f001 fe3e 	bl	8009d78 <_fflush_r>
 80080fc:	68a1      	ldr	r1, [r4, #8]
 80080fe:	4b09      	ldr	r3, [pc, #36]	; (8008124 <cleanup_stdio+0x38>)
 8008100:	4299      	cmp	r1, r3
 8008102:	d002      	beq.n	800810a <cleanup_stdio+0x1e>
 8008104:	4620      	mov	r0, r4
 8008106:	f001 fe37 	bl	8009d78 <_fflush_r>
 800810a:	68e1      	ldr	r1, [r4, #12]
 800810c:	4b06      	ldr	r3, [pc, #24]	; (8008128 <cleanup_stdio+0x3c>)
 800810e:	4299      	cmp	r1, r3
 8008110:	d004      	beq.n	800811c <cleanup_stdio+0x30>
 8008112:	4620      	mov	r0, r4
 8008114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008118:	f001 be2e 	b.w	8009d78 <_fflush_r>
 800811c:	bd10      	pop	{r4, pc}
 800811e:	bf00      	nop
 8008120:	200050b4 	.word	0x200050b4
 8008124:	2000511c 	.word	0x2000511c
 8008128:	20005184 	.word	0x20005184

0800812c <global_stdio_init.part.0>:
 800812c:	b510      	push	{r4, lr}
 800812e:	4b0b      	ldr	r3, [pc, #44]	; (800815c <global_stdio_init.part.0+0x30>)
 8008130:	4c0b      	ldr	r4, [pc, #44]	; (8008160 <global_stdio_init.part.0+0x34>)
 8008132:	4a0c      	ldr	r2, [pc, #48]	; (8008164 <global_stdio_init.part.0+0x38>)
 8008134:	601a      	str	r2, [r3, #0]
 8008136:	4620      	mov	r0, r4
 8008138:	2200      	movs	r2, #0
 800813a:	2104      	movs	r1, #4
 800813c:	f7ff ff94 	bl	8008068 <std>
 8008140:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008144:	2201      	movs	r2, #1
 8008146:	2109      	movs	r1, #9
 8008148:	f7ff ff8e 	bl	8008068 <std>
 800814c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008150:	2202      	movs	r2, #2
 8008152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008156:	2112      	movs	r1, #18
 8008158:	f7ff bf86 	b.w	8008068 <std>
 800815c:	200051ec 	.word	0x200051ec
 8008160:	200050b4 	.word	0x200050b4
 8008164:	080080d5 	.word	0x080080d5

08008168 <__sfp_lock_acquire>:
 8008168:	4801      	ldr	r0, [pc, #4]	; (8008170 <__sfp_lock_acquire+0x8>)
 800816a:	f000 b920 	b.w	80083ae <__retarget_lock_acquire_recursive>
 800816e:	bf00      	nop
 8008170:	200051f5 	.word	0x200051f5

08008174 <__sfp_lock_release>:
 8008174:	4801      	ldr	r0, [pc, #4]	; (800817c <__sfp_lock_release+0x8>)
 8008176:	f000 b91b 	b.w	80083b0 <__retarget_lock_release_recursive>
 800817a:	bf00      	nop
 800817c:	200051f5 	.word	0x200051f5

08008180 <__sinit>:
 8008180:	b510      	push	{r4, lr}
 8008182:	4604      	mov	r4, r0
 8008184:	f7ff fff0 	bl	8008168 <__sfp_lock_acquire>
 8008188:	6a23      	ldr	r3, [r4, #32]
 800818a:	b11b      	cbz	r3, 8008194 <__sinit+0x14>
 800818c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008190:	f7ff bff0 	b.w	8008174 <__sfp_lock_release>
 8008194:	4b04      	ldr	r3, [pc, #16]	; (80081a8 <__sinit+0x28>)
 8008196:	6223      	str	r3, [r4, #32]
 8008198:	4b04      	ldr	r3, [pc, #16]	; (80081ac <__sinit+0x2c>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d1f5      	bne.n	800818c <__sinit+0xc>
 80081a0:	f7ff ffc4 	bl	800812c <global_stdio_init.part.0>
 80081a4:	e7f2      	b.n	800818c <__sinit+0xc>
 80081a6:	bf00      	nop
 80081a8:	080080ed 	.word	0x080080ed
 80081ac:	200051ec 	.word	0x200051ec

080081b0 <_fwalk_sglue>:
 80081b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081b4:	4607      	mov	r7, r0
 80081b6:	4688      	mov	r8, r1
 80081b8:	4614      	mov	r4, r2
 80081ba:	2600      	movs	r6, #0
 80081bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081c0:	f1b9 0901 	subs.w	r9, r9, #1
 80081c4:	d505      	bpl.n	80081d2 <_fwalk_sglue+0x22>
 80081c6:	6824      	ldr	r4, [r4, #0]
 80081c8:	2c00      	cmp	r4, #0
 80081ca:	d1f7      	bne.n	80081bc <_fwalk_sglue+0xc>
 80081cc:	4630      	mov	r0, r6
 80081ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081d2:	89ab      	ldrh	r3, [r5, #12]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d907      	bls.n	80081e8 <_fwalk_sglue+0x38>
 80081d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081dc:	3301      	adds	r3, #1
 80081de:	d003      	beq.n	80081e8 <_fwalk_sglue+0x38>
 80081e0:	4629      	mov	r1, r5
 80081e2:	4638      	mov	r0, r7
 80081e4:	47c0      	blx	r8
 80081e6:	4306      	orrs	r6, r0
 80081e8:	3568      	adds	r5, #104	; 0x68
 80081ea:	e7e9      	b.n	80081c0 <_fwalk_sglue+0x10>

080081ec <siprintf>:
 80081ec:	b40e      	push	{r1, r2, r3}
 80081ee:	b500      	push	{lr}
 80081f0:	b09c      	sub	sp, #112	; 0x70
 80081f2:	ab1d      	add	r3, sp, #116	; 0x74
 80081f4:	9002      	str	r0, [sp, #8]
 80081f6:	9006      	str	r0, [sp, #24]
 80081f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80081fc:	4809      	ldr	r0, [pc, #36]	; (8008224 <siprintf+0x38>)
 80081fe:	9107      	str	r1, [sp, #28]
 8008200:	9104      	str	r1, [sp, #16]
 8008202:	4909      	ldr	r1, [pc, #36]	; (8008228 <siprintf+0x3c>)
 8008204:	f853 2b04 	ldr.w	r2, [r3], #4
 8008208:	9105      	str	r1, [sp, #20]
 800820a:	6800      	ldr	r0, [r0, #0]
 800820c:	9301      	str	r3, [sp, #4]
 800820e:	a902      	add	r1, sp, #8
 8008210:	f001 fc2e 	bl	8009a70 <_svfiprintf_r>
 8008214:	9b02      	ldr	r3, [sp, #8]
 8008216:	2200      	movs	r2, #0
 8008218:	701a      	strb	r2, [r3, #0]
 800821a:	b01c      	add	sp, #112	; 0x70
 800821c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008220:	b003      	add	sp, #12
 8008222:	4770      	bx	lr
 8008224:	20000070 	.word	0x20000070
 8008228:	ffff0208 	.word	0xffff0208

0800822c <__sread>:
 800822c:	b510      	push	{r4, lr}
 800822e:	460c      	mov	r4, r1
 8008230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008234:	f000 f86c 	bl	8008310 <_read_r>
 8008238:	2800      	cmp	r0, #0
 800823a:	bfab      	itete	ge
 800823c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800823e:	89a3      	ldrhlt	r3, [r4, #12]
 8008240:	181b      	addge	r3, r3, r0
 8008242:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008246:	bfac      	ite	ge
 8008248:	6563      	strge	r3, [r4, #84]	; 0x54
 800824a:	81a3      	strhlt	r3, [r4, #12]
 800824c:	bd10      	pop	{r4, pc}

0800824e <__swrite>:
 800824e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008252:	461f      	mov	r7, r3
 8008254:	898b      	ldrh	r3, [r1, #12]
 8008256:	05db      	lsls	r3, r3, #23
 8008258:	4605      	mov	r5, r0
 800825a:	460c      	mov	r4, r1
 800825c:	4616      	mov	r6, r2
 800825e:	d505      	bpl.n	800826c <__swrite+0x1e>
 8008260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008264:	2302      	movs	r3, #2
 8008266:	2200      	movs	r2, #0
 8008268:	f000 f840 	bl	80082ec <_lseek_r>
 800826c:	89a3      	ldrh	r3, [r4, #12]
 800826e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008272:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008276:	81a3      	strh	r3, [r4, #12]
 8008278:	4632      	mov	r2, r6
 800827a:	463b      	mov	r3, r7
 800827c:	4628      	mov	r0, r5
 800827e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008282:	f000 b857 	b.w	8008334 <_write_r>

08008286 <__sseek>:
 8008286:	b510      	push	{r4, lr}
 8008288:	460c      	mov	r4, r1
 800828a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800828e:	f000 f82d 	bl	80082ec <_lseek_r>
 8008292:	1c43      	adds	r3, r0, #1
 8008294:	89a3      	ldrh	r3, [r4, #12]
 8008296:	bf15      	itete	ne
 8008298:	6560      	strne	r0, [r4, #84]	; 0x54
 800829a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800829e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80082a2:	81a3      	strheq	r3, [r4, #12]
 80082a4:	bf18      	it	ne
 80082a6:	81a3      	strhne	r3, [r4, #12]
 80082a8:	bd10      	pop	{r4, pc}

080082aa <__sclose>:
 80082aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ae:	f000 b80d 	b.w	80082cc <_close_r>

080082b2 <memset>:
 80082b2:	4402      	add	r2, r0
 80082b4:	4603      	mov	r3, r0
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d100      	bne.n	80082bc <memset+0xa>
 80082ba:	4770      	bx	lr
 80082bc:	f803 1b01 	strb.w	r1, [r3], #1
 80082c0:	e7f9      	b.n	80082b6 <memset+0x4>
	...

080082c4 <_localeconv_r>:
 80082c4:	4800      	ldr	r0, [pc, #0]	; (80082c8 <_localeconv_r+0x4>)
 80082c6:	4770      	bx	lr
 80082c8:	20000164 	.word	0x20000164

080082cc <_close_r>:
 80082cc:	b538      	push	{r3, r4, r5, lr}
 80082ce:	4d06      	ldr	r5, [pc, #24]	; (80082e8 <_close_r+0x1c>)
 80082d0:	2300      	movs	r3, #0
 80082d2:	4604      	mov	r4, r0
 80082d4:	4608      	mov	r0, r1
 80082d6:	602b      	str	r3, [r5, #0]
 80082d8:	f7f9 fd67 	bl	8001daa <_close>
 80082dc:	1c43      	adds	r3, r0, #1
 80082de:	d102      	bne.n	80082e6 <_close_r+0x1a>
 80082e0:	682b      	ldr	r3, [r5, #0]
 80082e2:	b103      	cbz	r3, 80082e6 <_close_r+0x1a>
 80082e4:	6023      	str	r3, [r4, #0]
 80082e6:	bd38      	pop	{r3, r4, r5, pc}
 80082e8:	200051f0 	.word	0x200051f0

080082ec <_lseek_r>:
 80082ec:	b538      	push	{r3, r4, r5, lr}
 80082ee:	4d07      	ldr	r5, [pc, #28]	; (800830c <_lseek_r+0x20>)
 80082f0:	4604      	mov	r4, r0
 80082f2:	4608      	mov	r0, r1
 80082f4:	4611      	mov	r1, r2
 80082f6:	2200      	movs	r2, #0
 80082f8:	602a      	str	r2, [r5, #0]
 80082fa:	461a      	mov	r2, r3
 80082fc:	f7f9 fd7c 	bl	8001df8 <_lseek>
 8008300:	1c43      	adds	r3, r0, #1
 8008302:	d102      	bne.n	800830a <_lseek_r+0x1e>
 8008304:	682b      	ldr	r3, [r5, #0]
 8008306:	b103      	cbz	r3, 800830a <_lseek_r+0x1e>
 8008308:	6023      	str	r3, [r4, #0]
 800830a:	bd38      	pop	{r3, r4, r5, pc}
 800830c:	200051f0 	.word	0x200051f0

08008310 <_read_r>:
 8008310:	b538      	push	{r3, r4, r5, lr}
 8008312:	4d07      	ldr	r5, [pc, #28]	; (8008330 <_read_r+0x20>)
 8008314:	4604      	mov	r4, r0
 8008316:	4608      	mov	r0, r1
 8008318:	4611      	mov	r1, r2
 800831a:	2200      	movs	r2, #0
 800831c:	602a      	str	r2, [r5, #0]
 800831e:	461a      	mov	r2, r3
 8008320:	f7f9 fd0a 	bl	8001d38 <_read>
 8008324:	1c43      	adds	r3, r0, #1
 8008326:	d102      	bne.n	800832e <_read_r+0x1e>
 8008328:	682b      	ldr	r3, [r5, #0]
 800832a:	b103      	cbz	r3, 800832e <_read_r+0x1e>
 800832c:	6023      	str	r3, [r4, #0]
 800832e:	bd38      	pop	{r3, r4, r5, pc}
 8008330:	200051f0 	.word	0x200051f0

08008334 <_write_r>:
 8008334:	b538      	push	{r3, r4, r5, lr}
 8008336:	4d07      	ldr	r5, [pc, #28]	; (8008354 <_write_r+0x20>)
 8008338:	4604      	mov	r4, r0
 800833a:	4608      	mov	r0, r1
 800833c:	4611      	mov	r1, r2
 800833e:	2200      	movs	r2, #0
 8008340:	602a      	str	r2, [r5, #0]
 8008342:	461a      	mov	r2, r3
 8008344:	f7f9 fd15 	bl	8001d72 <_write>
 8008348:	1c43      	adds	r3, r0, #1
 800834a:	d102      	bne.n	8008352 <_write_r+0x1e>
 800834c:	682b      	ldr	r3, [r5, #0]
 800834e:	b103      	cbz	r3, 8008352 <_write_r+0x1e>
 8008350:	6023      	str	r3, [r4, #0]
 8008352:	bd38      	pop	{r3, r4, r5, pc}
 8008354:	200051f0 	.word	0x200051f0

08008358 <__errno>:
 8008358:	4b01      	ldr	r3, [pc, #4]	; (8008360 <__errno+0x8>)
 800835a:	6818      	ldr	r0, [r3, #0]
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop
 8008360:	20000070 	.word	0x20000070

08008364 <__libc_init_array>:
 8008364:	b570      	push	{r4, r5, r6, lr}
 8008366:	4d0d      	ldr	r5, [pc, #52]	; (800839c <__libc_init_array+0x38>)
 8008368:	4c0d      	ldr	r4, [pc, #52]	; (80083a0 <__libc_init_array+0x3c>)
 800836a:	1b64      	subs	r4, r4, r5
 800836c:	10a4      	asrs	r4, r4, #2
 800836e:	2600      	movs	r6, #0
 8008370:	42a6      	cmp	r6, r4
 8008372:	d109      	bne.n	8008388 <__libc_init_array+0x24>
 8008374:	4d0b      	ldr	r5, [pc, #44]	; (80083a4 <__libc_init_array+0x40>)
 8008376:	4c0c      	ldr	r4, [pc, #48]	; (80083a8 <__libc_init_array+0x44>)
 8008378:	f002 f894 	bl	800a4a4 <_init>
 800837c:	1b64      	subs	r4, r4, r5
 800837e:	10a4      	asrs	r4, r4, #2
 8008380:	2600      	movs	r6, #0
 8008382:	42a6      	cmp	r6, r4
 8008384:	d105      	bne.n	8008392 <__libc_init_array+0x2e>
 8008386:	bd70      	pop	{r4, r5, r6, pc}
 8008388:	f855 3b04 	ldr.w	r3, [r5], #4
 800838c:	4798      	blx	r3
 800838e:	3601      	adds	r6, #1
 8008390:	e7ee      	b.n	8008370 <__libc_init_array+0xc>
 8008392:	f855 3b04 	ldr.w	r3, [r5], #4
 8008396:	4798      	blx	r3
 8008398:	3601      	adds	r6, #1
 800839a:	e7f2      	b.n	8008382 <__libc_init_array+0x1e>
 800839c:	0800bbdc 	.word	0x0800bbdc
 80083a0:	0800bbdc 	.word	0x0800bbdc
 80083a4:	0800bbdc 	.word	0x0800bbdc
 80083a8:	0800bbe0 	.word	0x0800bbe0

080083ac <__retarget_lock_init_recursive>:
 80083ac:	4770      	bx	lr

080083ae <__retarget_lock_acquire_recursive>:
 80083ae:	4770      	bx	lr

080083b0 <__retarget_lock_release_recursive>:
 80083b0:	4770      	bx	lr

080083b2 <memcpy>:
 80083b2:	440a      	add	r2, r1
 80083b4:	4291      	cmp	r1, r2
 80083b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80083ba:	d100      	bne.n	80083be <memcpy+0xc>
 80083bc:	4770      	bx	lr
 80083be:	b510      	push	{r4, lr}
 80083c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083c8:	4291      	cmp	r1, r2
 80083ca:	d1f9      	bne.n	80083c0 <memcpy+0xe>
 80083cc:	bd10      	pop	{r4, pc}

080083ce <quorem>:
 80083ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d2:	6903      	ldr	r3, [r0, #16]
 80083d4:	690c      	ldr	r4, [r1, #16]
 80083d6:	42a3      	cmp	r3, r4
 80083d8:	4607      	mov	r7, r0
 80083da:	db7e      	blt.n	80084da <quorem+0x10c>
 80083dc:	3c01      	subs	r4, #1
 80083de:	f101 0814 	add.w	r8, r1, #20
 80083e2:	f100 0514 	add.w	r5, r0, #20
 80083e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80083ea:	9301      	str	r3, [sp, #4]
 80083ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80083f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80083f4:	3301      	adds	r3, #1
 80083f6:	429a      	cmp	r2, r3
 80083f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80083fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008400:	fbb2 f6f3 	udiv	r6, r2, r3
 8008404:	d331      	bcc.n	800846a <quorem+0x9c>
 8008406:	f04f 0e00 	mov.w	lr, #0
 800840a:	4640      	mov	r0, r8
 800840c:	46ac      	mov	ip, r5
 800840e:	46f2      	mov	sl, lr
 8008410:	f850 2b04 	ldr.w	r2, [r0], #4
 8008414:	b293      	uxth	r3, r2
 8008416:	fb06 e303 	mla	r3, r6, r3, lr
 800841a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800841e:	0c1a      	lsrs	r2, r3, #16
 8008420:	b29b      	uxth	r3, r3
 8008422:	ebaa 0303 	sub.w	r3, sl, r3
 8008426:	f8dc a000 	ldr.w	sl, [ip]
 800842a:	fa13 f38a 	uxtah	r3, r3, sl
 800842e:	fb06 220e 	mla	r2, r6, lr, r2
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	9b00      	ldr	r3, [sp, #0]
 8008436:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800843a:	b292      	uxth	r2, r2
 800843c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008440:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008444:	f8bd 3000 	ldrh.w	r3, [sp]
 8008448:	4581      	cmp	r9, r0
 800844a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800844e:	f84c 3b04 	str.w	r3, [ip], #4
 8008452:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008456:	d2db      	bcs.n	8008410 <quorem+0x42>
 8008458:	f855 300b 	ldr.w	r3, [r5, fp]
 800845c:	b92b      	cbnz	r3, 800846a <quorem+0x9c>
 800845e:	9b01      	ldr	r3, [sp, #4]
 8008460:	3b04      	subs	r3, #4
 8008462:	429d      	cmp	r5, r3
 8008464:	461a      	mov	r2, r3
 8008466:	d32c      	bcc.n	80084c2 <quorem+0xf4>
 8008468:	613c      	str	r4, [r7, #16]
 800846a:	4638      	mov	r0, r7
 800846c:	f001 f9a6 	bl	80097bc <__mcmp>
 8008470:	2800      	cmp	r0, #0
 8008472:	db22      	blt.n	80084ba <quorem+0xec>
 8008474:	3601      	adds	r6, #1
 8008476:	4629      	mov	r1, r5
 8008478:	2000      	movs	r0, #0
 800847a:	f858 2b04 	ldr.w	r2, [r8], #4
 800847e:	f8d1 c000 	ldr.w	ip, [r1]
 8008482:	b293      	uxth	r3, r2
 8008484:	1ac3      	subs	r3, r0, r3
 8008486:	0c12      	lsrs	r2, r2, #16
 8008488:	fa13 f38c 	uxtah	r3, r3, ip
 800848c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008490:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008494:	b29b      	uxth	r3, r3
 8008496:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800849a:	45c1      	cmp	r9, r8
 800849c:	f841 3b04 	str.w	r3, [r1], #4
 80084a0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80084a4:	d2e9      	bcs.n	800847a <quorem+0xac>
 80084a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084ae:	b922      	cbnz	r2, 80084ba <quorem+0xec>
 80084b0:	3b04      	subs	r3, #4
 80084b2:	429d      	cmp	r5, r3
 80084b4:	461a      	mov	r2, r3
 80084b6:	d30a      	bcc.n	80084ce <quorem+0x100>
 80084b8:	613c      	str	r4, [r7, #16]
 80084ba:	4630      	mov	r0, r6
 80084bc:	b003      	add	sp, #12
 80084be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084c2:	6812      	ldr	r2, [r2, #0]
 80084c4:	3b04      	subs	r3, #4
 80084c6:	2a00      	cmp	r2, #0
 80084c8:	d1ce      	bne.n	8008468 <quorem+0x9a>
 80084ca:	3c01      	subs	r4, #1
 80084cc:	e7c9      	b.n	8008462 <quorem+0x94>
 80084ce:	6812      	ldr	r2, [r2, #0]
 80084d0:	3b04      	subs	r3, #4
 80084d2:	2a00      	cmp	r2, #0
 80084d4:	d1f0      	bne.n	80084b8 <quorem+0xea>
 80084d6:	3c01      	subs	r4, #1
 80084d8:	e7eb      	b.n	80084b2 <quorem+0xe4>
 80084da:	2000      	movs	r0, #0
 80084dc:	e7ee      	b.n	80084bc <quorem+0xee>
	...

080084e0 <_dtoa_r>:
 80084e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e4:	ed2d 8b04 	vpush	{d8-d9}
 80084e8:	69c5      	ldr	r5, [r0, #28]
 80084ea:	b093      	sub	sp, #76	; 0x4c
 80084ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80084f0:	ec57 6b10 	vmov	r6, r7, d0
 80084f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80084f8:	9107      	str	r1, [sp, #28]
 80084fa:	4604      	mov	r4, r0
 80084fc:	920a      	str	r2, [sp, #40]	; 0x28
 80084fe:	930d      	str	r3, [sp, #52]	; 0x34
 8008500:	b975      	cbnz	r5, 8008520 <_dtoa_r+0x40>
 8008502:	2010      	movs	r0, #16
 8008504:	f000 fe2a 	bl	800915c <malloc>
 8008508:	4602      	mov	r2, r0
 800850a:	61e0      	str	r0, [r4, #28]
 800850c:	b920      	cbnz	r0, 8008518 <_dtoa_r+0x38>
 800850e:	4bae      	ldr	r3, [pc, #696]	; (80087c8 <_dtoa_r+0x2e8>)
 8008510:	21ef      	movs	r1, #239	; 0xef
 8008512:	48ae      	ldr	r0, [pc, #696]	; (80087cc <_dtoa_r+0x2ec>)
 8008514:	f001 fc82 	bl	8009e1c <__assert_func>
 8008518:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800851c:	6005      	str	r5, [r0, #0]
 800851e:	60c5      	str	r5, [r0, #12]
 8008520:	69e3      	ldr	r3, [r4, #28]
 8008522:	6819      	ldr	r1, [r3, #0]
 8008524:	b151      	cbz	r1, 800853c <_dtoa_r+0x5c>
 8008526:	685a      	ldr	r2, [r3, #4]
 8008528:	604a      	str	r2, [r1, #4]
 800852a:	2301      	movs	r3, #1
 800852c:	4093      	lsls	r3, r2
 800852e:	608b      	str	r3, [r1, #8]
 8008530:	4620      	mov	r0, r4
 8008532:	f000 ff07 	bl	8009344 <_Bfree>
 8008536:	69e3      	ldr	r3, [r4, #28]
 8008538:	2200      	movs	r2, #0
 800853a:	601a      	str	r2, [r3, #0]
 800853c:	1e3b      	subs	r3, r7, #0
 800853e:	bfbb      	ittet	lt
 8008540:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008544:	9303      	strlt	r3, [sp, #12]
 8008546:	2300      	movge	r3, #0
 8008548:	2201      	movlt	r2, #1
 800854a:	bfac      	ite	ge
 800854c:	f8c8 3000 	strge.w	r3, [r8]
 8008550:	f8c8 2000 	strlt.w	r2, [r8]
 8008554:	4b9e      	ldr	r3, [pc, #632]	; (80087d0 <_dtoa_r+0x2f0>)
 8008556:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800855a:	ea33 0308 	bics.w	r3, r3, r8
 800855e:	d11b      	bne.n	8008598 <_dtoa_r+0xb8>
 8008560:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008562:	f242 730f 	movw	r3, #9999	; 0x270f
 8008566:	6013      	str	r3, [r2, #0]
 8008568:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800856c:	4333      	orrs	r3, r6
 800856e:	f000 8593 	beq.w	8009098 <_dtoa_r+0xbb8>
 8008572:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008574:	b963      	cbnz	r3, 8008590 <_dtoa_r+0xb0>
 8008576:	4b97      	ldr	r3, [pc, #604]	; (80087d4 <_dtoa_r+0x2f4>)
 8008578:	e027      	b.n	80085ca <_dtoa_r+0xea>
 800857a:	4b97      	ldr	r3, [pc, #604]	; (80087d8 <_dtoa_r+0x2f8>)
 800857c:	9300      	str	r3, [sp, #0]
 800857e:	3308      	adds	r3, #8
 8008580:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008582:	6013      	str	r3, [r2, #0]
 8008584:	9800      	ldr	r0, [sp, #0]
 8008586:	b013      	add	sp, #76	; 0x4c
 8008588:	ecbd 8b04 	vpop	{d8-d9}
 800858c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008590:	4b90      	ldr	r3, [pc, #576]	; (80087d4 <_dtoa_r+0x2f4>)
 8008592:	9300      	str	r3, [sp, #0]
 8008594:	3303      	adds	r3, #3
 8008596:	e7f3      	b.n	8008580 <_dtoa_r+0xa0>
 8008598:	ed9d 7b02 	vldr	d7, [sp, #8]
 800859c:	2200      	movs	r2, #0
 800859e:	ec51 0b17 	vmov	r0, r1, d7
 80085a2:	eeb0 8a47 	vmov.f32	s16, s14
 80085a6:	eef0 8a67 	vmov.f32	s17, s15
 80085aa:	2300      	movs	r3, #0
 80085ac:	f7f8 faac 	bl	8000b08 <__aeabi_dcmpeq>
 80085b0:	4681      	mov	r9, r0
 80085b2:	b160      	cbz	r0, 80085ce <_dtoa_r+0xee>
 80085b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80085b6:	2301      	movs	r3, #1
 80085b8:	6013      	str	r3, [r2, #0]
 80085ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f000 8568 	beq.w	8009092 <_dtoa_r+0xbb2>
 80085c2:	4b86      	ldr	r3, [pc, #536]	; (80087dc <_dtoa_r+0x2fc>)
 80085c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80085c6:	6013      	str	r3, [r2, #0]
 80085c8:	3b01      	subs	r3, #1
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	e7da      	b.n	8008584 <_dtoa_r+0xa4>
 80085ce:	aa10      	add	r2, sp, #64	; 0x40
 80085d0:	a911      	add	r1, sp, #68	; 0x44
 80085d2:	4620      	mov	r0, r4
 80085d4:	eeb0 0a48 	vmov.f32	s0, s16
 80085d8:	eef0 0a68 	vmov.f32	s1, s17
 80085dc:	f001 f994 	bl	8009908 <__d2b>
 80085e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80085e4:	4682      	mov	sl, r0
 80085e6:	2d00      	cmp	r5, #0
 80085e8:	d07f      	beq.n	80086ea <_dtoa_r+0x20a>
 80085ea:	ee18 3a90 	vmov	r3, s17
 80085ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085f2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80085f6:	ec51 0b18 	vmov	r0, r1, d8
 80085fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80085fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008602:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008606:	4619      	mov	r1, r3
 8008608:	2200      	movs	r2, #0
 800860a:	4b75      	ldr	r3, [pc, #468]	; (80087e0 <_dtoa_r+0x300>)
 800860c:	f7f7 fe5c 	bl	80002c8 <__aeabi_dsub>
 8008610:	a367      	add	r3, pc, #412	; (adr r3, 80087b0 <_dtoa_r+0x2d0>)
 8008612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008616:	f7f8 f80f 	bl	8000638 <__aeabi_dmul>
 800861a:	a367      	add	r3, pc, #412	; (adr r3, 80087b8 <_dtoa_r+0x2d8>)
 800861c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008620:	f7f7 fe54 	bl	80002cc <__adddf3>
 8008624:	4606      	mov	r6, r0
 8008626:	4628      	mov	r0, r5
 8008628:	460f      	mov	r7, r1
 800862a:	f7f7 ff9b 	bl	8000564 <__aeabi_i2d>
 800862e:	a364      	add	r3, pc, #400	; (adr r3, 80087c0 <_dtoa_r+0x2e0>)
 8008630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008634:	f7f8 f800 	bl	8000638 <__aeabi_dmul>
 8008638:	4602      	mov	r2, r0
 800863a:	460b      	mov	r3, r1
 800863c:	4630      	mov	r0, r6
 800863e:	4639      	mov	r1, r7
 8008640:	f7f7 fe44 	bl	80002cc <__adddf3>
 8008644:	4606      	mov	r6, r0
 8008646:	460f      	mov	r7, r1
 8008648:	f7f8 faa6 	bl	8000b98 <__aeabi_d2iz>
 800864c:	2200      	movs	r2, #0
 800864e:	4683      	mov	fp, r0
 8008650:	2300      	movs	r3, #0
 8008652:	4630      	mov	r0, r6
 8008654:	4639      	mov	r1, r7
 8008656:	f7f8 fa61 	bl	8000b1c <__aeabi_dcmplt>
 800865a:	b148      	cbz	r0, 8008670 <_dtoa_r+0x190>
 800865c:	4658      	mov	r0, fp
 800865e:	f7f7 ff81 	bl	8000564 <__aeabi_i2d>
 8008662:	4632      	mov	r2, r6
 8008664:	463b      	mov	r3, r7
 8008666:	f7f8 fa4f 	bl	8000b08 <__aeabi_dcmpeq>
 800866a:	b908      	cbnz	r0, 8008670 <_dtoa_r+0x190>
 800866c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008670:	f1bb 0f16 	cmp.w	fp, #22
 8008674:	d857      	bhi.n	8008726 <_dtoa_r+0x246>
 8008676:	4b5b      	ldr	r3, [pc, #364]	; (80087e4 <_dtoa_r+0x304>)
 8008678:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800867c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008680:	ec51 0b18 	vmov	r0, r1, d8
 8008684:	f7f8 fa4a 	bl	8000b1c <__aeabi_dcmplt>
 8008688:	2800      	cmp	r0, #0
 800868a:	d04e      	beq.n	800872a <_dtoa_r+0x24a>
 800868c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008690:	2300      	movs	r3, #0
 8008692:	930c      	str	r3, [sp, #48]	; 0x30
 8008694:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008696:	1b5b      	subs	r3, r3, r5
 8008698:	1e5a      	subs	r2, r3, #1
 800869a:	bf45      	ittet	mi
 800869c:	f1c3 0301 	rsbmi	r3, r3, #1
 80086a0:	9305      	strmi	r3, [sp, #20]
 80086a2:	2300      	movpl	r3, #0
 80086a4:	2300      	movmi	r3, #0
 80086a6:	9206      	str	r2, [sp, #24]
 80086a8:	bf54      	ite	pl
 80086aa:	9305      	strpl	r3, [sp, #20]
 80086ac:	9306      	strmi	r3, [sp, #24]
 80086ae:	f1bb 0f00 	cmp.w	fp, #0
 80086b2:	db3c      	blt.n	800872e <_dtoa_r+0x24e>
 80086b4:	9b06      	ldr	r3, [sp, #24]
 80086b6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80086ba:	445b      	add	r3, fp
 80086bc:	9306      	str	r3, [sp, #24]
 80086be:	2300      	movs	r3, #0
 80086c0:	9308      	str	r3, [sp, #32]
 80086c2:	9b07      	ldr	r3, [sp, #28]
 80086c4:	2b09      	cmp	r3, #9
 80086c6:	d868      	bhi.n	800879a <_dtoa_r+0x2ba>
 80086c8:	2b05      	cmp	r3, #5
 80086ca:	bfc4      	itt	gt
 80086cc:	3b04      	subgt	r3, #4
 80086ce:	9307      	strgt	r3, [sp, #28]
 80086d0:	9b07      	ldr	r3, [sp, #28]
 80086d2:	f1a3 0302 	sub.w	r3, r3, #2
 80086d6:	bfcc      	ite	gt
 80086d8:	2500      	movgt	r5, #0
 80086da:	2501      	movle	r5, #1
 80086dc:	2b03      	cmp	r3, #3
 80086de:	f200 8085 	bhi.w	80087ec <_dtoa_r+0x30c>
 80086e2:	e8df f003 	tbb	[pc, r3]
 80086e6:	3b2e      	.short	0x3b2e
 80086e8:	5839      	.short	0x5839
 80086ea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80086ee:	441d      	add	r5, r3
 80086f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80086f4:	2b20      	cmp	r3, #32
 80086f6:	bfc1      	itttt	gt
 80086f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80086fc:	fa08 f803 	lslgt.w	r8, r8, r3
 8008700:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008704:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008708:	bfd6      	itet	le
 800870a:	f1c3 0320 	rsble	r3, r3, #32
 800870e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008712:	fa06 f003 	lslle.w	r0, r6, r3
 8008716:	f7f7 ff15 	bl	8000544 <__aeabi_ui2d>
 800871a:	2201      	movs	r2, #1
 800871c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008720:	3d01      	subs	r5, #1
 8008722:	920e      	str	r2, [sp, #56]	; 0x38
 8008724:	e76f      	b.n	8008606 <_dtoa_r+0x126>
 8008726:	2301      	movs	r3, #1
 8008728:	e7b3      	b.n	8008692 <_dtoa_r+0x1b2>
 800872a:	900c      	str	r0, [sp, #48]	; 0x30
 800872c:	e7b2      	b.n	8008694 <_dtoa_r+0x1b4>
 800872e:	9b05      	ldr	r3, [sp, #20]
 8008730:	eba3 030b 	sub.w	r3, r3, fp
 8008734:	9305      	str	r3, [sp, #20]
 8008736:	f1cb 0300 	rsb	r3, fp, #0
 800873a:	9308      	str	r3, [sp, #32]
 800873c:	2300      	movs	r3, #0
 800873e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008740:	e7bf      	b.n	80086c2 <_dtoa_r+0x1e2>
 8008742:	2300      	movs	r3, #0
 8008744:	9309      	str	r3, [sp, #36]	; 0x24
 8008746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008748:	2b00      	cmp	r3, #0
 800874a:	dc52      	bgt.n	80087f2 <_dtoa_r+0x312>
 800874c:	2301      	movs	r3, #1
 800874e:	9301      	str	r3, [sp, #4]
 8008750:	9304      	str	r3, [sp, #16]
 8008752:	461a      	mov	r2, r3
 8008754:	920a      	str	r2, [sp, #40]	; 0x28
 8008756:	e00b      	b.n	8008770 <_dtoa_r+0x290>
 8008758:	2301      	movs	r3, #1
 800875a:	e7f3      	b.n	8008744 <_dtoa_r+0x264>
 800875c:	2300      	movs	r3, #0
 800875e:	9309      	str	r3, [sp, #36]	; 0x24
 8008760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008762:	445b      	add	r3, fp
 8008764:	9301      	str	r3, [sp, #4]
 8008766:	3301      	adds	r3, #1
 8008768:	2b01      	cmp	r3, #1
 800876a:	9304      	str	r3, [sp, #16]
 800876c:	bfb8      	it	lt
 800876e:	2301      	movlt	r3, #1
 8008770:	69e0      	ldr	r0, [r4, #28]
 8008772:	2100      	movs	r1, #0
 8008774:	2204      	movs	r2, #4
 8008776:	f102 0614 	add.w	r6, r2, #20
 800877a:	429e      	cmp	r6, r3
 800877c:	d93d      	bls.n	80087fa <_dtoa_r+0x31a>
 800877e:	6041      	str	r1, [r0, #4]
 8008780:	4620      	mov	r0, r4
 8008782:	f000 fd9f 	bl	80092c4 <_Balloc>
 8008786:	9000      	str	r0, [sp, #0]
 8008788:	2800      	cmp	r0, #0
 800878a:	d139      	bne.n	8008800 <_dtoa_r+0x320>
 800878c:	4b16      	ldr	r3, [pc, #88]	; (80087e8 <_dtoa_r+0x308>)
 800878e:	4602      	mov	r2, r0
 8008790:	f240 11af 	movw	r1, #431	; 0x1af
 8008794:	e6bd      	b.n	8008512 <_dtoa_r+0x32>
 8008796:	2301      	movs	r3, #1
 8008798:	e7e1      	b.n	800875e <_dtoa_r+0x27e>
 800879a:	2501      	movs	r5, #1
 800879c:	2300      	movs	r3, #0
 800879e:	9307      	str	r3, [sp, #28]
 80087a0:	9509      	str	r5, [sp, #36]	; 0x24
 80087a2:	f04f 33ff 	mov.w	r3, #4294967295
 80087a6:	9301      	str	r3, [sp, #4]
 80087a8:	9304      	str	r3, [sp, #16]
 80087aa:	2200      	movs	r2, #0
 80087ac:	2312      	movs	r3, #18
 80087ae:	e7d1      	b.n	8008754 <_dtoa_r+0x274>
 80087b0:	636f4361 	.word	0x636f4361
 80087b4:	3fd287a7 	.word	0x3fd287a7
 80087b8:	8b60c8b3 	.word	0x8b60c8b3
 80087bc:	3fc68a28 	.word	0x3fc68a28
 80087c0:	509f79fb 	.word	0x509f79fb
 80087c4:	3fd34413 	.word	0x3fd34413
 80087c8:	0800b8a5 	.word	0x0800b8a5
 80087cc:	0800b8bc 	.word	0x0800b8bc
 80087d0:	7ff00000 	.word	0x7ff00000
 80087d4:	0800b8a1 	.word	0x0800b8a1
 80087d8:	0800b898 	.word	0x0800b898
 80087dc:	0800b875 	.word	0x0800b875
 80087e0:	3ff80000 	.word	0x3ff80000
 80087e4:	0800b9a8 	.word	0x0800b9a8
 80087e8:	0800b914 	.word	0x0800b914
 80087ec:	2301      	movs	r3, #1
 80087ee:	9309      	str	r3, [sp, #36]	; 0x24
 80087f0:	e7d7      	b.n	80087a2 <_dtoa_r+0x2c2>
 80087f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087f4:	9301      	str	r3, [sp, #4]
 80087f6:	9304      	str	r3, [sp, #16]
 80087f8:	e7ba      	b.n	8008770 <_dtoa_r+0x290>
 80087fa:	3101      	adds	r1, #1
 80087fc:	0052      	lsls	r2, r2, #1
 80087fe:	e7ba      	b.n	8008776 <_dtoa_r+0x296>
 8008800:	69e3      	ldr	r3, [r4, #28]
 8008802:	9a00      	ldr	r2, [sp, #0]
 8008804:	601a      	str	r2, [r3, #0]
 8008806:	9b04      	ldr	r3, [sp, #16]
 8008808:	2b0e      	cmp	r3, #14
 800880a:	f200 80a8 	bhi.w	800895e <_dtoa_r+0x47e>
 800880e:	2d00      	cmp	r5, #0
 8008810:	f000 80a5 	beq.w	800895e <_dtoa_r+0x47e>
 8008814:	f1bb 0f00 	cmp.w	fp, #0
 8008818:	dd38      	ble.n	800888c <_dtoa_r+0x3ac>
 800881a:	4bc0      	ldr	r3, [pc, #768]	; (8008b1c <_dtoa_r+0x63c>)
 800881c:	f00b 020f 	and.w	r2, fp, #15
 8008820:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008824:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008828:	e9d3 6700 	ldrd	r6, r7, [r3]
 800882c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008830:	d019      	beq.n	8008866 <_dtoa_r+0x386>
 8008832:	4bbb      	ldr	r3, [pc, #748]	; (8008b20 <_dtoa_r+0x640>)
 8008834:	ec51 0b18 	vmov	r0, r1, d8
 8008838:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800883c:	f7f8 f826 	bl	800088c <__aeabi_ddiv>
 8008840:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008844:	f008 080f 	and.w	r8, r8, #15
 8008848:	2503      	movs	r5, #3
 800884a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008b20 <_dtoa_r+0x640>
 800884e:	f1b8 0f00 	cmp.w	r8, #0
 8008852:	d10a      	bne.n	800886a <_dtoa_r+0x38a>
 8008854:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008858:	4632      	mov	r2, r6
 800885a:	463b      	mov	r3, r7
 800885c:	f7f8 f816 	bl	800088c <__aeabi_ddiv>
 8008860:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008864:	e02b      	b.n	80088be <_dtoa_r+0x3de>
 8008866:	2502      	movs	r5, #2
 8008868:	e7ef      	b.n	800884a <_dtoa_r+0x36a>
 800886a:	f018 0f01 	tst.w	r8, #1
 800886e:	d008      	beq.n	8008882 <_dtoa_r+0x3a2>
 8008870:	4630      	mov	r0, r6
 8008872:	4639      	mov	r1, r7
 8008874:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008878:	f7f7 fede 	bl	8000638 <__aeabi_dmul>
 800887c:	3501      	adds	r5, #1
 800887e:	4606      	mov	r6, r0
 8008880:	460f      	mov	r7, r1
 8008882:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008886:	f109 0908 	add.w	r9, r9, #8
 800888a:	e7e0      	b.n	800884e <_dtoa_r+0x36e>
 800888c:	f000 809f 	beq.w	80089ce <_dtoa_r+0x4ee>
 8008890:	f1cb 0600 	rsb	r6, fp, #0
 8008894:	4ba1      	ldr	r3, [pc, #644]	; (8008b1c <_dtoa_r+0x63c>)
 8008896:	4fa2      	ldr	r7, [pc, #648]	; (8008b20 <_dtoa_r+0x640>)
 8008898:	f006 020f 	and.w	r2, r6, #15
 800889c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a4:	ec51 0b18 	vmov	r0, r1, d8
 80088a8:	f7f7 fec6 	bl	8000638 <__aeabi_dmul>
 80088ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088b0:	1136      	asrs	r6, r6, #4
 80088b2:	2300      	movs	r3, #0
 80088b4:	2502      	movs	r5, #2
 80088b6:	2e00      	cmp	r6, #0
 80088b8:	d17e      	bne.n	80089b8 <_dtoa_r+0x4d8>
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1d0      	bne.n	8008860 <_dtoa_r+0x380>
 80088be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088c0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f000 8084 	beq.w	80089d2 <_dtoa_r+0x4f2>
 80088ca:	4b96      	ldr	r3, [pc, #600]	; (8008b24 <_dtoa_r+0x644>)
 80088cc:	2200      	movs	r2, #0
 80088ce:	4640      	mov	r0, r8
 80088d0:	4649      	mov	r1, r9
 80088d2:	f7f8 f923 	bl	8000b1c <__aeabi_dcmplt>
 80088d6:	2800      	cmp	r0, #0
 80088d8:	d07b      	beq.n	80089d2 <_dtoa_r+0x4f2>
 80088da:	9b04      	ldr	r3, [sp, #16]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d078      	beq.n	80089d2 <_dtoa_r+0x4f2>
 80088e0:	9b01      	ldr	r3, [sp, #4]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	dd39      	ble.n	800895a <_dtoa_r+0x47a>
 80088e6:	4b90      	ldr	r3, [pc, #576]	; (8008b28 <_dtoa_r+0x648>)
 80088e8:	2200      	movs	r2, #0
 80088ea:	4640      	mov	r0, r8
 80088ec:	4649      	mov	r1, r9
 80088ee:	f7f7 fea3 	bl	8000638 <__aeabi_dmul>
 80088f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088f6:	9e01      	ldr	r6, [sp, #4]
 80088f8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80088fc:	3501      	adds	r5, #1
 80088fe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008902:	4628      	mov	r0, r5
 8008904:	f7f7 fe2e 	bl	8000564 <__aeabi_i2d>
 8008908:	4642      	mov	r2, r8
 800890a:	464b      	mov	r3, r9
 800890c:	f7f7 fe94 	bl	8000638 <__aeabi_dmul>
 8008910:	4b86      	ldr	r3, [pc, #536]	; (8008b2c <_dtoa_r+0x64c>)
 8008912:	2200      	movs	r2, #0
 8008914:	f7f7 fcda 	bl	80002cc <__adddf3>
 8008918:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800891c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008920:	9303      	str	r3, [sp, #12]
 8008922:	2e00      	cmp	r6, #0
 8008924:	d158      	bne.n	80089d8 <_dtoa_r+0x4f8>
 8008926:	4b82      	ldr	r3, [pc, #520]	; (8008b30 <_dtoa_r+0x650>)
 8008928:	2200      	movs	r2, #0
 800892a:	4640      	mov	r0, r8
 800892c:	4649      	mov	r1, r9
 800892e:	f7f7 fccb 	bl	80002c8 <__aeabi_dsub>
 8008932:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008936:	4680      	mov	r8, r0
 8008938:	4689      	mov	r9, r1
 800893a:	f7f8 f90d 	bl	8000b58 <__aeabi_dcmpgt>
 800893e:	2800      	cmp	r0, #0
 8008940:	f040 8296 	bne.w	8008e70 <_dtoa_r+0x990>
 8008944:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008948:	4640      	mov	r0, r8
 800894a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800894e:	4649      	mov	r1, r9
 8008950:	f7f8 f8e4 	bl	8000b1c <__aeabi_dcmplt>
 8008954:	2800      	cmp	r0, #0
 8008956:	f040 8289 	bne.w	8008e6c <_dtoa_r+0x98c>
 800895a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800895e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008960:	2b00      	cmp	r3, #0
 8008962:	f2c0 814e 	blt.w	8008c02 <_dtoa_r+0x722>
 8008966:	f1bb 0f0e 	cmp.w	fp, #14
 800896a:	f300 814a 	bgt.w	8008c02 <_dtoa_r+0x722>
 800896e:	4b6b      	ldr	r3, [pc, #428]	; (8008b1c <_dtoa_r+0x63c>)
 8008970:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008974:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800897a:	2b00      	cmp	r3, #0
 800897c:	f280 80dc 	bge.w	8008b38 <_dtoa_r+0x658>
 8008980:	9b04      	ldr	r3, [sp, #16]
 8008982:	2b00      	cmp	r3, #0
 8008984:	f300 80d8 	bgt.w	8008b38 <_dtoa_r+0x658>
 8008988:	f040 826f 	bne.w	8008e6a <_dtoa_r+0x98a>
 800898c:	4b68      	ldr	r3, [pc, #416]	; (8008b30 <_dtoa_r+0x650>)
 800898e:	2200      	movs	r2, #0
 8008990:	4640      	mov	r0, r8
 8008992:	4649      	mov	r1, r9
 8008994:	f7f7 fe50 	bl	8000638 <__aeabi_dmul>
 8008998:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800899c:	f7f8 f8d2 	bl	8000b44 <__aeabi_dcmpge>
 80089a0:	9e04      	ldr	r6, [sp, #16]
 80089a2:	4637      	mov	r7, r6
 80089a4:	2800      	cmp	r0, #0
 80089a6:	f040 8245 	bne.w	8008e34 <_dtoa_r+0x954>
 80089aa:	9d00      	ldr	r5, [sp, #0]
 80089ac:	2331      	movs	r3, #49	; 0x31
 80089ae:	f805 3b01 	strb.w	r3, [r5], #1
 80089b2:	f10b 0b01 	add.w	fp, fp, #1
 80089b6:	e241      	b.n	8008e3c <_dtoa_r+0x95c>
 80089b8:	07f2      	lsls	r2, r6, #31
 80089ba:	d505      	bpl.n	80089c8 <_dtoa_r+0x4e8>
 80089bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089c0:	f7f7 fe3a 	bl	8000638 <__aeabi_dmul>
 80089c4:	3501      	adds	r5, #1
 80089c6:	2301      	movs	r3, #1
 80089c8:	1076      	asrs	r6, r6, #1
 80089ca:	3708      	adds	r7, #8
 80089cc:	e773      	b.n	80088b6 <_dtoa_r+0x3d6>
 80089ce:	2502      	movs	r5, #2
 80089d0:	e775      	b.n	80088be <_dtoa_r+0x3de>
 80089d2:	9e04      	ldr	r6, [sp, #16]
 80089d4:	465f      	mov	r7, fp
 80089d6:	e792      	b.n	80088fe <_dtoa_r+0x41e>
 80089d8:	9900      	ldr	r1, [sp, #0]
 80089da:	4b50      	ldr	r3, [pc, #320]	; (8008b1c <_dtoa_r+0x63c>)
 80089dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80089e0:	4431      	add	r1, r6
 80089e2:	9102      	str	r1, [sp, #8]
 80089e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089e6:	eeb0 9a47 	vmov.f32	s18, s14
 80089ea:	eef0 9a67 	vmov.f32	s19, s15
 80089ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80089f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80089f6:	2900      	cmp	r1, #0
 80089f8:	d044      	beq.n	8008a84 <_dtoa_r+0x5a4>
 80089fa:	494e      	ldr	r1, [pc, #312]	; (8008b34 <_dtoa_r+0x654>)
 80089fc:	2000      	movs	r0, #0
 80089fe:	f7f7 ff45 	bl	800088c <__aeabi_ddiv>
 8008a02:	ec53 2b19 	vmov	r2, r3, d9
 8008a06:	f7f7 fc5f 	bl	80002c8 <__aeabi_dsub>
 8008a0a:	9d00      	ldr	r5, [sp, #0]
 8008a0c:	ec41 0b19 	vmov	d9, r0, r1
 8008a10:	4649      	mov	r1, r9
 8008a12:	4640      	mov	r0, r8
 8008a14:	f7f8 f8c0 	bl	8000b98 <__aeabi_d2iz>
 8008a18:	4606      	mov	r6, r0
 8008a1a:	f7f7 fda3 	bl	8000564 <__aeabi_i2d>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	460b      	mov	r3, r1
 8008a22:	4640      	mov	r0, r8
 8008a24:	4649      	mov	r1, r9
 8008a26:	f7f7 fc4f 	bl	80002c8 <__aeabi_dsub>
 8008a2a:	3630      	adds	r6, #48	; 0x30
 8008a2c:	f805 6b01 	strb.w	r6, [r5], #1
 8008a30:	ec53 2b19 	vmov	r2, r3, d9
 8008a34:	4680      	mov	r8, r0
 8008a36:	4689      	mov	r9, r1
 8008a38:	f7f8 f870 	bl	8000b1c <__aeabi_dcmplt>
 8008a3c:	2800      	cmp	r0, #0
 8008a3e:	d164      	bne.n	8008b0a <_dtoa_r+0x62a>
 8008a40:	4642      	mov	r2, r8
 8008a42:	464b      	mov	r3, r9
 8008a44:	4937      	ldr	r1, [pc, #220]	; (8008b24 <_dtoa_r+0x644>)
 8008a46:	2000      	movs	r0, #0
 8008a48:	f7f7 fc3e 	bl	80002c8 <__aeabi_dsub>
 8008a4c:	ec53 2b19 	vmov	r2, r3, d9
 8008a50:	f7f8 f864 	bl	8000b1c <__aeabi_dcmplt>
 8008a54:	2800      	cmp	r0, #0
 8008a56:	f040 80b6 	bne.w	8008bc6 <_dtoa_r+0x6e6>
 8008a5a:	9b02      	ldr	r3, [sp, #8]
 8008a5c:	429d      	cmp	r5, r3
 8008a5e:	f43f af7c 	beq.w	800895a <_dtoa_r+0x47a>
 8008a62:	4b31      	ldr	r3, [pc, #196]	; (8008b28 <_dtoa_r+0x648>)
 8008a64:	ec51 0b19 	vmov	r0, r1, d9
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f7f7 fde5 	bl	8000638 <__aeabi_dmul>
 8008a6e:	4b2e      	ldr	r3, [pc, #184]	; (8008b28 <_dtoa_r+0x648>)
 8008a70:	ec41 0b19 	vmov	d9, r0, r1
 8008a74:	2200      	movs	r2, #0
 8008a76:	4640      	mov	r0, r8
 8008a78:	4649      	mov	r1, r9
 8008a7a:	f7f7 fddd 	bl	8000638 <__aeabi_dmul>
 8008a7e:	4680      	mov	r8, r0
 8008a80:	4689      	mov	r9, r1
 8008a82:	e7c5      	b.n	8008a10 <_dtoa_r+0x530>
 8008a84:	ec51 0b17 	vmov	r0, r1, d7
 8008a88:	f7f7 fdd6 	bl	8000638 <__aeabi_dmul>
 8008a8c:	9b02      	ldr	r3, [sp, #8]
 8008a8e:	9d00      	ldr	r5, [sp, #0]
 8008a90:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a92:	ec41 0b19 	vmov	d9, r0, r1
 8008a96:	4649      	mov	r1, r9
 8008a98:	4640      	mov	r0, r8
 8008a9a:	f7f8 f87d 	bl	8000b98 <__aeabi_d2iz>
 8008a9e:	4606      	mov	r6, r0
 8008aa0:	f7f7 fd60 	bl	8000564 <__aeabi_i2d>
 8008aa4:	3630      	adds	r6, #48	; 0x30
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	4640      	mov	r0, r8
 8008aac:	4649      	mov	r1, r9
 8008aae:	f7f7 fc0b 	bl	80002c8 <__aeabi_dsub>
 8008ab2:	f805 6b01 	strb.w	r6, [r5], #1
 8008ab6:	9b02      	ldr	r3, [sp, #8]
 8008ab8:	429d      	cmp	r5, r3
 8008aba:	4680      	mov	r8, r0
 8008abc:	4689      	mov	r9, r1
 8008abe:	f04f 0200 	mov.w	r2, #0
 8008ac2:	d124      	bne.n	8008b0e <_dtoa_r+0x62e>
 8008ac4:	4b1b      	ldr	r3, [pc, #108]	; (8008b34 <_dtoa_r+0x654>)
 8008ac6:	ec51 0b19 	vmov	r0, r1, d9
 8008aca:	f7f7 fbff 	bl	80002cc <__adddf3>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	4640      	mov	r0, r8
 8008ad4:	4649      	mov	r1, r9
 8008ad6:	f7f8 f83f 	bl	8000b58 <__aeabi_dcmpgt>
 8008ada:	2800      	cmp	r0, #0
 8008adc:	d173      	bne.n	8008bc6 <_dtoa_r+0x6e6>
 8008ade:	ec53 2b19 	vmov	r2, r3, d9
 8008ae2:	4914      	ldr	r1, [pc, #80]	; (8008b34 <_dtoa_r+0x654>)
 8008ae4:	2000      	movs	r0, #0
 8008ae6:	f7f7 fbef 	bl	80002c8 <__aeabi_dsub>
 8008aea:	4602      	mov	r2, r0
 8008aec:	460b      	mov	r3, r1
 8008aee:	4640      	mov	r0, r8
 8008af0:	4649      	mov	r1, r9
 8008af2:	f7f8 f813 	bl	8000b1c <__aeabi_dcmplt>
 8008af6:	2800      	cmp	r0, #0
 8008af8:	f43f af2f 	beq.w	800895a <_dtoa_r+0x47a>
 8008afc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008afe:	1e6b      	subs	r3, r5, #1
 8008b00:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008b06:	2b30      	cmp	r3, #48	; 0x30
 8008b08:	d0f8      	beq.n	8008afc <_dtoa_r+0x61c>
 8008b0a:	46bb      	mov	fp, r7
 8008b0c:	e04a      	b.n	8008ba4 <_dtoa_r+0x6c4>
 8008b0e:	4b06      	ldr	r3, [pc, #24]	; (8008b28 <_dtoa_r+0x648>)
 8008b10:	f7f7 fd92 	bl	8000638 <__aeabi_dmul>
 8008b14:	4680      	mov	r8, r0
 8008b16:	4689      	mov	r9, r1
 8008b18:	e7bd      	b.n	8008a96 <_dtoa_r+0x5b6>
 8008b1a:	bf00      	nop
 8008b1c:	0800b9a8 	.word	0x0800b9a8
 8008b20:	0800b980 	.word	0x0800b980
 8008b24:	3ff00000 	.word	0x3ff00000
 8008b28:	40240000 	.word	0x40240000
 8008b2c:	401c0000 	.word	0x401c0000
 8008b30:	40140000 	.word	0x40140000
 8008b34:	3fe00000 	.word	0x3fe00000
 8008b38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008b3c:	9d00      	ldr	r5, [sp, #0]
 8008b3e:	4642      	mov	r2, r8
 8008b40:	464b      	mov	r3, r9
 8008b42:	4630      	mov	r0, r6
 8008b44:	4639      	mov	r1, r7
 8008b46:	f7f7 fea1 	bl	800088c <__aeabi_ddiv>
 8008b4a:	f7f8 f825 	bl	8000b98 <__aeabi_d2iz>
 8008b4e:	9001      	str	r0, [sp, #4]
 8008b50:	f7f7 fd08 	bl	8000564 <__aeabi_i2d>
 8008b54:	4642      	mov	r2, r8
 8008b56:	464b      	mov	r3, r9
 8008b58:	f7f7 fd6e 	bl	8000638 <__aeabi_dmul>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	460b      	mov	r3, r1
 8008b60:	4630      	mov	r0, r6
 8008b62:	4639      	mov	r1, r7
 8008b64:	f7f7 fbb0 	bl	80002c8 <__aeabi_dsub>
 8008b68:	9e01      	ldr	r6, [sp, #4]
 8008b6a:	9f04      	ldr	r7, [sp, #16]
 8008b6c:	3630      	adds	r6, #48	; 0x30
 8008b6e:	f805 6b01 	strb.w	r6, [r5], #1
 8008b72:	9e00      	ldr	r6, [sp, #0]
 8008b74:	1bae      	subs	r6, r5, r6
 8008b76:	42b7      	cmp	r7, r6
 8008b78:	4602      	mov	r2, r0
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	d134      	bne.n	8008be8 <_dtoa_r+0x708>
 8008b7e:	f7f7 fba5 	bl	80002cc <__adddf3>
 8008b82:	4642      	mov	r2, r8
 8008b84:	464b      	mov	r3, r9
 8008b86:	4606      	mov	r6, r0
 8008b88:	460f      	mov	r7, r1
 8008b8a:	f7f7 ffe5 	bl	8000b58 <__aeabi_dcmpgt>
 8008b8e:	b9c8      	cbnz	r0, 8008bc4 <_dtoa_r+0x6e4>
 8008b90:	4642      	mov	r2, r8
 8008b92:	464b      	mov	r3, r9
 8008b94:	4630      	mov	r0, r6
 8008b96:	4639      	mov	r1, r7
 8008b98:	f7f7 ffb6 	bl	8000b08 <__aeabi_dcmpeq>
 8008b9c:	b110      	cbz	r0, 8008ba4 <_dtoa_r+0x6c4>
 8008b9e:	9b01      	ldr	r3, [sp, #4]
 8008ba0:	07db      	lsls	r3, r3, #31
 8008ba2:	d40f      	bmi.n	8008bc4 <_dtoa_r+0x6e4>
 8008ba4:	4651      	mov	r1, sl
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f000 fbcc 	bl	8009344 <_Bfree>
 8008bac:	2300      	movs	r3, #0
 8008bae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008bb0:	702b      	strb	r3, [r5, #0]
 8008bb2:	f10b 0301 	add.w	r3, fp, #1
 8008bb6:	6013      	str	r3, [r2, #0]
 8008bb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	f43f ace2 	beq.w	8008584 <_dtoa_r+0xa4>
 8008bc0:	601d      	str	r5, [r3, #0]
 8008bc2:	e4df      	b.n	8008584 <_dtoa_r+0xa4>
 8008bc4:	465f      	mov	r7, fp
 8008bc6:	462b      	mov	r3, r5
 8008bc8:	461d      	mov	r5, r3
 8008bca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008bce:	2a39      	cmp	r2, #57	; 0x39
 8008bd0:	d106      	bne.n	8008be0 <_dtoa_r+0x700>
 8008bd2:	9a00      	ldr	r2, [sp, #0]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d1f7      	bne.n	8008bc8 <_dtoa_r+0x6e8>
 8008bd8:	9900      	ldr	r1, [sp, #0]
 8008bda:	2230      	movs	r2, #48	; 0x30
 8008bdc:	3701      	adds	r7, #1
 8008bde:	700a      	strb	r2, [r1, #0]
 8008be0:	781a      	ldrb	r2, [r3, #0]
 8008be2:	3201      	adds	r2, #1
 8008be4:	701a      	strb	r2, [r3, #0]
 8008be6:	e790      	b.n	8008b0a <_dtoa_r+0x62a>
 8008be8:	4ba3      	ldr	r3, [pc, #652]	; (8008e78 <_dtoa_r+0x998>)
 8008bea:	2200      	movs	r2, #0
 8008bec:	f7f7 fd24 	bl	8000638 <__aeabi_dmul>
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	4606      	mov	r6, r0
 8008bf6:	460f      	mov	r7, r1
 8008bf8:	f7f7 ff86 	bl	8000b08 <__aeabi_dcmpeq>
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	d09e      	beq.n	8008b3e <_dtoa_r+0x65e>
 8008c00:	e7d0      	b.n	8008ba4 <_dtoa_r+0x6c4>
 8008c02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c04:	2a00      	cmp	r2, #0
 8008c06:	f000 80ca 	beq.w	8008d9e <_dtoa_r+0x8be>
 8008c0a:	9a07      	ldr	r2, [sp, #28]
 8008c0c:	2a01      	cmp	r2, #1
 8008c0e:	f300 80ad 	bgt.w	8008d6c <_dtoa_r+0x88c>
 8008c12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c14:	2a00      	cmp	r2, #0
 8008c16:	f000 80a5 	beq.w	8008d64 <_dtoa_r+0x884>
 8008c1a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008c1e:	9e08      	ldr	r6, [sp, #32]
 8008c20:	9d05      	ldr	r5, [sp, #20]
 8008c22:	9a05      	ldr	r2, [sp, #20]
 8008c24:	441a      	add	r2, r3
 8008c26:	9205      	str	r2, [sp, #20]
 8008c28:	9a06      	ldr	r2, [sp, #24]
 8008c2a:	2101      	movs	r1, #1
 8008c2c:	441a      	add	r2, r3
 8008c2e:	4620      	mov	r0, r4
 8008c30:	9206      	str	r2, [sp, #24]
 8008c32:	f000 fc3d 	bl	80094b0 <__i2b>
 8008c36:	4607      	mov	r7, r0
 8008c38:	b165      	cbz	r5, 8008c54 <_dtoa_r+0x774>
 8008c3a:	9b06      	ldr	r3, [sp, #24]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	dd09      	ble.n	8008c54 <_dtoa_r+0x774>
 8008c40:	42ab      	cmp	r3, r5
 8008c42:	9a05      	ldr	r2, [sp, #20]
 8008c44:	bfa8      	it	ge
 8008c46:	462b      	movge	r3, r5
 8008c48:	1ad2      	subs	r2, r2, r3
 8008c4a:	9205      	str	r2, [sp, #20]
 8008c4c:	9a06      	ldr	r2, [sp, #24]
 8008c4e:	1aed      	subs	r5, r5, r3
 8008c50:	1ad3      	subs	r3, r2, r3
 8008c52:	9306      	str	r3, [sp, #24]
 8008c54:	9b08      	ldr	r3, [sp, #32]
 8008c56:	b1f3      	cbz	r3, 8008c96 <_dtoa_r+0x7b6>
 8008c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	f000 80a3 	beq.w	8008da6 <_dtoa_r+0x8c6>
 8008c60:	2e00      	cmp	r6, #0
 8008c62:	dd10      	ble.n	8008c86 <_dtoa_r+0x7a6>
 8008c64:	4639      	mov	r1, r7
 8008c66:	4632      	mov	r2, r6
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f000 fce1 	bl	8009630 <__pow5mult>
 8008c6e:	4652      	mov	r2, sl
 8008c70:	4601      	mov	r1, r0
 8008c72:	4607      	mov	r7, r0
 8008c74:	4620      	mov	r0, r4
 8008c76:	f000 fc31 	bl	80094dc <__multiply>
 8008c7a:	4651      	mov	r1, sl
 8008c7c:	4680      	mov	r8, r0
 8008c7e:	4620      	mov	r0, r4
 8008c80:	f000 fb60 	bl	8009344 <_Bfree>
 8008c84:	46c2      	mov	sl, r8
 8008c86:	9b08      	ldr	r3, [sp, #32]
 8008c88:	1b9a      	subs	r2, r3, r6
 8008c8a:	d004      	beq.n	8008c96 <_dtoa_r+0x7b6>
 8008c8c:	4651      	mov	r1, sl
 8008c8e:	4620      	mov	r0, r4
 8008c90:	f000 fcce 	bl	8009630 <__pow5mult>
 8008c94:	4682      	mov	sl, r0
 8008c96:	2101      	movs	r1, #1
 8008c98:	4620      	mov	r0, r4
 8008c9a:	f000 fc09 	bl	80094b0 <__i2b>
 8008c9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	4606      	mov	r6, r0
 8008ca4:	f340 8081 	ble.w	8008daa <_dtoa_r+0x8ca>
 8008ca8:	461a      	mov	r2, r3
 8008caa:	4601      	mov	r1, r0
 8008cac:	4620      	mov	r0, r4
 8008cae:	f000 fcbf 	bl	8009630 <__pow5mult>
 8008cb2:	9b07      	ldr	r3, [sp, #28]
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	4606      	mov	r6, r0
 8008cb8:	dd7a      	ble.n	8008db0 <_dtoa_r+0x8d0>
 8008cba:	f04f 0800 	mov.w	r8, #0
 8008cbe:	6933      	ldr	r3, [r6, #16]
 8008cc0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008cc4:	6918      	ldr	r0, [r3, #16]
 8008cc6:	f000 fba5 	bl	8009414 <__hi0bits>
 8008cca:	f1c0 0020 	rsb	r0, r0, #32
 8008cce:	9b06      	ldr	r3, [sp, #24]
 8008cd0:	4418      	add	r0, r3
 8008cd2:	f010 001f 	ands.w	r0, r0, #31
 8008cd6:	f000 8094 	beq.w	8008e02 <_dtoa_r+0x922>
 8008cda:	f1c0 0320 	rsb	r3, r0, #32
 8008cde:	2b04      	cmp	r3, #4
 8008ce0:	f340 8085 	ble.w	8008dee <_dtoa_r+0x90e>
 8008ce4:	9b05      	ldr	r3, [sp, #20]
 8008ce6:	f1c0 001c 	rsb	r0, r0, #28
 8008cea:	4403      	add	r3, r0
 8008cec:	9305      	str	r3, [sp, #20]
 8008cee:	9b06      	ldr	r3, [sp, #24]
 8008cf0:	4403      	add	r3, r0
 8008cf2:	4405      	add	r5, r0
 8008cf4:	9306      	str	r3, [sp, #24]
 8008cf6:	9b05      	ldr	r3, [sp, #20]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	dd05      	ble.n	8008d08 <_dtoa_r+0x828>
 8008cfc:	4651      	mov	r1, sl
 8008cfe:	461a      	mov	r2, r3
 8008d00:	4620      	mov	r0, r4
 8008d02:	f000 fcef 	bl	80096e4 <__lshift>
 8008d06:	4682      	mov	sl, r0
 8008d08:	9b06      	ldr	r3, [sp, #24]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	dd05      	ble.n	8008d1a <_dtoa_r+0x83a>
 8008d0e:	4631      	mov	r1, r6
 8008d10:	461a      	mov	r2, r3
 8008d12:	4620      	mov	r0, r4
 8008d14:	f000 fce6 	bl	80096e4 <__lshift>
 8008d18:	4606      	mov	r6, r0
 8008d1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d072      	beq.n	8008e06 <_dtoa_r+0x926>
 8008d20:	4631      	mov	r1, r6
 8008d22:	4650      	mov	r0, sl
 8008d24:	f000 fd4a 	bl	80097bc <__mcmp>
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	da6c      	bge.n	8008e06 <_dtoa_r+0x926>
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	4651      	mov	r1, sl
 8008d30:	220a      	movs	r2, #10
 8008d32:	4620      	mov	r0, r4
 8008d34:	f000 fb28 	bl	8009388 <__multadd>
 8008d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008d3e:	4682      	mov	sl, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f000 81b0 	beq.w	80090a6 <_dtoa_r+0xbc6>
 8008d46:	2300      	movs	r3, #0
 8008d48:	4639      	mov	r1, r7
 8008d4a:	220a      	movs	r2, #10
 8008d4c:	4620      	mov	r0, r4
 8008d4e:	f000 fb1b 	bl	8009388 <__multadd>
 8008d52:	9b01      	ldr	r3, [sp, #4]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	4607      	mov	r7, r0
 8008d58:	f300 8096 	bgt.w	8008e88 <_dtoa_r+0x9a8>
 8008d5c:	9b07      	ldr	r3, [sp, #28]
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	dc59      	bgt.n	8008e16 <_dtoa_r+0x936>
 8008d62:	e091      	b.n	8008e88 <_dtoa_r+0x9a8>
 8008d64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008d6a:	e758      	b.n	8008c1e <_dtoa_r+0x73e>
 8008d6c:	9b04      	ldr	r3, [sp, #16]
 8008d6e:	1e5e      	subs	r6, r3, #1
 8008d70:	9b08      	ldr	r3, [sp, #32]
 8008d72:	42b3      	cmp	r3, r6
 8008d74:	bfbf      	itttt	lt
 8008d76:	9b08      	ldrlt	r3, [sp, #32]
 8008d78:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008d7a:	9608      	strlt	r6, [sp, #32]
 8008d7c:	1af3      	sublt	r3, r6, r3
 8008d7e:	bfb4      	ite	lt
 8008d80:	18d2      	addlt	r2, r2, r3
 8008d82:	1b9e      	subge	r6, r3, r6
 8008d84:	9b04      	ldr	r3, [sp, #16]
 8008d86:	bfbc      	itt	lt
 8008d88:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008d8a:	2600      	movlt	r6, #0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	bfb7      	itett	lt
 8008d90:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008d94:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008d98:	1a9d      	sublt	r5, r3, r2
 8008d9a:	2300      	movlt	r3, #0
 8008d9c:	e741      	b.n	8008c22 <_dtoa_r+0x742>
 8008d9e:	9e08      	ldr	r6, [sp, #32]
 8008da0:	9d05      	ldr	r5, [sp, #20]
 8008da2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008da4:	e748      	b.n	8008c38 <_dtoa_r+0x758>
 8008da6:	9a08      	ldr	r2, [sp, #32]
 8008da8:	e770      	b.n	8008c8c <_dtoa_r+0x7ac>
 8008daa:	9b07      	ldr	r3, [sp, #28]
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	dc19      	bgt.n	8008de4 <_dtoa_r+0x904>
 8008db0:	9b02      	ldr	r3, [sp, #8]
 8008db2:	b9bb      	cbnz	r3, 8008de4 <_dtoa_r+0x904>
 8008db4:	9b03      	ldr	r3, [sp, #12]
 8008db6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008dba:	b99b      	cbnz	r3, 8008de4 <_dtoa_r+0x904>
 8008dbc:	9b03      	ldr	r3, [sp, #12]
 8008dbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008dc2:	0d1b      	lsrs	r3, r3, #20
 8008dc4:	051b      	lsls	r3, r3, #20
 8008dc6:	b183      	cbz	r3, 8008dea <_dtoa_r+0x90a>
 8008dc8:	9b05      	ldr	r3, [sp, #20]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	9305      	str	r3, [sp, #20]
 8008dce:	9b06      	ldr	r3, [sp, #24]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	9306      	str	r3, [sp, #24]
 8008dd4:	f04f 0801 	mov.w	r8, #1
 8008dd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	f47f af6f 	bne.w	8008cbe <_dtoa_r+0x7de>
 8008de0:	2001      	movs	r0, #1
 8008de2:	e774      	b.n	8008cce <_dtoa_r+0x7ee>
 8008de4:	f04f 0800 	mov.w	r8, #0
 8008de8:	e7f6      	b.n	8008dd8 <_dtoa_r+0x8f8>
 8008dea:	4698      	mov	r8, r3
 8008dec:	e7f4      	b.n	8008dd8 <_dtoa_r+0x8f8>
 8008dee:	d082      	beq.n	8008cf6 <_dtoa_r+0x816>
 8008df0:	9a05      	ldr	r2, [sp, #20]
 8008df2:	331c      	adds	r3, #28
 8008df4:	441a      	add	r2, r3
 8008df6:	9205      	str	r2, [sp, #20]
 8008df8:	9a06      	ldr	r2, [sp, #24]
 8008dfa:	441a      	add	r2, r3
 8008dfc:	441d      	add	r5, r3
 8008dfe:	9206      	str	r2, [sp, #24]
 8008e00:	e779      	b.n	8008cf6 <_dtoa_r+0x816>
 8008e02:	4603      	mov	r3, r0
 8008e04:	e7f4      	b.n	8008df0 <_dtoa_r+0x910>
 8008e06:	9b04      	ldr	r3, [sp, #16]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	dc37      	bgt.n	8008e7c <_dtoa_r+0x99c>
 8008e0c:	9b07      	ldr	r3, [sp, #28]
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	dd34      	ble.n	8008e7c <_dtoa_r+0x99c>
 8008e12:	9b04      	ldr	r3, [sp, #16]
 8008e14:	9301      	str	r3, [sp, #4]
 8008e16:	9b01      	ldr	r3, [sp, #4]
 8008e18:	b963      	cbnz	r3, 8008e34 <_dtoa_r+0x954>
 8008e1a:	4631      	mov	r1, r6
 8008e1c:	2205      	movs	r2, #5
 8008e1e:	4620      	mov	r0, r4
 8008e20:	f000 fab2 	bl	8009388 <__multadd>
 8008e24:	4601      	mov	r1, r0
 8008e26:	4606      	mov	r6, r0
 8008e28:	4650      	mov	r0, sl
 8008e2a:	f000 fcc7 	bl	80097bc <__mcmp>
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	f73f adbb 	bgt.w	80089aa <_dtoa_r+0x4ca>
 8008e34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e36:	9d00      	ldr	r5, [sp, #0]
 8008e38:	ea6f 0b03 	mvn.w	fp, r3
 8008e3c:	f04f 0800 	mov.w	r8, #0
 8008e40:	4631      	mov	r1, r6
 8008e42:	4620      	mov	r0, r4
 8008e44:	f000 fa7e 	bl	8009344 <_Bfree>
 8008e48:	2f00      	cmp	r7, #0
 8008e4a:	f43f aeab 	beq.w	8008ba4 <_dtoa_r+0x6c4>
 8008e4e:	f1b8 0f00 	cmp.w	r8, #0
 8008e52:	d005      	beq.n	8008e60 <_dtoa_r+0x980>
 8008e54:	45b8      	cmp	r8, r7
 8008e56:	d003      	beq.n	8008e60 <_dtoa_r+0x980>
 8008e58:	4641      	mov	r1, r8
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	f000 fa72 	bl	8009344 <_Bfree>
 8008e60:	4639      	mov	r1, r7
 8008e62:	4620      	mov	r0, r4
 8008e64:	f000 fa6e 	bl	8009344 <_Bfree>
 8008e68:	e69c      	b.n	8008ba4 <_dtoa_r+0x6c4>
 8008e6a:	2600      	movs	r6, #0
 8008e6c:	4637      	mov	r7, r6
 8008e6e:	e7e1      	b.n	8008e34 <_dtoa_r+0x954>
 8008e70:	46bb      	mov	fp, r7
 8008e72:	4637      	mov	r7, r6
 8008e74:	e599      	b.n	80089aa <_dtoa_r+0x4ca>
 8008e76:	bf00      	nop
 8008e78:	40240000 	.word	0x40240000
 8008e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	f000 80c8 	beq.w	8009014 <_dtoa_r+0xb34>
 8008e84:	9b04      	ldr	r3, [sp, #16]
 8008e86:	9301      	str	r3, [sp, #4]
 8008e88:	2d00      	cmp	r5, #0
 8008e8a:	dd05      	ble.n	8008e98 <_dtoa_r+0x9b8>
 8008e8c:	4639      	mov	r1, r7
 8008e8e:	462a      	mov	r2, r5
 8008e90:	4620      	mov	r0, r4
 8008e92:	f000 fc27 	bl	80096e4 <__lshift>
 8008e96:	4607      	mov	r7, r0
 8008e98:	f1b8 0f00 	cmp.w	r8, #0
 8008e9c:	d05b      	beq.n	8008f56 <_dtoa_r+0xa76>
 8008e9e:	6879      	ldr	r1, [r7, #4]
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f000 fa0f 	bl	80092c4 <_Balloc>
 8008ea6:	4605      	mov	r5, r0
 8008ea8:	b928      	cbnz	r0, 8008eb6 <_dtoa_r+0x9d6>
 8008eaa:	4b83      	ldr	r3, [pc, #524]	; (80090b8 <_dtoa_r+0xbd8>)
 8008eac:	4602      	mov	r2, r0
 8008eae:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008eb2:	f7ff bb2e 	b.w	8008512 <_dtoa_r+0x32>
 8008eb6:	693a      	ldr	r2, [r7, #16]
 8008eb8:	3202      	adds	r2, #2
 8008eba:	0092      	lsls	r2, r2, #2
 8008ebc:	f107 010c 	add.w	r1, r7, #12
 8008ec0:	300c      	adds	r0, #12
 8008ec2:	f7ff fa76 	bl	80083b2 <memcpy>
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	4629      	mov	r1, r5
 8008eca:	4620      	mov	r0, r4
 8008ecc:	f000 fc0a 	bl	80096e4 <__lshift>
 8008ed0:	9b00      	ldr	r3, [sp, #0]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	9304      	str	r3, [sp, #16]
 8008ed6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008eda:	4413      	add	r3, r2
 8008edc:	9308      	str	r3, [sp, #32]
 8008ede:	9b02      	ldr	r3, [sp, #8]
 8008ee0:	f003 0301 	and.w	r3, r3, #1
 8008ee4:	46b8      	mov	r8, r7
 8008ee6:	9306      	str	r3, [sp, #24]
 8008ee8:	4607      	mov	r7, r0
 8008eea:	9b04      	ldr	r3, [sp, #16]
 8008eec:	4631      	mov	r1, r6
 8008eee:	3b01      	subs	r3, #1
 8008ef0:	4650      	mov	r0, sl
 8008ef2:	9301      	str	r3, [sp, #4]
 8008ef4:	f7ff fa6b 	bl	80083ce <quorem>
 8008ef8:	4641      	mov	r1, r8
 8008efa:	9002      	str	r0, [sp, #8]
 8008efc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008f00:	4650      	mov	r0, sl
 8008f02:	f000 fc5b 	bl	80097bc <__mcmp>
 8008f06:	463a      	mov	r2, r7
 8008f08:	9005      	str	r0, [sp, #20]
 8008f0a:	4631      	mov	r1, r6
 8008f0c:	4620      	mov	r0, r4
 8008f0e:	f000 fc71 	bl	80097f4 <__mdiff>
 8008f12:	68c2      	ldr	r2, [r0, #12]
 8008f14:	4605      	mov	r5, r0
 8008f16:	bb02      	cbnz	r2, 8008f5a <_dtoa_r+0xa7a>
 8008f18:	4601      	mov	r1, r0
 8008f1a:	4650      	mov	r0, sl
 8008f1c:	f000 fc4e 	bl	80097bc <__mcmp>
 8008f20:	4602      	mov	r2, r0
 8008f22:	4629      	mov	r1, r5
 8008f24:	4620      	mov	r0, r4
 8008f26:	9209      	str	r2, [sp, #36]	; 0x24
 8008f28:	f000 fa0c 	bl	8009344 <_Bfree>
 8008f2c:	9b07      	ldr	r3, [sp, #28]
 8008f2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f30:	9d04      	ldr	r5, [sp, #16]
 8008f32:	ea43 0102 	orr.w	r1, r3, r2
 8008f36:	9b06      	ldr	r3, [sp, #24]
 8008f38:	4319      	orrs	r1, r3
 8008f3a:	d110      	bne.n	8008f5e <_dtoa_r+0xa7e>
 8008f3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008f40:	d029      	beq.n	8008f96 <_dtoa_r+0xab6>
 8008f42:	9b05      	ldr	r3, [sp, #20]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	dd02      	ble.n	8008f4e <_dtoa_r+0xa6e>
 8008f48:	9b02      	ldr	r3, [sp, #8]
 8008f4a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008f4e:	9b01      	ldr	r3, [sp, #4]
 8008f50:	f883 9000 	strb.w	r9, [r3]
 8008f54:	e774      	b.n	8008e40 <_dtoa_r+0x960>
 8008f56:	4638      	mov	r0, r7
 8008f58:	e7ba      	b.n	8008ed0 <_dtoa_r+0x9f0>
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	e7e1      	b.n	8008f22 <_dtoa_r+0xa42>
 8008f5e:	9b05      	ldr	r3, [sp, #20]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	db04      	blt.n	8008f6e <_dtoa_r+0xa8e>
 8008f64:	9907      	ldr	r1, [sp, #28]
 8008f66:	430b      	orrs	r3, r1
 8008f68:	9906      	ldr	r1, [sp, #24]
 8008f6a:	430b      	orrs	r3, r1
 8008f6c:	d120      	bne.n	8008fb0 <_dtoa_r+0xad0>
 8008f6e:	2a00      	cmp	r2, #0
 8008f70:	dded      	ble.n	8008f4e <_dtoa_r+0xa6e>
 8008f72:	4651      	mov	r1, sl
 8008f74:	2201      	movs	r2, #1
 8008f76:	4620      	mov	r0, r4
 8008f78:	f000 fbb4 	bl	80096e4 <__lshift>
 8008f7c:	4631      	mov	r1, r6
 8008f7e:	4682      	mov	sl, r0
 8008f80:	f000 fc1c 	bl	80097bc <__mcmp>
 8008f84:	2800      	cmp	r0, #0
 8008f86:	dc03      	bgt.n	8008f90 <_dtoa_r+0xab0>
 8008f88:	d1e1      	bne.n	8008f4e <_dtoa_r+0xa6e>
 8008f8a:	f019 0f01 	tst.w	r9, #1
 8008f8e:	d0de      	beq.n	8008f4e <_dtoa_r+0xa6e>
 8008f90:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008f94:	d1d8      	bne.n	8008f48 <_dtoa_r+0xa68>
 8008f96:	9a01      	ldr	r2, [sp, #4]
 8008f98:	2339      	movs	r3, #57	; 0x39
 8008f9a:	7013      	strb	r3, [r2, #0]
 8008f9c:	462b      	mov	r3, r5
 8008f9e:	461d      	mov	r5, r3
 8008fa0:	3b01      	subs	r3, #1
 8008fa2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008fa6:	2a39      	cmp	r2, #57	; 0x39
 8008fa8:	d06c      	beq.n	8009084 <_dtoa_r+0xba4>
 8008faa:	3201      	adds	r2, #1
 8008fac:	701a      	strb	r2, [r3, #0]
 8008fae:	e747      	b.n	8008e40 <_dtoa_r+0x960>
 8008fb0:	2a00      	cmp	r2, #0
 8008fb2:	dd07      	ble.n	8008fc4 <_dtoa_r+0xae4>
 8008fb4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008fb8:	d0ed      	beq.n	8008f96 <_dtoa_r+0xab6>
 8008fba:	9a01      	ldr	r2, [sp, #4]
 8008fbc:	f109 0301 	add.w	r3, r9, #1
 8008fc0:	7013      	strb	r3, [r2, #0]
 8008fc2:	e73d      	b.n	8008e40 <_dtoa_r+0x960>
 8008fc4:	9b04      	ldr	r3, [sp, #16]
 8008fc6:	9a08      	ldr	r2, [sp, #32]
 8008fc8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d043      	beq.n	8009058 <_dtoa_r+0xb78>
 8008fd0:	4651      	mov	r1, sl
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	220a      	movs	r2, #10
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	f000 f9d6 	bl	8009388 <__multadd>
 8008fdc:	45b8      	cmp	r8, r7
 8008fde:	4682      	mov	sl, r0
 8008fe0:	f04f 0300 	mov.w	r3, #0
 8008fe4:	f04f 020a 	mov.w	r2, #10
 8008fe8:	4641      	mov	r1, r8
 8008fea:	4620      	mov	r0, r4
 8008fec:	d107      	bne.n	8008ffe <_dtoa_r+0xb1e>
 8008fee:	f000 f9cb 	bl	8009388 <__multadd>
 8008ff2:	4680      	mov	r8, r0
 8008ff4:	4607      	mov	r7, r0
 8008ff6:	9b04      	ldr	r3, [sp, #16]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	9304      	str	r3, [sp, #16]
 8008ffc:	e775      	b.n	8008eea <_dtoa_r+0xa0a>
 8008ffe:	f000 f9c3 	bl	8009388 <__multadd>
 8009002:	4639      	mov	r1, r7
 8009004:	4680      	mov	r8, r0
 8009006:	2300      	movs	r3, #0
 8009008:	220a      	movs	r2, #10
 800900a:	4620      	mov	r0, r4
 800900c:	f000 f9bc 	bl	8009388 <__multadd>
 8009010:	4607      	mov	r7, r0
 8009012:	e7f0      	b.n	8008ff6 <_dtoa_r+0xb16>
 8009014:	9b04      	ldr	r3, [sp, #16]
 8009016:	9301      	str	r3, [sp, #4]
 8009018:	9d00      	ldr	r5, [sp, #0]
 800901a:	4631      	mov	r1, r6
 800901c:	4650      	mov	r0, sl
 800901e:	f7ff f9d6 	bl	80083ce <quorem>
 8009022:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009026:	9b00      	ldr	r3, [sp, #0]
 8009028:	f805 9b01 	strb.w	r9, [r5], #1
 800902c:	1aea      	subs	r2, r5, r3
 800902e:	9b01      	ldr	r3, [sp, #4]
 8009030:	4293      	cmp	r3, r2
 8009032:	dd07      	ble.n	8009044 <_dtoa_r+0xb64>
 8009034:	4651      	mov	r1, sl
 8009036:	2300      	movs	r3, #0
 8009038:	220a      	movs	r2, #10
 800903a:	4620      	mov	r0, r4
 800903c:	f000 f9a4 	bl	8009388 <__multadd>
 8009040:	4682      	mov	sl, r0
 8009042:	e7ea      	b.n	800901a <_dtoa_r+0xb3a>
 8009044:	9b01      	ldr	r3, [sp, #4]
 8009046:	2b00      	cmp	r3, #0
 8009048:	bfc8      	it	gt
 800904a:	461d      	movgt	r5, r3
 800904c:	9b00      	ldr	r3, [sp, #0]
 800904e:	bfd8      	it	le
 8009050:	2501      	movle	r5, #1
 8009052:	441d      	add	r5, r3
 8009054:	f04f 0800 	mov.w	r8, #0
 8009058:	4651      	mov	r1, sl
 800905a:	2201      	movs	r2, #1
 800905c:	4620      	mov	r0, r4
 800905e:	f000 fb41 	bl	80096e4 <__lshift>
 8009062:	4631      	mov	r1, r6
 8009064:	4682      	mov	sl, r0
 8009066:	f000 fba9 	bl	80097bc <__mcmp>
 800906a:	2800      	cmp	r0, #0
 800906c:	dc96      	bgt.n	8008f9c <_dtoa_r+0xabc>
 800906e:	d102      	bne.n	8009076 <_dtoa_r+0xb96>
 8009070:	f019 0f01 	tst.w	r9, #1
 8009074:	d192      	bne.n	8008f9c <_dtoa_r+0xabc>
 8009076:	462b      	mov	r3, r5
 8009078:	461d      	mov	r5, r3
 800907a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800907e:	2a30      	cmp	r2, #48	; 0x30
 8009080:	d0fa      	beq.n	8009078 <_dtoa_r+0xb98>
 8009082:	e6dd      	b.n	8008e40 <_dtoa_r+0x960>
 8009084:	9a00      	ldr	r2, [sp, #0]
 8009086:	429a      	cmp	r2, r3
 8009088:	d189      	bne.n	8008f9e <_dtoa_r+0xabe>
 800908a:	f10b 0b01 	add.w	fp, fp, #1
 800908e:	2331      	movs	r3, #49	; 0x31
 8009090:	e796      	b.n	8008fc0 <_dtoa_r+0xae0>
 8009092:	4b0a      	ldr	r3, [pc, #40]	; (80090bc <_dtoa_r+0xbdc>)
 8009094:	f7ff ba99 	b.w	80085ca <_dtoa_r+0xea>
 8009098:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800909a:	2b00      	cmp	r3, #0
 800909c:	f47f aa6d 	bne.w	800857a <_dtoa_r+0x9a>
 80090a0:	4b07      	ldr	r3, [pc, #28]	; (80090c0 <_dtoa_r+0xbe0>)
 80090a2:	f7ff ba92 	b.w	80085ca <_dtoa_r+0xea>
 80090a6:	9b01      	ldr	r3, [sp, #4]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	dcb5      	bgt.n	8009018 <_dtoa_r+0xb38>
 80090ac:	9b07      	ldr	r3, [sp, #28]
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	f73f aeb1 	bgt.w	8008e16 <_dtoa_r+0x936>
 80090b4:	e7b0      	b.n	8009018 <_dtoa_r+0xb38>
 80090b6:	bf00      	nop
 80090b8:	0800b914 	.word	0x0800b914
 80090bc:	0800b874 	.word	0x0800b874
 80090c0:	0800b898 	.word	0x0800b898

080090c4 <_free_r>:
 80090c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090c6:	2900      	cmp	r1, #0
 80090c8:	d044      	beq.n	8009154 <_free_r+0x90>
 80090ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090ce:	9001      	str	r0, [sp, #4]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	f1a1 0404 	sub.w	r4, r1, #4
 80090d6:	bfb8      	it	lt
 80090d8:	18e4      	addlt	r4, r4, r3
 80090da:	f000 f8e7 	bl	80092ac <__malloc_lock>
 80090de:	4a1e      	ldr	r2, [pc, #120]	; (8009158 <_free_r+0x94>)
 80090e0:	9801      	ldr	r0, [sp, #4]
 80090e2:	6813      	ldr	r3, [r2, #0]
 80090e4:	b933      	cbnz	r3, 80090f4 <_free_r+0x30>
 80090e6:	6063      	str	r3, [r4, #4]
 80090e8:	6014      	str	r4, [r2, #0]
 80090ea:	b003      	add	sp, #12
 80090ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80090f0:	f000 b8e2 	b.w	80092b8 <__malloc_unlock>
 80090f4:	42a3      	cmp	r3, r4
 80090f6:	d908      	bls.n	800910a <_free_r+0x46>
 80090f8:	6825      	ldr	r5, [r4, #0]
 80090fa:	1961      	adds	r1, r4, r5
 80090fc:	428b      	cmp	r3, r1
 80090fe:	bf01      	itttt	eq
 8009100:	6819      	ldreq	r1, [r3, #0]
 8009102:	685b      	ldreq	r3, [r3, #4]
 8009104:	1949      	addeq	r1, r1, r5
 8009106:	6021      	streq	r1, [r4, #0]
 8009108:	e7ed      	b.n	80090e6 <_free_r+0x22>
 800910a:	461a      	mov	r2, r3
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	b10b      	cbz	r3, 8009114 <_free_r+0x50>
 8009110:	42a3      	cmp	r3, r4
 8009112:	d9fa      	bls.n	800910a <_free_r+0x46>
 8009114:	6811      	ldr	r1, [r2, #0]
 8009116:	1855      	adds	r5, r2, r1
 8009118:	42a5      	cmp	r5, r4
 800911a:	d10b      	bne.n	8009134 <_free_r+0x70>
 800911c:	6824      	ldr	r4, [r4, #0]
 800911e:	4421      	add	r1, r4
 8009120:	1854      	adds	r4, r2, r1
 8009122:	42a3      	cmp	r3, r4
 8009124:	6011      	str	r1, [r2, #0]
 8009126:	d1e0      	bne.n	80090ea <_free_r+0x26>
 8009128:	681c      	ldr	r4, [r3, #0]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	6053      	str	r3, [r2, #4]
 800912e:	440c      	add	r4, r1
 8009130:	6014      	str	r4, [r2, #0]
 8009132:	e7da      	b.n	80090ea <_free_r+0x26>
 8009134:	d902      	bls.n	800913c <_free_r+0x78>
 8009136:	230c      	movs	r3, #12
 8009138:	6003      	str	r3, [r0, #0]
 800913a:	e7d6      	b.n	80090ea <_free_r+0x26>
 800913c:	6825      	ldr	r5, [r4, #0]
 800913e:	1961      	adds	r1, r4, r5
 8009140:	428b      	cmp	r3, r1
 8009142:	bf04      	itt	eq
 8009144:	6819      	ldreq	r1, [r3, #0]
 8009146:	685b      	ldreq	r3, [r3, #4]
 8009148:	6063      	str	r3, [r4, #4]
 800914a:	bf04      	itt	eq
 800914c:	1949      	addeq	r1, r1, r5
 800914e:	6021      	streq	r1, [r4, #0]
 8009150:	6054      	str	r4, [r2, #4]
 8009152:	e7ca      	b.n	80090ea <_free_r+0x26>
 8009154:	b003      	add	sp, #12
 8009156:	bd30      	pop	{r4, r5, pc}
 8009158:	200051f8 	.word	0x200051f8

0800915c <malloc>:
 800915c:	4b02      	ldr	r3, [pc, #8]	; (8009168 <malloc+0xc>)
 800915e:	4601      	mov	r1, r0
 8009160:	6818      	ldr	r0, [r3, #0]
 8009162:	f000 b823 	b.w	80091ac <_malloc_r>
 8009166:	bf00      	nop
 8009168:	20000070 	.word	0x20000070

0800916c <sbrk_aligned>:
 800916c:	b570      	push	{r4, r5, r6, lr}
 800916e:	4e0e      	ldr	r6, [pc, #56]	; (80091a8 <sbrk_aligned+0x3c>)
 8009170:	460c      	mov	r4, r1
 8009172:	6831      	ldr	r1, [r6, #0]
 8009174:	4605      	mov	r5, r0
 8009176:	b911      	cbnz	r1, 800917e <sbrk_aligned+0x12>
 8009178:	f000 fe40 	bl	8009dfc <_sbrk_r>
 800917c:	6030      	str	r0, [r6, #0]
 800917e:	4621      	mov	r1, r4
 8009180:	4628      	mov	r0, r5
 8009182:	f000 fe3b 	bl	8009dfc <_sbrk_r>
 8009186:	1c43      	adds	r3, r0, #1
 8009188:	d00a      	beq.n	80091a0 <sbrk_aligned+0x34>
 800918a:	1cc4      	adds	r4, r0, #3
 800918c:	f024 0403 	bic.w	r4, r4, #3
 8009190:	42a0      	cmp	r0, r4
 8009192:	d007      	beq.n	80091a4 <sbrk_aligned+0x38>
 8009194:	1a21      	subs	r1, r4, r0
 8009196:	4628      	mov	r0, r5
 8009198:	f000 fe30 	bl	8009dfc <_sbrk_r>
 800919c:	3001      	adds	r0, #1
 800919e:	d101      	bne.n	80091a4 <sbrk_aligned+0x38>
 80091a0:	f04f 34ff 	mov.w	r4, #4294967295
 80091a4:	4620      	mov	r0, r4
 80091a6:	bd70      	pop	{r4, r5, r6, pc}
 80091a8:	200051fc 	.word	0x200051fc

080091ac <_malloc_r>:
 80091ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091b0:	1ccd      	adds	r5, r1, #3
 80091b2:	f025 0503 	bic.w	r5, r5, #3
 80091b6:	3508      	adds	r5, #8
 80091b8:	2d0c      	cmp	r5, #12
 80091ba:	bf38      	it	cc
 80091bc:	250c      	movcc	r5, #12
 80091be:	2d00      	cmp	r5, #0
 80091c0:	4607      	mov	r7, r0
 80091c2:	db01      	blt.n	80091c8 <_malloc_r+0x1c>
 80091c4:	42a9      	cmp	r1, r5
 80091c6:	d905      	bls.n	80091d4 <_malloc_r+0x28>
 80091c8:	230c      	movs	r3, #12
 80091ca:	603b      	str	r3, [r7, #0]
 80091cc:	2600      	movs	r6, #0
 80091ce:	4630      	mov	r0, r6
 80091d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80092a8 <_malloc_r+0xfc>
 80091d8:	f000 f868 	bl	80092ac <__malloc_lock>
 80091dc:	f8d8 3000 	ldr.w	r3, [r8]
 80091e0:	461c      	mov	r4, r3
 80091e2:	bb5c      	cbnz	r4, 800923c <_malloc_r+0x90>
 80091e4:	4629      	mov	r1, r5
 80091e6:	4638      	mov	r0, r7
 80091e8:	f7ff ffc0 	bl	800916c <sbrk_aligned>
 80091ec:	1c43      	adds	r3, r0, #1
 80091ee:	4604      	mov	r4, r0
 80091f0:	d155      	bne.n	800929e <_malloc_r+0xf2>
 80091f2:	f8d8 4000 	ldr.w	r4, [r8]
 80091f6:	4626      	mov	r6, r4
 80091f8:	2e00      	cmp	r6, #0
 80091fa:	d145      	bne.n	8009288 <_malloc_r+0xdc>
 80091fc:	2c00      	cmp	r4, #0
 80091fe:	d048      	beq.n	8009292 <_malloc_r+0xe6>
 8009200:	6823      	ldr	r3, [r4, #0]
 8009202:	4631      	mov	r1, r6
 8009204:	4638      	mov	r0, r7
 8009206:	eb04 0903 	add.w	r9, r4, r3
 800920a:	f000 fdf7 	bl	8009dfc <_sbrk_r>
 800920e:	4581      	cmp	r9, r0
 8009210:	d13f      	bne.n	8009292 <_malloc_r+0xe6>
 8009212:	6821      	ldr	r1, [r4, #0]
 8009214:	1a6d      	subs	r5, r5, r1
 8009216:	4629      	mov	r1, r5
 8009218:	4638      	mov	r0, r7
 800921a:	f7ff ffa7 	bl	800916c <sbrk_aligned>
 800921e:	3001      	adds	r0, #1
 8009220:	d037      	beq.n	8009292 <_malloc_r+0xe6>
 8009222:	6823      	ldr	r3, [r4, #0]
 8009224:	442b      	add	r3, r5
 8009226:	6023      	str	r3, [r4, #0]
 8009228:	f8d8 3000 	ldr.w	r3, [r8]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d038      	beq.n	80092a2 <_malloc_r+0xf6>
 8009230:	685a      	ldr	r2, [r3, #4]
 8009232:	42a2      	cmp	r2, r4
 8009234:	d12b      	bne.n	800928e <_malloc_r+0xe2>
 8009236:	2200      	movs	r2, #0
 8009238:	605a      	str	r2, [r3, #4]
 800923a:	e00f      	b.n	800925c <_malloc_r+0xb0>
 800923c:	6822      	ldr	r2, [r4, #0]
 800923e:	1b52      	subs	r2, r2, r5
 8009240:	d41f      	bmi.n	8009282 <_malloc_r+0xd6>
 8009242:	2a0b      	cmp	r2, #11
 8009244:	d917      	bls.n	8009276 <_malloc_r+0xca>
 8009246:	1961      	adds	r1, r4, r5
 8009248:	42a3      	cmp	r3, r4
 800924a:	6025      	str	r5, [r4, #0]
 800924c:	bf18      	it	ne
 800924e:	6059      	strne	r1, [r3, #4]
 8009250:	6863      	ldr	r3, [r4, #4]
 8009252:	bf08      	it	eq
 8009254:	f8c8 1000 	streq.w	r1, [r8]
 8009258:	5162      	str	r2, [r4, r5]
 800925a:	604b      	str	r3, [r1, #4]
 800925c:	4638      	mov	r0, r7
 800925e:	f104 060b 	add.w	r6, r4, #11
 8009262:	f000 f829 	bl	80092b8 <__malloc_unlock>
 8009266:	f026 0607 	bic.w	r6, r6, #7
 800926a:	1d23      	adds	r3, r4, #4
 800926c:	1af2      	subs	r2, r6, r3
 800926e:	d0ae      	beq.n	80091ce <_malloc_r+0x22>
 8009270:	1b9b      	subs	r3, r3, r6
 8009272:	50a3      	str	r3, [r4, r2]
 8009274:	e7ab      	b.n	80091ce <_malloc_r+0x22>
 8009276:	42a3      	cmp	r3, r4
 8009278:	6862      	ldr	r2, [r4, #4]
 800927a:	d1dd      	bne.n	8009238 <_malloc_r+0x8c>
 800927c:	f8c8 2000 	str.w	r2, [r8]
 8009280:	e7ec      	b.n	800925c <_malloc_r+0xb0>
 8009282:	4623      	mov	r3, r4
 8009284:	6864      	ldr	r4, [r4, #4]
 8009286:	e7ac      	b.n	80091e2 <_malloc_r+0x36>
 8009288:	4634      	mov	r4, r6
 800928a:	6876      	ldr	r6, [r6, #4]
 800928c:	e7b4      	b.n	80091f8 <_malloc_r+0x4c>
 800928e:	4613      	mov	r3, r2
 8009290:	e7cc      	b.n	800922c <_malloc_r+0x80>
 8009292:	230c      	movs	r3, #12
 8009294:	603b      	str	r3, [r7, #0]
 8009296:	4638      	mov	r0, r7
 8009298:	f000 f80e 	bl	80092b8 <__malloc_unlock>
 800929c:	e797      	b.n	80091ce <_malloc_r+0x22>
 800929e:	6025      	str	r5, [r4, #0]
 80092a0:	e7dc      	b.n	800925c <_malloc_r+0xb0>
 80092a2:	605b      	str	r3, [r3, #4]
 80092a4:	deff      	udf	#255	; 0xff
 80092a6:	bf00      	nop
 80092a8:	200051f8 	.word	0x200051f8

080092ac <__malloc_lock>:
 80092ac:	4801      	ldr	r0, [pc, #4]	; (80092b4 <__malloc_lock+0x8>)
 80092ae:	f7ff b87e 	b.w	80083ae <__retarget_lock_acquire_recursive>
 80092b2:	bf00      	nop
 80092b4:	200051f4 	.word	0x200051f4

080092b8 <__malloc_unlock>:
 80092b8:	4801      	ldr	r0, [pc, #4]	; (80092c0 <__malloc_unlock+0x8>)
 80092ba:	f7ff b879 	b.w	80083b0 <__retarget_lock_release_recursive>
 80092be:	bf00      	nop
 80092c0:	200051f4 	.word	0x200051f4

080092c4 <_Balloc>:
 80092c4:	b570      	push	{r4, r5, r6, lr}
 80092c6:	69c6      	ldr	r6, [r0, #28]
 80092c8:	4604      	mov	r4, r0
 80092ca:	460d      	mov	r5, r1
 80092cc:	b976      	cbnz	r6, 80092ec <_Balloc+0x28>
 80092ce:	2010      	movs	r0, #16
 80092d0:	f7ff ff44 	bl	800915c <malloc>
 80092d4:	4602      	mov	r2, r0
 80092d6:	61e0      	str	r0, [r4, #28]
 80092d8:	b920      	cbnz	r0, 80092e4 <_Balloc+0x20>
 80092da:	4b18      	ldr	r3, [pc, #96]	; (800933c <_Balloc+0x78>)
 80092dc:	4818      	ldr	r0, [pc, #96]	; (8009340 <_Balloc+0x7c>)
 80092de:	216b      	movs	r1, #107	; 0x6b
 80092e0:	f000 fd9c 	bl	8009e1c <__assert_func>
 80092e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092e8:	6006      	str	r6, [r0, #0]
 80092ea:	60c6      	str	r6, [r0, #12]
 80092ec:	69e6      	ldr	r6, [r4, #28]
 80092ee:	68f3      	ldr	r3, [r6, #12]
 80092f0:	b183      	cbz	r3, 8009314 <_Balloc+0x50>
 80092f2:	69e3      	ldr	r3, [r4, #28]
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80092fa:	b9b8      	cbnz	r0, 800932c <_Balloc+0x68>
 80092fc:	2101      	movs	r1, #1
 80092fe:	fa01 f605 	lsl.w	r6, r1, r5
 8009302:	1d72      	adds	r2, r6, #5
 8009304:	0092      	lsls	r2, r2, #2
 8009306:	4620      	mov	r0, r4
 8009308:	f000 fda6 	bl	8009e58 <_calloc_r>
 800930c:	b160      	cbz	r0, 8009328 <_Balloc+0x64>
 800930e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009312:	e00e      	b.n	8009332 <_Balloc+0x6e>
 8009314:	2221      	movs	r2, #33	; 0x21
 8009316:	2104      	movs	r1, #4
 8009318:	4620      	mov	r0, r4
 800931a:	f000 fd9d 	bl	8009e58 <_calloc_r>
 800931e:	69e3      	ldr	r3, [r4, #28]
 8009320:	60f0      	str	r0, [r6, #12]
 8009322:	68db      	ldr	r3, [r3, #12]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d1e4      	bne.n	80092f2 <_Balloc+0x2e>
 8009328:	2000      	movs	r0, #0
 800932a:	bd70      	pop	{r4, r5, r6, pc}
 800932c:	6802      	ldr	r2, [r0, #0]
 800932e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009332:	2300      	movs	r3, #0
 8009334:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009338:	e7f7      	b.n	800932a <_Balloc+0x66>
 800933a:	bf00      	nop
 800933c:	0800b8a5 	.word	0x0800b8a5
 8009340:	0800b925 	.word	0x0800b925

08009344 <_Bfree>:
 8009344:	b570      	push	{r4, r5, r6, lr}
 8009346:	69c6      	ldr	r6, [r0, #28]
 8009348:	4605      	mov	r5, r0
 800934a:	460c      	mov	r4, r1
 800934c:	b976      	cbnz	r6, 800936c <_Bfree+0x28>
 800934e:	2010      	movs	r0, #16
 8009350:	f7ff ff04 	bl	800915c <malloc>
 8009354:	4602      	mov	r2, r0
 8009356:	61e8      	str	r0, [r5, #28]
 8009358:	b920      	cbnz	r0, 8009364 <_Bfree+0x20>
 800935a:	4b09      	ldr	r3, [pc, #36]	; (8009380 <_Bfree+0x3c>)
 800935c:	4809      	ldr	r0, [pc, #36]	; (8009384 <_Bfree+0x40>)
 800935e:	218f      	movs	r1, #143	; 0x8f
 8009360:	f000 fd5c 	bl	8009e1c <__assert_func>
 8009364:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009368:	6006      	str	r6, [r0, #0]
 800936a:	60c6      	str	r6, [r0, #12]
 800936c:	b13c      	cbz	r4, 800937e <_Bfree+0x3a>
 800936e:	69eb      	ldr	r3, [r5, #28]
 8009370:	6862      	ldr	r2, [r4, #4]
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009378:	6021      	str	r1, [r4, #0]
 800937a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800937e:	bd70      	pop	{r4, r5, r6, pc}
 8009380:	0800b8a5 	.word	0x0800b8a5
 8009384:	0800b925 	.word	0x0800b925

08009388 <__multadd>:
 8009388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800938c:	690d      	ldr	r5, [r1, #16]
 800938e:	4607      	mov	r7, r0
 8009390:	460c      	mov	r4, r1
 8009392:	461e      	mov	r6, r3
 8009394:	f101 0c14 	add.w	ip, r1, #20
 8009398:	2000      	movs	r0, #0
 800939a:	f8dc 3000 	ldr.w	r3, [ip]
 800939e:	b299      	uxth	r1, r3
 80093a0:	fb02 6101 	mla	r1, r2, r1, r6
 80093a4:	0c1e      	lsrs	r6, r3, #16
 80093a6:	0c0b      	lsrs	r3, r1, #16
 80093a8:	fb02 3306 	mla	r3, r2, r6, r3
 80093ac:	b289      	uxth	r1, r1
 80093ae:	3001      	adds	r0, #1
 80093b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80093b4:	4285      	cmp	r5, r0
 80093b6:	f84c 1b04 	str.w	r1, [ip], #4
 80093ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80093be:	dcec      	bgt.n	800939a <__multadd+0x12>
 80093c0:	b30e      	cbz	r6, 8009406 <__multadd+0x7e>
 80093c2:	68a3      	ldr	r3, [r4, #8]
 80093c4:	42ab      	cmp	r3, r5
 80093c6:	dc19      	bgt.n	80093fc <__multadd+0x74>
 80093c8:	6861      	ldr	r1, [r4, #4]
 80093ca:	4638      	mov	r0, r7
 80093cc:	3101      	adds	r1, #1
 80093ce:	f7ff ff79 	bl	80092c4 <_Balloc>
 80093d2:	4680      	mov	r8, r0
 80093d4:	b928      	cbnz	r0, 80093e2 <__multadd+0x5a>
 80093d6:	4602      	mov	r2, r0
 80093d8:	4b0c      	ldr	r3, [pc, #48]	; (800940c <__multadd+0x84>)
 80093da:	480d      	ldr	r0, [pc, #52]	; (8009410 <__multadd+0x88>)
 80093dc:	21ba      	movs	r1, #186	; 0xba
 80093de:	f000 fd1d 	bl	8009e1c <__assert_func>
 80093e2:	6922      	ldr	r2, [r4, #16]
 80093e4:	3202      	adds	r2, #2
 80093e6:	f104 010c 	add.w	r1, r4, #12
 80093ea:	0092      	lsls	r2, r2, #2
 80093ec:	300c      	adds	r0, #12
 80093ee:	f7fe ffe0 	bl	80083b2 <memcpy>
 80093f2:	4621      	mov	r1, r4
 80093f4:	4638      	mov	r0, r7
 80093f6:	f7ff ffa5 	bl	8009344 <_Bfree>
 80093fa:	4644      	mov	r4, r8
 80093fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009400:	3501      	adds	r5, #1
 8009402:	615e      	str	r6, [r3, #20]
 8009404:	6125      	str	r5, [r4, #16]
 8009406:	4620      	mov	r0, r4
 8009408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800940c:	0800b914 	.word	0x0800b914
 8009410:	0800b925 	.word	0x0800b925

08009414 <__hi0bits>:
 8009414:	0c03      	lsrs	r3, r0, #16
 8009416:	041b      	lsls	r3, r3, #16
 8009418:	b9d3      	cbnz	r3, 8009450 <__hi0bits+0x3c>
 800941a:	0400      	lsls	r0, r0, #16
 800941c:	2310      	movs	r3, #16
 800941e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009422:	bf04      	itt	eq
 8009424:	0200      	lsleq	r0, r0, #8
 8009426:	3308      	addeq	r3, #8
 8009428:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800942c:	bf04      	itt	eq
 800942e:	0100      	lsleq	r0, r0, #4
 8009430:	3304      	addeq	r3, #4
 8009432:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009436:	bf04      	itt	eq
 8009438:	0080      	lsleq	r0, r0, #2
 800943a:	3302      	addeq	r3, #2
 800943c:	2800      	cmp	r0, #0
 800943e:	db05      	blt.n	800944c <__hi0bits+0x38>
 8009440:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009444:	f103 0301 	add.w	r3, r3, #1
 8009448:	bf08      	it	eq
 800944a:	2320      	moveq	r3, #32
 800944c:	4618      	mov	r0, r3
 800944e:	4770      	bx	lr
 8009450:	2300      	movs	r3, #0
 8009452:	e7e4      	b.n	800941e <__hi0bits+0xa>

08009454 <__lo0bits>:
 8009454:	6803      	ldr	r3, [r0, #0]
 8009456:	f013 0207 	ands.w	r2, r3, #7
 800945a:	d00c      	beq.n	8009476 <__lo0bits+0x22>
 800945c:	07d9      	lsls	r1, r3, #31
 800945e:	d422      	bmi.n	80094a6 <__lo0bits+0x52>
 8009460:	079a      	lsls	r2, r3, #30
 8009462:	bf49      	itett	mi
 8009464:	085b      	lsrmi	r3, r3, #1
 8009466:	089b      	lsrpl	r3, r3, #2
 8009468:	6003      	strmi	r3, [r0, #0]
 800946a:	2201      	movmi	r2, #1
 800946c:	bf5c      	itt	pl
 800946e:	6003      	strpl	r3, [r0, #0]
 8009470:	2202      	movpl	r2, #2
 8009472:	4610      	mov	r0, r2
 8009474:	4770      	bx	lr
 8009476:	b299      	uxth	r1, r3
 8009478:	b909      	cbnz	r1, 800947e <__lo0bits+0x2a>
 800947a:	0c1b      	lsrs	r3, r3, #16
 800947c:	2210      	movs	r2, #16
 800947e:	b2d9      	uxtb	r1, r3
 8009480:	b909      	cbnz	r1, 8009486 <__lo0bits+0x32>
 8009482:	3208      	adds	r2, #8
 8009484:	0a1b      	lsrs	r3, r3, #8
 8009486:	0719      	lsls	r1, r3, #28
 8009488:	bf04      	itt	eq
 800948a:	091b      	lsreq	r3, r3, #4
 800948c:	3204      	addeq	r2, #4
 800948e:	0799      	lsls	r1, r3, #30
 8009490:	bf04      	itt	eq
 8009492:	089b      	lsreq	r3, r3, #2
 8009494:	3202      	addeq	r2, #2
 8009496:	07d9      	lsls	r1, r3, #31
 8009498:	d403      	bmi.n	80094a2 <__lo0bits+0x4e>
 800949a:	085b      	lsrs	r3, r3, #1
 800949c:	f102 0201 	add.w	r2, r2, #1
 80094a0:	d003      	beq.n	80094aa <__lo0bits+0x56>
 80094a2:	6003      	str	r3, [r0, #0]
 80094a4:	e7e5      	b.n	8009472 <__lo0bits+0x1e>
 80094a6:	2200      	movs	r2, #0
 80094a8:	e7e3      	b.n	8009472 <__lo0bits+0x1e>
 80094aa:	2220      	movs	r2, #32
 80094ac:	e7e1      	b.n	8009472 <__lo0bits+0x1e>
	...

080094b0 <__i2b>:
 80094b0:	b510      	push	{r4, lr}
 80094b2:	460c      	mov	r4, r1
 80094b4:	2101      	movs	r1, #1
 80094b6:	f7ff ff05 	bl	80092c4 <_Balloc>
 80094ba:	4602      	mov	r2, r0
 80094bc:	b928      	cbnz	r0, 80094ca <__i2b+0x1a>
 80094be:	4b05      	ldr	r3, [pc, #20]	; (80094d4 <__i2b+0x24>)
 80094c0:	4805      	ldr	r0, [pc, #20]	; (80094d8 <__i2b+0x28>)
 80094c2:	f240 1145 	movw	r1, #325	; 0x145
 80094c6:	f000 fca9 	bl	8009e1c <__assert_func>
 80094ca:	2301      	movs	r3, #1
 80094cc:	6144      	str	r4, [r0, #20]
 80094ce:	6103      	str	r3, [r0, #16]
 80094d0:	bd10      	pop	{r4, pc}
 80094d2:	bf00      	nop
 80094d4:	0800b914 	.word	0x0800b914
 80094d8:	0800b925 	.word	0x0800b925

080094dc <__multiply>:
 80094dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e0:	4691      	mov	r9, r2
 80094e2:	690a      	ldr	r2, [r1, #16]
 80094e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	bfb8      	it	lt
 80094ec:	460b      	movlt	r3, r1
 80094ee:	460c      	mov	r4, r1
 80094f0:	bfbc      	itt	lt
 80094f2:	464c      	movlt	r4, r9
 80094f4:	4699      	movlt	r9, r3
 80094f6:	6927      	ldr	r7, [r4, #16]
 80094f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80094fc:	68a3      	ldr	r3, [r4, #8]
 80094fe:	6861      	ldr	r1, [r4, #4]
 8009500:	eb07 060a 	add.w	r6, r7, sl
 8009504:	42b3      	cmp	r3, r6
 8009506:	b085      	sub	sp, #20
 8009508:	bfb8      	it	lt
 800950a:	3101      	addlt	r1, #1
 800950c:	f7ff feda 	bl	80092c4 <_Balloc>
 8009510:	b930      	cbnz	r0, 8009520 <__multiply+0x44>
 8009512:	4602      	mov	r2, r0
 8009514:	4b44      	ldr	r3, [pc, #272]	; (8009628 <__multiply+0x14c>)
 8009516:	4845      	ldr	r0, [pc, #276]	; (800962c <__multiply+0x150>)
 8009518:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800951c:	f000 fc7e 	bl	8009e1c <__assert_func>
 8009520:	f100 0514 	add.w	r5, r0, #20
 8009524:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009528:	462b      	mov	r3, r5
 800952a:	2200      	movs	r2, #0
 800952c:	4543      	cmp	r3, r8
 800952e:	d321      	bcc.n	8009574 <__multiply+0x98>
 8009530:	f104 0314 	add.w	r3, r4, #20
 8009534:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009538:	f109 0314 	add.w	r3, r9, #20
 800953c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009540:	9202      	str	r2, [sp, #8]
 8009542:	1b3a      	subs	r2, r7, r4
 8009544:	3a15      	subs	r2, #21
 8009546:	f022 0203 	bic.w	r2, r2, #3
 800954a:	3204      	adds	r2, #4
 800954c:	f104 0115 	add.w	r1, r4, #21
 8009550:	428f      	cmp	r7, r1
 8009552:	bf38      	it	cc
 8009554:	2204      	movcc	r2, #4
 8009556:	9201      	str	r2, [sp, #4]
 8009558:	9a02      	ldr	r2, [sp, #8]
 800955a:	9303      	str	r3, [sp, #12]
 800955c:	429a      	cmp	r2, r3
 800955e:	d80c      	bhi.n	800957a <__multiply+0x9e>
 8009560:	2e00      	cmp	r6, #0
 8009562:	dd03      	ble.n	800956c <__multiply+0x90>
 8009564:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009568:	2b00      	cmp	r3, #0
 800956a:	d05b      	beq.n	8009624 <__multiply+0x148>
 800956c:	6106      	str	r6, [r0, #16]
 800956e:	b005      	add	sp, #20
 8009570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009574:	f843 2b04 	str.w	r2, [r3], #4
 8009578:	e7d8      	b.n	800952c <__multiply+0x50>
 800957a:	f8b3 a000 	ldrh.w	sl, [r3]
 800957e:	f1ba 0f00 	cmp.w	sl, #0
 8009582:	d024      	beq.n	80095ce <__multiply+0xf2>
 8009584:	f104 0e14 	add.w	lr, r4, #20
 8009588:	46a9      	mov	r9, r5
 800958a:	f04f 0c00 	mov.w	ip, #0
 800958e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009592:	f8d9 1000 	ldr.w	r1, [r9]
 8009596:	fa1f fb82 	uxth.w	fp, r2
 800959a:	b289      	uxth	r1, r1
 800959c:	fb0a 110b 	mla	r1, sl, fp, r1
 80095a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80095a4:	f8d9 2000 	ldr.w	r2, [r9]
 80095a8:	4461      	add	r1, ip
 80095aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80095ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80095b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80095b6:	b289      	uxth	r1, r1
 80095b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80095bc:	4577      	cmp	r7, lr
 80095be:	f849 1b04 	str.w	r1, [r9], #4
 80095c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80095c6:	d8e2      	bhi.n	800958e <__multiply+0xb2>
 80095c8:	9a01      	ldr	r2, [sp, #4]
 80095ca:	f845 c002 	str.w	ip, [r5, r2]
 80095ce:	9a03      	ldr	r2, [sp, #12]
 80095d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80095d4:	3304      	adds	r3, #4
 80095d6:	f1b9 0f00 	cmp.w	r9, #0
 80095da:	d021      	beq.n	8009620 <__multiply+0x144>
 80095dc:	6829      	ldr	r1, [r5, #0]
 80095de:	f104 0c14 	add.w	ip, r4, #20
 80095e2:	46ae      	mov	lr, r5
 80095e4:	f04f 0a00 	mov.w	sl, #0
 80095e8:	f8bc b000 	ldrh.w	fp, [ip]
 80095ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80095f0:	fb09 220b 	mla	r2, r9, fp, r2
 80095f4:	4452      	add	r2, sl
 80095f6:	b289      	uxth	r1, r1
 80095f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80095fc:	f84e 1b04 	str.w	r1, [lr], #4
 8009600:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009604:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009608:	f8be 1000 	ldrh.w	r1, [lr]
 800960c:	fb09 110a 	mla	r1, r9, sl, r1
 8009610:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009614:	4567      	cmp	r7, ip
 8009616:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800961a:	d8e5      	bhi.n	80095e8 <__multiply+0x10c>
 800961c:	9a01      	ldr	r2, [sp, #4]
 800961e:	50a9      	str	r1, [r5, r2]
 8009620:	3504      	adds	r5, #4
 8009622:	e799      	b.n	8009558 <__multiply+0x7c>
 8009624:	3e01      	subs	r6, #1
 8009626:	e79b      	b.n	8009560 <__multiply+0x84>
 8009628:	0800b914 	.word	0x0800b914
 800962c:	0800b925 	.word	0x0800b925

08009630 <__pow5mult>:
 8009630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009634:	4615      	mov	r5, r2
 8009636:	f012 0203 	ands.w	r2, r2, #3
 800963a:	4606      	mov	r6, r0
 800963c:	460f      	mov	r7, r1
 800963e:	d007      	beq.n	8009650 <__pow5mult+0x20>
 8009640:	4c25      	ldr	r4, [pc, #148]	; (80096d8 <__pow5mult+0xa8>)
 8009642:	3a01      	subs	r2, #1
 8009644:	2300      	movs	r3, #0
 8009646:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800964a:	f7ff fe9d 	bl	8009388 <__multadd>
 800964e:	4607      	mov	r7, r0
 8009650:	10ad      	asrs	r5, r5, #2
 8009652:	d03d      	beq.n	80096d0 <__pow5mult+0xa0>
 8009654:	69f4      	ldr	r4, [r6, #28]
 8009656:	b97c      	cbnz	r4, 8009678 <__pow5mult+0x48>
 8009658:	2010      	movs	r0, #16
 800965a:	f7ff fd7f 	bl	800915c <malloc>
 800965e:	4602      	mov	r2, r0
 8009660:	61f0      	str	r0, [r6, #28]
 8009662:	b928      	cbnz	r0, 8009670 <__pow5mult+0x40>
 8009664:	4b1d      	ldr	r3, [pc, #116]	; (80096dc <__pow5mult+0xac>)
 8009666:	481e      	ldr	r0, [pc, #120]	; (80096e0 <__pow5mult+0xb0>)
 8009668:	f240 11b3 	movw	r1, #435	; 0x1b3
 800966c:	f000 fbd6 	bl	8009e1c <__assert_func>
 8009670:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009674:	6004      	str	r4, [r0, #0]
 8009676:	60c4      	str	r4, [r0, #12]
 8009678:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800967c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009680:	b94c      	cbnz	r4, 8009696 <__pow5mult+0x66>
 8009682:	f240 2171 	movw	r1, #625	; 0x271
 8009686:	4630      	mov	r0, r6
 8009688:	f7ff ff12 	bl	80094b0 <__i2b>
 800968c:	2300      	movs	r3, #0
 800968e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009692:	4604      	mov	r4, r0
 8009694:	6003      	str	r3, [r0, #0]
 8009696:	f04f 0900 	mov.w	r9, #0
 800969a:	07eb      	lsls	r3, r5, #31
 800969c:	d50a      	bpl.n	80096b4 <__pow5mult+0x84>
 800969e:	4639      	mov	r1, r7
 80096a0:	4622      	mov	r2, r4
 80096a2:	4630      	mov	r0, r6
 80096a4:	f7ff ff1a 	bl	80094dc <__multiply>
 80096a8:	4639      	mov	r1, r7
 80096aa:	4680      	mov	r8, r0
 80096ac:	4630      	mov	r0, r6
 80096ae:	f7ff fe49 	bl	8009344 <_Bfree>
 80096b2:	4647      	mov	r7, r8
 80096b4:	106d      	asrs	r5, r5, #1
 80096b6:	d00b      	beq.n	80096d0 <__pow5mult+0xa0>
 80096b8:	6820      	ldr	r0, [r4, #0]
 80096ba:	b938      	cbnz	r0, 80096cc <__pow5mult+0x9c>
 80096bc:	4622      	mov	r2, r4
 80096be:	4621      	mov	r1, r4
 80096c0:	4630      	mov	r0, r6
 80096c2:	f7ff ff0b 	bl	80094dc <__multiply>
 80096c6:	6020      	str	r0, [r4, #0]
 80096c8:	f8c0 9000 	str.w	r9, [r0]
 80096cc:	4604      	mov	r4, r0
 80096ce:	e7e4      	b.n	800969a <__pow5mult+0x6a>
 80096d0:	4638      	mov	r0, r7
 80096d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096d6:	bf00      	nop
 80096d8:	0800ba70 	.word	0x0800ba70
 80096dc:	0800b8a5 	.word	0x0800b8a5
 80096e0:	0800b925 	.word	0x0800b925

080096e4 <__lshift>:
 80096e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096e8:	460c      	mov	r4, r1
 80096ea:	6849      	ldr	r1, [r1, #4]
 80096ec:	6923      	ldr	r3, [r4, #16]
 80096ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80096f2:	68a3      	ldr	r3, [r4, #8]
 80096f4:	4607      	mov	r7, r0
 80096f6:	4691      	mov	r9, r2
 80096f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80096fc:	f108 0601 	add.w	r6, r8, #1
 8009700:	42b3      	cmp	r3, r6
 8009702:	db0b      	blt.n	800971c <__lshift+0x38>
 8009704:	4638      	mov	r0, r7
 8009706:	f7ff fddd 	bl	80092c4 <_Balloc>
 800970a:	4605      	mov	r5, r0
 800970c:	b948      	cbnz	r0, 8009722 <__lshift+0x3e>
 800970e:	4602      	mov	r2, r0
 8009710:	4b28      	ldr	r3, [pc, #160]	; (80097b4 <__lshift+0xd0>)
 8009712:	4829      	ldr	r0, [pc, #164]	; (80097b8 <__lshift+0xd4>)
 8009714:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009718:	f000 fb80 	bl	8009e1c <__assert_func>
 800971c:	3101      	adds	r1, #1
 800971e:	005b      	lsls	r3, r3, #1
 8009720:	e7ee      	b.n	8009700 <__lshift+0x1c>
 8009722:	2300      	movs	r3, #0
 8009724:	f100 0114 	add.w	r1, r0, #20
 8009728:	f100 0210 	add.w	r2, r0, #16
 800972c:	4618      	mov	r0, r3
 800972e:	4553      	cmp	r3, sl
 8009730:	db33      	blt.n	800979a <__lshift+0xb6>
 8009732:	6920      	ldr	r0, [r4, #16]
 8009734:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009738:	f104 0314 	add.w	r3, r4, #20
 800973c:	f019 091f 	ands.w	r9, r9, #31
 8009740:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009744:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009748:	d02b      	beq.n	80097a2 <__lshift+0xbe>
 800974a:	f1c9 0e20 	rsb	lr, r9, #32
 800974e:	468a      	mov	sl, r1
 8009750:	2200      	movs	r2, #0
 8009752:	6818      	ldr	r0, [r3, #0]
 8009754:	fa00 f009 	lsl.w	r0, r0, r9
 8009758:	4310      	orrs	r0, r2
 800975a:	f84a 0b04 	str.w	r0, [sl], #4
 800975e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009762:	459c      	cmp	ip, r3
 8009764:	fa22 f20e 	lsr.w	r2, r2, lr
 8009768:	d8f3      	bhi.n	8009752 <__lshift+0x6e>
 800976a:	ebac 0304 	sub.w	r3, ip, r4
 800976e:	3b15      	subs	r3, #21
 8009770:	f023 0303 	bic.w	r3, r3, #3
 8009774:	3304      	adds	r3, #4
 8009776:	f104 0015 	add.w	r0, r4, #21
 800977a:	4584      	cmp	ip, r0
 800977c:	bf38      	it	cc
 800977e:	2304      	movcc	r3, #4
 8009780:	50ca      	str	r2, [r1, r3]
 8009782:	b10a      	cbz	r2, 8009788 <__lshift+0xa4>
 8009784:	f108 0602 	add.w	r6, r8, #2
 8009788:	3e01      	subs	r6, #1
 800978a:	4638      	mov	r0, r7
 800978c:	612e      	str	r6, [r5, #16]
 800978e:	4621      	mov	r1, r4
 8009790:	f7ff fdd8 	bl	8009344 <_Bfree>
 8009794:	4628      	mov	r0, r5
 8009796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800979a:	f842 0f04 	str.w	r0, [r2, #4]!
 800979e:	3301      	adds	r3, #1
 80097a0:	e7c5      	b.n	800972e <__lshift+0x4a>
 80097a2:	3904      	subs	r1, #4
 80097a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80097a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80097ac:	459c      	cmp	ip, r3
 80097ae:	d8f9      	bhi.n	80097a4 <__lshift+0xc0>
 80097b0:	e7ea      	b.n	8009788 <__lshift+0xa4>
 80097b2:	bf00      	nop
 80097b4:	0800b914 	.word	0x0800b914
 80097b8:	0800b925 	.word	0x0800b925

080097bc <__mcmp>:
 80097bc:	b530      	push	{r4, r5, lr}
 80097be:	6902      	ldr	r2, [r0, #16]
 80097c0:	690c      	ldr	r4, [r1, #16]
 80097c2:	1b12      	subs	r2, r2, r4
 80097c4:	d10e      	bne.n	80097e4 <__mcmp+0x28>
 80097c6:	f100 0314 	add.w	r3, r0, #20
 80097ca:	3114      	adds	r1, #20
 80097cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80097d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80097d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80097d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80097dc:	42a5      	cmp	r5, r4
 80097de:	d003      	beq.n	80097e8 <__mcmp+0x2c>
 80097e0:	d305      	bcc.n	80097ee <__mcmp+0x32>
 80097e2:	2201      	movs	r2, #1
 80097e4:	4610      	mov	r0, r2
 80097e6:	bd30      	pop	{r4, r5, pc}
 80097e8:	4283      	cmp	r3, r0
 80097ea:	d3f3      	bcc.n	80097d4 <__mcmp+0x18>
 80097ec:	e7fa      	b.n	80097e4 <__mcmp+0x28>
 80097ee:	f04f 32ff 	mov.w	r2, #4294967295
 80097f2:	e7f7      	b.n	80097e4 <__mcmp+0x28>

080097f4 <__mdiff>:
 80097f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f8:	460c      	mov	r4, r1
 80097fa:	4606      	mov	r6, r0
 80097fc:	4611      	mov	r1, r2
 80097fe:	4620      	mov	r0, r4
 8009800:	4690      	mov	r8, r2
 8009802:	f7ff ffdb 	bl	80097bc <__mcmp>
 8009806:	1e05      	subs	r5, r0, #0
 8009808:	d110      	bne.n	800982c <__mdiff+0x38>
 800980a:	4629      	mov	r1, r5
 800980c:	4630      	mov	r0, r6
 800980e:	f7ff fd59 	bl	80092c4 <_Balloc>
 8009812:	b930      	cbnz	r0, 8009822 <__mdiff+0x2e>
 8009814:	4b3a      	ldr	r3, [pc, #232]	; (8009900 <__mdiff+0x10c>)
 8009816:	4602      	mov	r2, r0
 8009818:	f240 2137 	movw	r1, #567	; 0x237
 800981c:	4839      	ldr	r0, [pc, #228]	; (8009904 <__mdiff+0x110>)
 800981e:	f000 fafd 	bl	8009e1c <__assert_func>
 8009822:	2301      	movs	r3, #1
 8009824:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009828:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800982c:	bfa4      	itt	ge
 800982e:	4643      	movge	r3, r8
 8009830:	46a0      	movge	r8, r4
 8009832:	4630      	mov	r0, r6
 8009834:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009838:	bfa6      	itte	ge
 800983a:	461c      	movge	r4, r3
 800983c:	2500      	movge	r5, #0
 800983e:	2501      	movlt	r5, #1
 8009840:	f7ff fd40 	bl	80092c4 <_Balloc>
 8009844:	b920      	cbnz	r0, 8009850 <__mdiff+0x5c>
 8009846:	4b2e      	ldr	r3, [pc, #184]	; (8009900 <__mdiff+0x10c>)
 8009848:	4602      	mov	r2, r0
 800984a:	f240 2145 	movw	r1, #581	; 0x245
 800984e:	e7e5      	b.n	800981c <__mdiff+0x28>
 8009850:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009854:	6926      	ldr	r6, [r4, #16]
 8009856:	60c5      	str	r5, [r0, #12]
 8009858:	f104 0914 	add.w	r9, r4, #20
 800985c:	f108 0514 	add.w	r5, r8, #20
 8009860:	f100 0e14 	add.w	lr, r0, #20
 8009864:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009868:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800986c:	f108 0210 	add.w	r2, r8, #16
 8009870:	46f2      	mov	sl, lr
 8009872:	2100      	movs	r1, #0
 8009874:	f859 3b04 	ldr.w	r3, [r9], #4
 8009878:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800987c:	fa11 f88b 	uxtah	r8, r1, fp
 8009880:	b299      	uxth	r1, r3
 8009882:	0c1b      	lsrs	r3, r3, #16
 8009884:	eba8 0801 	sub.w	r8, r8, r1
 8009888:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800988c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009890:	fa1f f888 	uxth.w	r8, r8
 8009894:	1419      	asrs	r1, r3, #16
 8009896:	454e      	cmp	r6, r9
 8009898:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800989c:	f84a 3b04 	str.w	r3, [sl], #4
 80098a0:	d8e8      	bhi.n	8009874 <__mdiff+0x80>
 80098a2:	1b33      	subs	r3, r6, r4
 80098a4:	3b15      	subs	r3, #21
 80098a6:	f023 0303 	bic.w	r3, r3, #3
 80098aa:	3304      	adds	r3, #4
 80098ac:	3415      	adds	r4, #21
 80098ae:	42a6      	cmp	r6, r4
 80098b0:	bf38      	it	cc
 80098b2:	2304      	movcc	r3, #4
 80098b4:	441d      	add	r5, r3
 80098b6:	4473      	add	r3, lr
 80098b8:	469e      	mov	lr, r3
 80098ba:	462e      	mov	r6, r5
 80098bc:	4566      	cmp	r6, ip
 80098be:	d30e      	bcc.n	80098de <__mdiff+0xea>
 80098c0:	f10c 0203 	add.w	r2, ip, #3
 80098c4:	1b52      	subs	r2, r2, r5
 80098c6:	f022 0203 	bic.w	r2, r2, #3
 80098ca:	3d03      	subs	r5, #3
 80098cc:	45ac      	cmp	ip, r5
 80098ce:	bf38      	it	cc
 80098d0:	2200      	movcc	r2, #0
 80098d2:	4413      	add	r3, r2
 80098d4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80098d8:	b17a      	cbz	r2, 80098fa <__mdiff+0x106>
 80098da:	6107      	str	r7, [r0, #16]
 80098dc:	e7a4      	b.n	8009828 <__mdiff+0x34>
 80098de:	f856 8b04 	ldr.w	r8, [r6], #4
 80098e2:	fa11 f288 	uxtah	r2, r1, r8
 80098e6:	1414      	asrs	r4, r2, #16
 80098e8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80098ec:	b292      	uxth	r2, r2
 80098ee:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80098f2:	f84e 2b04 	str.w	r2, [lr], #4
 80098f6:	1421      	asrs	r1, r4, #16
 80098f8:	e7e0      	b.n	80098bc <__mdiff+0xc8>
 80098fa:	3f01      	subs	r7, #1
 80098fc:	e7ea      	b.n	80098d4 <__mdiff+0xe0>
 80098fe:	bf00      	nop
 8009900:	0800b914 	.word	0x0800b914
 8009904:	0800b925 	.word	0x0800b925

08009908 <__d2b>:
 8009908:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800990c:	460f      	mov	r7, r1
 800990e:	2101      	movs	r1, #1
 8009910:	ec59 8b10 	vmov	r8, r9, d0
 8009914:	4616      	mov	r6, r2
 8009916:	f7ff fcd5 	bl	80092c4 <_Balloc>
 800991a:	4604      	mov	r4, r0
 800991c:	b930      	cbnz	r0, 800992c <__d2b+0x24>
 800991e:	4602      	mov	r2, r0
 8009920:	4b24      	ldr	r3, [pc, #144]	; (80099b4 <__d2b+0xac>)
 8009922:	4825      	ldr	r0, [pc, #148]	; (80099b8 <__d2b+0xb0>)
 8009924:	f240 310f 	movw	r1, #783	; 0x30f
 8009928:	f000 fa78 	bl	8009e1c <__assert_func>
 800992c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009930:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009934:	bb2d      	cbnz	r5, 8009982 <__d2b+0x7a>
 8009936:	9301      	str	r3, [sp, #4]
 8009938:	f1b8 0300 	subs.w	r3, r8, #0
 800993c:	d026      	beq.n	800998c <__d2b+0x84>
 800993e:	4668      	mov	r0, sp
 8009940:	9300      	str	r3, [sp, #0]
 8009942:	f7ff fd87 	bl	8009454 <__lo0bits>
 8009946:	e9dd 1200 	ldrd	r1, r2, [sp]
 800994a:	b1e8      	cbz	r0, 8009988 <__d2b+0x80>
 800994c:	f1c0 0320 	rsb	r3, r0, #32
 8009950:	fa02 f303 	lsl.w	r3, r2, r3
 8009954:	430b      	orrs	r3, r1
 8009956:	40c2      	lsrs	r2, r0
 8009958:	6163      	str	r3, [r4, #20]
 800995a:	9201      	str	r2, [sp, #4]
 800995c:	9b01      	ldr	r3, [sp, #4]
 800995e:	61a3      	str	r3, [r4, #24]
 8009960:	2b00      	cmp	r3, #0
 8009962:	bf14      	ite	ne
 8009964:	2202      	movne	r2, #2
 8009966:	2201      	moveq	r2, #1
 8009968:	6122      	str	r2, [r4, #16]
 800996a:	b1bd      	cbz	r5, 800999c <__d2b+0x94>
 800996c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009970:	4405      	add	r5, r0
 8009972:	603d      	str	r5, [r7, #0]
 8009974:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009978:	6030      	str	r0, [r6, #0]
 800997a:	4620      	mov	r0, r4
 800997c:	b003      	add	sp, #12
 800997e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009982:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009986:	e7d6      	b.n	8009936 <__d2b+0x2e>
 8009988:	6161      	str	r1, [r4, #20]
 800998a:	e7e7      	b.n	800995c <__d2b+0x54>
 800998c:	a801      	add	r0, sp, #4
 800998e:	f7ff fd61 	bl	8009454 <__lo0bits>
 8009992:	9b01      	ldr	r3, [sp, #4]
 8009994:	6163      	str	r3, [r4, #20]
 8009996:	3020      	adds	r0, #32
 8009998:	2201      	movs	r2, #1
 800999a:	e7e5      	b.n	8009968 <__d2b+0x60>
 800999c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80099a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80099a4:	6038      	str	r0, [r7, #0]
 80099a6:	6918      	ldr	r0, [r3, #16]
 80099a8:	f7ff fd34 	bl	8009414 <__hi0bits>
 80099ac:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80099b0:	e7e2      	b.n	8009978 <__d2b+0x70>
 80099b2:	bf00      	nop
 80099b4:	0800b914 	.word	0x0800b914
 80099b8:	0800b925 	.word	0x0800b925

080099bc <__ssputs_r>:
 80099bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099c0:	688e      	ldr	r6, [r1, #8]
 80099c2:	461f      	mov	r7, r3
 80099c4:	42be      	cmp	r6, r7
 80099c6:	680b      	ldr	r3, [r1, #0]
 80099c8:	4682      	mov	sl, r0
 80099ca:	460c      	mov	r4, r1
 80099cc:	4690      	mov	r8, r2
 80099ce:	d82c      	bhi.n	8009a2a <__ssputs_r+0x6e>
 80099d0:	898a      	ldrh	r2, [r1, #12]
 80099d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80099d6:	d026      	beq.n	8009a26 <__ssputs_r+0x6a>
 80099d8:	6965      	ldr	r5, [r4, #20]
 80099da:	6909      	ldr	r1, [r1, #16]
 80099dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099e0:	eba3 0901 	sub.w	r9, r3, r1
 80099e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099e8:	1c7b      	adds	r3, r7, #1
 80099ea:	444b      	add	r3, r9
 80099ec:	106d      	asrs	r5, r5, #1
 80099ee:	429d      	cmp	r5, r3
 80099f0:	bf38      	it	cc
 80099f2:	461d      	movcc	r5, r3
 80099f4:	0553      	lsls	r3, r2, #21
 80099f6:	d527      	bpl.n	8009a48 <__ssputs_r+0x8c>
 80099f8:	4629      	mov	r1, r5
 80099fa:	f7ff fbd7 	bl	80091ac <_malloc_r>
 80099fe:	4606      	mov	r6, r0
 8009a00:	b360      	cbz	r0, 8009a5c <__ssputs_r+0xa0>
 8009a02:	6921      	ldr	r1, [r4, #16]
 8009a04:	464a      	mov	r2, r9
 8009a06:	f7fe fcd4 	bl	80083b2 <memcpy>
 8009a0a:	89a3      	ldrh	r3, [r4, #12]
 8009a0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a14:	81a3      	strh	r3, [r4, #12]
 8009a16:	6126      	str	r6, [r4, #16]
 8009a18:	6165      	str	r5, [r4, #20]
 8009a1a:	444e      	add	r6, r9
 8009a1c:	eba5 0509 	sub.w	r5, r5, r9
 8009a20:	6026      	str	r6, [r4, #0]
 8009a22:	60a5      	str	r5, [r4, #8]
 8009a24:	463e      	mov	r6, r7
 8009a26:	42be      	cmp	r6, r7
 8009a28:	d900      	bls.n	8009a2c <__ssputs_r+0x70>
 8009a2a:	463e      	mov	r6, r7
 8009a2c:	6820      	ldr	r0, [r4, #0]
 8009a2e:	4632      	mov	r2, r6
 8009a30:	4641      	mov	r1, r8
 8009a32:	f000 f9c9 	bl	8009dc8 <memmove>
 8009a36:	68a3      	ldr	r3, [r4, #8]
 8009a38:	1b9b      	subs	r3, r3, r6
 8009a3a:	60a3      	str	r3, [r4, #8]
 8009a3c:	6823      	ldr	r3, [r4, #0]
 8009a3e:	4433      	add	r3, r6
 8009a40:	6023      	str	r3, [r4, #0]
 8009a42:	2000      	movs	r0, #0
 8009a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a48:	462a      	mov	r2, r5
 8009a4a:	f000 fa2d 	bl	8009ea8 <_realloc_r>
 8009a4e:	4606      	mov	r6, r0
 8009a50:	2800      	cmp	r0, #0
 8009a52:	d1e0      	bne.n	8009a16 <__ssputs_r+0x5a>
 8009a54:	6921      	ldr	r1, [r4, #16]
 8009a56:	4650      	mov	r0, sl
 8009a58:	f7ff fb34 	bl	80090c4 <_free_r>
 8009a5c:	230c      	movs	r3, #12
 8009a5e:	f8ca 3000 	str.w	r3, [sl]
 8009a62:	89a3      	ldrh	r3, [r4, #12]
 8009a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a68:	81a3      	strh	r3, [r4, #12]
 8009a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a6e:	e7e9      	b.n	8009a44 <__ssputs_r+0x88>

08009a70 <_svfiprintf_r>:
 8009a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a74:	4698      	mov	r8, r3
 8009a76:	898b      	ldrh	r3, [r1, #12]
 8009a78:	061b      	lsls	r3, r3, #24
 8009a7a:	b09d      	sub	sp, #116	; 0x74
 8009a7c:	4607      	mov	r7, r0
 8009a7e:	460d      	mov	r5, r1
 8009a80:	4614      	mov	r4, r2
 8009a82:	d50e      	bpl.n	8009aa2 <_svfiprintf_r+0x32>
 8009a84:	690b      	ldr	r3, [r1, #16]
 8009a86:	b963      	cbnz	r3, 8009aa2 <_svfiprintf_r+0x32>
 8009a88:	2140      	movs	r1, #64	; 0x40
 8009a8a:	f7ff fb8f 	bl	80091ac <_malloc_r>
 8009a8e:	6028      	str	r0, [r5, #0]
 8009a90:	6128      	str	r0, [r5, #16]
 8009a92:	b920      	cbnz	r0, 8009a9e <_svfiprintf_r+0x2e>
 8009a94:	230c      	movs	r3, #12
 8009a96:	603b      	str	r3, [r7, #0]
 8009a98:	f04f 30ff 	mov.w	r0, #4294967295
 8009a9c:	e0d0      	b.n	8009c40 <_svfiprintf_r+0x1d0>
 8009a9e:	2340      	movs	r3, #64	; 0x40
 8009aa0:	616b      	str	r3, [r5, #20]
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	9309      	str	r3, [sp, #36]	; 0x24
 8009aa6:	2320      	movs	r3, #32
 8009aa8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009aac:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ab0:	2330      	movs	r3, #48	; 0x30
 8009ab2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009c58 <_svfiprintf_r+0x1e8>
 8009ab6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009aba:	f04f 0901 	mov.w	r9, #1
 8009abe:	4623      	mov	r3, r4
 8009ac0:	469a      	mov	sl, r3
 8009ac2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ac6:	b10a      	cbz	r2, 8009acc <_svfiprintf_r+0x5c>
 8009ac8:	2a25      	cmp	r2, #37	; 0x25
 8009aca:	d1f9      	bne.n	8009ac0 <_svfiprintf_r+0x50>
 8009acc:	ebba 0b04 	subs.w	fp, sl, r4
 8009ad0:	d00b      	beq.n	8009aea <_svfiprintf_r+0x7a>
 8009ad2:	465b      	mov	r3, fp
 8009ad4:	4622      	mov	r2, r4
 8009ad6:	4629      	mov	r1, r5
 8009ad8:	4638      	mov	r0, r7
 8009ada:	f7ff ff6f 	bl	80099bc <__ssputs_r>
 8009ade:	3001      	adds	r0, #1
 8009ae0:	f000 80a9 	beq.w	8009c36 <_svfiprintf_r+0x1c6>
 8009ae4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ae6:	445a      	add	r2, fp
 8009ae8:	9209      	str	r2, [sp, #36]	; 0x24
 8009aea:	f89a 3000 	ldrb.w	r3, [sl]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	f000 80a1 	beq.w	8009c36 <_svfiprintf_r+0x1c6>
 8009af4:	2300      	movs	r3, #0
 8009af6:	f04f 32ff 	mov.w	r2, #4294967295
 8009afa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009afe:	f10a 0a01 	add.w	sl, sl, #1
 8009b02:	9304      	str	r3, [sp, #16]
 8009b04:	9307      	str	r3, [sp, #28]
 8009b06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b0a:	931a      	str	r3, [sp, #104]	; 0x68
 8009b0c:	4654      	mov	r4, sl
 8009b0e:	2205      	movs	r2, #5
 8009b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b14:	4850      	ldr	r0, [pc, #320]	; (8009c58 <_svfiprintf_r+0x1e8>)
 8009b16:	f7f6 fb7b 	bl	8000210 <memchr>
 8009b1a:	9a04      	ldr	r2, [sp, #16]
 8009b1c:	b9d8      	cbnz	r0, 8009b56 <_svfiprintf_r+0xe6>
 8009b1e:	06d0      	lsls	r0, r2, #27
 8009b20:	bf44      	itt	mi
 8009b22:	2320      	movmi	r3, #32
 8009b24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b28:	0711      	lsls	r1, r2, #28
 8009b2a:	bf44      	itt	mi
 8009b2c:	232b      	movmi	r3, #43	; 0x2b
 8009b2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b32:	f89a 3000 	ldrb.w	r3, [sl]
 8009b36:	2b2a      	cmp	r3, #42	; 0x2a
 8009b38:	d015      	beq.n	8009b66 <_svfiprintf_r+0xf6>
 8009b3a:	9a07      	ldr	r2, [sp, #28]
 8009b3c:	4654      	mov	r4, sl
 8009b3e:	2000      	movs	r0, #0
 8009b40:	f04f 0c0a 	mov.w	ip, #10
 8009b44:	4621      	mov	r1, r4
 8009b46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b4a:	3b30      	subs	r3, #48	; 0x30
 8009b4c:	2b09      	cmp	r3, #9
 8009b4e:	d94d      	bls.n	8009bec <_svfiprintf_r+0x17c>
 8009b50:	b1b0      	cbz	r0, 8009b80 <_svfiprintf_r+0x110>
 8009b52:	9207      	str	r2, [sp, #28]
 8009b54:	e014      	b.n	8009b80 <_svfiprintf_r+0x110>
 8009b56:	eba0 0308 	sub.w	r3, r0, r8
 8009b5a:	fa09 f303 	lsl.w	r3, r9, r3
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	9304      	str	r3, [sp, #16]
 8009b62:	46a2      	mov	sl, r4
 8009b64:	e7d2      	b.n	8009b0c <_svfiprintf_r+0x9c>
 8009b66:	9b03      	ldr	r3, [sp, #12]
 8009b68:	1d19      	adds	r1, r3, #4
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	9103      	str	r1, [sp, #12]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	bfbb      	ittet	lt
 8009b72:	425b      	neglt	r3, r3
 8009b74:	f042 0202 	orrlt.w	r2, r2, #2
 8009b78:	9307      	strge	r3, [sp, #28]
 8009b7a:	9307      	strlt	r3, [sp, #28]
 8009b7c:	bfb8      	it	lt
 8009b7e:	9204      	strlt	r2, [sp, #16]
 8009b80:	7823      	ldrb	r3, [r4, #0]
 8009b82:	2b2e      	cmp	r3, #46	; 0x2e
 8009b84:	d10c      	bne.n	8009ba0 <_svfiprintf_r+0x130>
 8009b86:	7863      	ldrb	r3, [r4, #1]
 8009b88:	2b2a      	cmp	r3, #42	; 0x2a
 8009b8a:	d134      	bne.n	8009bf6 <_svfiprintf_r+0x186>
 8009b8c:	9b03      	ldr	r3, [sp, #12]
 8009b8e:	1d1a      	adds	r2, r3, #4
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	9203      	str	r2, [sp, #12]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	bfb8      	it	lt
 8009b98:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b9c:	3402      	adds	r4, #2
 8009b9e:	9305      	str	r3, [sp, #20]
 8009ba0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009c68 <_svfiprintf_r+0x1f8>
 8009ba4:	7821      	ldrb	r1, [r4, #0]
 8009ba6:	2203      	movs	r2, #3
 8009ba8:	4650      	mov	r0, sl
 8009baa:	f7f6 fb31 	bl	8000210 <memchr>
 8009bae:	b138      	cbz	r0, 8009bc0 <_svfiprintf_r+0x150>
 8009bb0:	9b04      	ldr	r3, [sp, #16]
 8009bb2:	eba0 000a 	sub.w	r0, r0, sl
 8009bb6:	2240      	movs	r2, #64	; 0x40
 8009bb8:	4082      	lsls	r2, r0
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	3401      	adds	r4, #1
 8009bbe:	9304      	str	r3, [sp, #16]
 8009bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bc4:	4825      	ldr	r0, [pc, #148]	; (8009c5c <_svfiprintf_r+0x1ec>)
 8009bc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bca:	2206      	movs	r2, #6
 8009bcc:	f7f6 fb20 	bl	8000210 <memchr>
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	d038      	beq.n	8009c46 <_svfiprintf_r+0x1d6>
 8009bd4:	4b22      	ldr	r3, [pc, #136]	; (8009c60 <_svfiprintf_r+0x1f0>)
 8009bd6:	bb1b      	cbnz	r3, 8009c20 <_svfiprintf_r+0x1b0>
 8009bd8:	9b03      	ldr	r3, [sp, #12]
 8009bda:	3307      	adds	r3, #7
 8009bdc:	f023 0307 	bic.w	r3, r3, #7
 8009be0:	3308      	adds	r3, #8
 8009be2:	9303      	str	r3, [sp, #12]
 8009be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009be6:	4433      	add	r3, r6
 8009be8:	9309      	str	r3, [sp, #36]	; 0x24
 8009bea:	e768      	b.n	8009abe <_svfiprintf_r+0x4e>
 8009bec:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bf0:	460c      	mov	r4, r1
 8009bf2:	2001      	movs	r0, #1
 8009bf4:	e7a6      	b.n	8009b44 <_svfiprintf_r+0xd4>
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	3401      	adds	r4, #1
 8009bfa:	9305      	str	r3, [sp, #20]
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	f04f 0c0a 	mov.w	ip, #10
 8009c02:	4620      	mov	r0, r4
 8009c04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c08:	3a30      	subs	r2, #48	; 0x30
 8009c0a:	2a09      	cmp	r2, #9
 8009c0c:	d903      	bls.n	8009c16 <_svfiprintf_r+0x1a6>
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d0c6      	beq.n	8009ba0 <_svfiprintf_r+0x130>
 8009c12:	9105      	str	r1, [sp, #20]
 8009c14:	e7c4      	b.n	8009ba0 <_svfiprintf_r+0x130>
 8009c16:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c1a:	4604      	mov	r4, r0
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	e7f0      	b.n	8009c02 <_svfiprintf_r+0x192>
 8009c20:	ab03      	add	r3, sp, #12
 8009c22:	9300      	str	r3, [sp, #0]
 8009c24:	462a      	mov	r2, r5
 8009c26:	4b0f      	ldr	r3, [pc, #60]	; (8009c64 <_svfiprintf_r+0x1f4>)
 8009c28:	a904      	add	r1, sp, #16
 8009c2a:	4638      	mov	r0, r7
 8009c2c:	f7fd fe56 	bl	80078dc <_printf_float>
 8009c30:	1c42      	adds	r2, r0, #1
 8009c32:	4606      	mov	r6, r0
 8009c34:	d1d6      	bne.n	8009be4 <_svfiprintf_r+0x174>
 8009c36:	89ab      	ldrh	r3, [r5, #12]
 8009c38:	065b      	lsls	r3, r3, #25
 8009c3a:	f53f af2d 	bmi.w	8009a98 <_svfiprintf_r+0x28>
 8009c3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c40:	b01d      	add	sp, #116	; 0x74
 8009c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c46:	ab03      	add	r3, sp, #12
 8009c48:	9300      	str	r3, [sp, #0]
 8009c4a:	462a      	mov	r2, r5
 8009c4c:	4b05      	ldr	r3, [pc, #20]	; (8009c64 <_svfiprintf_r+0x1f4>)
 8009c4e:	a904      	add	r1, sp, #16
 8009c50:	4638      	mov	r0, r7
 8009c52:	f7fe f8e7 	bl	8007e24 <_printf_i>
 8009c56:	e7eb      	b.n	8009c30 <_svfiprintf_r+0x1c0>
 8009c58:	0800ba7c 	.word	0x0800ba7c
 8009c5c:	0800ba86 	.word	0x0800ba86
 8009c60:	080078dd 	.word	0x080078dd
 8009c64:	080099bd 	.word	0x080099bd
 8009c68:	0800ba82 	.word	0x0800ba82

08009c6c <__sflush_r>:
 8009c6c:	898a      	ldrh	r2, [r1, #12]
 8009c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c72:	4605      	mov	r5, r0
 8009c74:	0710      	lsls	r0, r2, #28
 8009c76:	460c      	mov	r4, r1
 8009c78:	d458      	bmi.n	8009d2c <__sflush_r+0xc0>
 8009c7a:	684b      	ldr	r3, [r1, #4]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	dc05      	bgt.n	8009c8c <__sflush_r+0x20>
 8009c80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	dc02      	bgt.n	8009c8c <__sflush_r+0x20>
 8009c86:	2000      	movs	r0, #0
 8009c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c8e:	2e00      	cmp	r6, #0
 8009c90:	d0f9      	beq.n	8009c86 <__sflush_r+0x1a>
 8009c92:	2300      	movs	r3, #0
 8009c94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c98:	682f      	ldr	r7, [r5, #0]
 8009c9a:	6a21      	ldr	r1, [r4, #32]
 8009c9c:	602b      	str	r3, [r5, #0]
 8009c9e:	d032      	beq.n	8009d06 <__sflush_r+0x9a>
 8009ca0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ca2:	89a3      	ldrh	r3, [r4, #12]
 8009ca4:	075a      	lsls	r2, r3, #29
 8009ca6:	d505      	bpl.n	8009cb4 <__sflush_r+0x48>
 8009ca8:	6863      	ldr	r3, [r4, #4]
 8009caa:	1ac0      	subs	r0, r0, r3
 8009cac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009cae:	b10b      	cbz	r3, 8009cb4 <__sflush_r+0x48>
 8009cb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009cb2:	1ac0      	subs	r0, r0, r3
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cba:	6a21      	ldr	r1, [r4, #32]
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	47b0      	blx	r6
 8009cc0:	1c43      	adds	r3, r0, #1
 8009cc2:	89a3      	ldrh	r3, [r4, #12]
 8009cc4:	d106      	bne.n	8009cd4 <__sflush_r+0x68>
 8009cc6:	6829      	ldr	r1, [r5, #0]
 8009cc8:	291d      	cmp	r1, #29
 8009cca:	d82b      	bhi.n	8009d24 <__sflush_r+0xb8>
 8009ccc:	4a29      	ldr	r2, [pc, #164]	; (8009d74 <__sflush_r+0x108>)
 8009cce:	410a      	asrs	r2, r1
 8009cd0:	07d6      	lsls	r6, r2, #31
 8009cd2:	d427      	bmi.n	8009d24 <__sflush_r+0xb8>
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	6062      	str	r2, [r4, #4]
 8009cd8:	04d9      	lsls	r1, r3, #19
 8009cda:	6922      	ldr	r2, [r4, #16]
 8009cdc:	6022      	str	r2, [r4, #0]
 8009cde:	d504      	bpl.n	8009cea <__sflush_r+0x7e>
 8009ce0:	1c42      	adds	r2, r0, #1
 8009ce2:	d101      	bne.n	8009ce8 <__sflush_r+0x7c>
 8009ce4:	682b      	ldr	r3, [r5, #0]
 8009ce6:	b903      	cbnz	r3, 8009cea <__sflush_r+0x7e>
 8009ce8:	6560      	str	r0, [r4, #84]	; 0x54
 8009cea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cec:	602f      	str	r7, [r5, #0]
 8009cee:	2900      	cmp	r1, #0
 8009cf0:	d0c9      	beq.n	8009c86 <__sflush_r+0x1a>
 8009cf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cf6:	4299      	cmp	r1, r3
 8009cf8:	d002      	beq.n	8009d00 <__sflush_r+0x94>
 8009cfa:	4628      	mov	r0, r5
 8009cfc:	f7ff f9e2 	bl	80090c4 <_free_r>
 8009d00:	2000      	movs	r0, #0
 8009d02:	6360      	str	r0, [r4, #52]	; 0x34
 8009d04:	e7c0      	b.n	8009c88 <__sflush_r+0x1c>
 8009d06:	2301      	movs	r3, #1
 8009d08:	4628      	mov	r0, r5
 8009d0a:	47b0      	blx	r6
 8009d0c:	1c41      	adds	r1, r0, #1
 8009d0e:	d1c8      	bne.n	8009ca2 <__sflush_r+0x36>
 8009d10:	682b      	ldr	r3, [r5, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d0c5      	beq.n	8009ca2 <__sflush_r+0x36>
 8009d16:	2b1d      	cmp	r3, #29
 8009d18:	d001      	beq.n	8009d1e <__sflush_r+0xb2>
 8009d1a:	2b16      	cmp	r3, #22
 8009d1c:	d101      	bne.n	8009d22 <__sflush_r+0xb6>
 8009d1e:	602f      	str	r7, [r5, #0]
 8009d20:	e7b1      	b.n	8009c86 <__sflush_r+0x1a>
 8009d22:	89a3      	ldrh	r3, [r4, #12]
 8009d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d28:	81a3      	strh	r3, [r4, #12]
 8009d2a:	e7ad      	b.n	8009c88 <__sflush_r+0x1c>
 8009d2c:	690f      	ldr	r7, [r1, #16]
 8009d2e:	2f00      	cmp	r7, #0
 8009d30:	d0a9      	beq.n	8009c86 <__sflush_r+0x1a>
 8009d32:	0793      	lsls	r3, r2, #30
 8009d34:	680e      	ldr	r6, [r1, #0]
 8009d36:	bf08      	it	eq
 8009d38:	694b      	ldreq	r3, [r1, #20]
 8009d3a:	600f      	str	r7, [r1, #0]
 8009d3c:	bf18      	it	ne
 8009d3e:	2300      	movne	r3, #0
 8009d40:	eba6 0807 	sub.w	r8, r6, r7
 8009d44:	608b      	str	r3, [r1, #8]
 8009d46:	f1b8 0f00 	cmp.w	r8, #0
 8009d4a:	dd9c      	ble.n	8009c86 <__sflush_r+0x1a>
 8009d4c:	6a21      	ldr	r1, [r4, #32]
 8009d4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d50:	4643      	mov	r3, r8
 8009d52:	463a      	mov	r2, r7
 8009d54:	4628      	mov	r0, r5
 8009d56:	47b0      	blx	r6
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	dc06      	bgt.n	8009d6a <__sflush_r+0xfe>
 8009d5c:	89a3      	ldrh	r3, [r4, #12]
 8009d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d62:	81a3      	strh	r3, [r4, #12]
 8009d64:	f04f 30ff 	mov.w	r0, #4294967295
 8009d68:	e78e      	b.n	8009c88 <__sflush_r+0x1c>
 8009d6a:	4407      	add	r7, r0
 8009d6c:	eba8 0800 	sub.w	r8, r8, r0
 8009d70:	e7e9      	b.n	8009d46 <__sflush_r+0xda>
 8009d72:	bf00      	nop
 8009d74:	dfbffffe 	.word	0xdfbffffe

08009d78 <_fflush_r>:
 8009d78:	b538      	push	{r3, r4, r5, lr}
 8009d7a:	690b      	ldr	r3, [r1, #16]
 8009d7c:	4605      	mov	r5, r0
 8009d7e:	460c      	mov	r4, r1
 8009d80:	b913      	cbnz	r3, 8009d88 <_fflush_r+0x10>
 8009d82:	2500      	movs	r5, #0
 8009d84:	4628      	mov	r0, r5
 8009d86:	bd38      	pop	{r3, r4, r5, pc}
 8009d88:	b118      	cbz	r0, 8009d92 <_fflush_r+0x1a>
 8009d8a:	6a03      	ldr	r3, [r0, #32]
 8009d8c:	b90b      	cbnz	r3, 8009d92 <_fflush_r+0x1a>
 8009d8e:	f7fe f9f7 	bl	8008180 <__sinit>
 8009d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d0f3      	beq.n	8009d82 <_fflush_r+0xa>
 8009d9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009d9c:	07d0      	lsls	r0, r2, #31
 8009d9e:	d404      	bmi.n	8009daa <_fflush_r+0x32>
 8009da0:	0599      	lsls	r1, r3, #22
 8009da2:	d402      	bmi.n	8009daa <_fflush_r+0x32>
 8009da4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009da6:	f7fe fb02 	bl	80083ae <__retarget_lock_acquire_recursive>
 8009daa:	4628      	mov	r0, r5
 8009dac:	4621      	mov	r1, r4
 8009dae:	f7ff ff5d 	bl	8009c6c <__sflush_r>
 8009db2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009db4:	07da      	lsls	r2, r3, #31
 8009db6:	4605      	mov	r5, r0
 8009db8:	d4e4      	bmi.n	8009d84 <_fflush_r+0xc>
 8009dba:	89a3      	ldrh	r3, [r4, #12]
 8009dbc:	059b      	lsls	r3, r3, #22
 8009dbe:	d4e1      	bmi.n	8009d84 <_fflush_r+0xc>
 8009dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dc2:	f7fe faf5 	bl	80083b0 <__retarget_lock_release_recursive>
 8009dc6:	e7dd      	b.n	8009d84 <_fflush_r+0xc>

08009dc8 <memmove>:
 8009dc8:	4288      	cmp	r0, r1
 8009dca:	b510      	push	{r4, lr}
 8009dcc:	eb01 0402 	add.w	r4, r1, r2
 8009dd0:	d902      	bls.n	8009dd8 <memmove+0x10>
 8009dd2:	4284      	cmp	r4, r0
 8009dd4:	4623      	mov	r3, r4
 8009dd6:	d807      	bhi.n	8009de8 <memmove+0x20>
 8009dd8:	1e43      	subs	r3, r0, #1
 8009dda:	42a1      	cmp	r1, r4
 8009ddc:	d008      	beq.n	8009df0 <memmove+0x28>
 8009dde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009de2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009de6:	e7f8      	b.n	8009dda <memmove+0x12>
 8009de8:	4402      	add	r2, r0
 8009dea:	4601      	mov	r1, r0
 8009dec:	428a      	cmp	r2, r1
 8009dee:	d100      	bne.n	8009df2 <memmove+0x2a>
 8009df0:	bd10      	pop	{r4, pc}
 8009df2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009df6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009dfa:	e7f7      	b.n	8009dec <memmove+0x24>

08009dfc <_sbrk_r>:
 8009dfc:	b538      	push	{r3, r4, r5, lr}
 8009dfe:	4d06      	ldr	r5, [pc, #24]	; (8009e18 <_sbrk_r+0x1c>)
 8009e00:	2300      	movs	r3, #0
 8009e02:	4604      	mov	r4, r0
 8009e04:	4608      	mov	r0, r1
 8009e06:	602b      	str	r3, [r5, #0]
 8009e08:	f7f8 f804 	bl	8001e14 <_sbrk>
 8009e0c:	1c43      	adds	r3, r0, #1
 8009e0e:	d102      	bne.n	8009e16 <_sbrk_r+0x1a>
 8009e10:	682b      	ldr	r3, [r5, #0]
 8009e12:	b103      	cbz	r3, 8009e16 <_sbrk_r+0x1a>
 8009e14:	6023      	str	r3, [r4, #0]
 8009e16:	bd38      	pop	{r3, r4, r5, pc}
 8009e18:	200051f0 	.word	0x200051f0

08009e1c <__assert_func>:
 8009e1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e1e:	4614      	mov	r4, r2
 8009e20:	461a      	mov	r2, r3
 8009e22:	4b09      	ldr	r3, [pc, #36]	; (8009e48 <__assert_func+0x2c>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4605      	mov	r5, r0
 8009e28:	68d8      	ldr	r0, [r3, #12]
 8009e2a:	b14c      	cbz	r4, 8009e40 <__assert_func+0x24>
 8009e2c:	4b07      	ldr	r3, [pc, #28]	; (8009e4c <__assert_func+0x30>)
 8009e2e:	9100      	str	r1, [sp, #0]
 8009e30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e34:	4906      	ldr	r1, [pc, #24]	; (8009e50 <__assert_func+0x34>)
 8009e36:	462b      	mov	r3, r5
 8009e38:	f000 f872 	bl	8009f20 <fiprintf>
 8009e3c:	f000 f882 	bl	8009f44 <abort>
 8009e40:	4b04      	ldr	r3, [pc, #16]	; (8009e54 <__assert_func+0x38>)
 8009e42:	461c      	mov	r4, r3
 8009e44:	e7f3      	b.n	8009e2e <__assert_func+0x12>
 8009e46:	bf00      	nop
 8009e48:	20000070 	.word	0x20000070
 8009e4c:	0800ba97 	.word	0x0800ba97
 8009e50:	0800baa4 	.word	0x0800baa4
 8009e54:	0800bad2 	.word	0x0800bad2

08009e58 <_calloc_r>:
 8009e58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e5a:	fba1 2402 	umull	r2, r4, r1, r2
 8009e5e:	b94c      	cbnz	r4, 8009e74 <_calloc_r+0x1c>
 8009e60:	4611      	mov	r1, r2
 8009e62:	9201      	str	r2, [sp, #4]
 8009e64:	f7ff f9a2 	bl	80091ac <_malloc_r>
 8009e68:	9a01      	ldr	r2, [sp, #4]
 8009e6a:	4605      	mov	r5, r0
 8009e6c:	b930      	cbnz	r0, 8009e7c <_calloc_r+0x24>
 8009e6e:	4628      	mov	r0, r5
 8009e70:	b003      	add	sp, #12
 8009e72:	bd30      	pop	{r4, r5, pc}
 8009e74:	220c      	movs	r2, #12
 8009e76:	6002      	str	r2, [r0, #0]
 8009e78:	2500      	movs	r5, #0
 8009e7a:	e7f8      	b.n	8009e6e <_calloc_r+0x16>
 8009e7c:	4621      	mov	r1, r4
 8009e7e:	f7fe fa18 	bl	80082b2 <memset>
 8009e82:	e7f4      	b.n	8009e6e <_calloc_r+0x16>

08009e84 <__ascii_mbtowc>:
 8009e84:	b082      	sub	sp, #8
 8009e86:	b901      	cbnz	r1, 8009e8a <__ascii_mbtowc+0x6>
 8009e88:	a901      	add	r1, sp, #4
 8009e8a:	b142      	cbz	r2, 8009e9e <__ascii_mbtowc+0x1a>
 8009e8c:	b14b      	cbz	r3, 8009ea2 <__ascii_mbtowc+0x1e>
 8009e8e:	7813      	ldrb	r3, [r2, #0]
 8009e90:	600b      	str	r3, [r1, #0]
 8009e92:	7812      	ldrb	r2, [r2, #0]
 8009e94:	1e10      	subs	r0, r2, #0
 8009e96:	bf18      	it	ne
 8009e98:	2001      	movne	r0, #1
 8009e9a:	b002      	add	sp, #8
 8009e9c:	4770      	bx	lr
 8009e9e:	4610      	mov	r0, r2
 8009ea0:	e7fb      	b.n	8009e9a <__ascii_mbtowc+0x16>
 8009ea2:	f06f 0001 	mvn.w	r0, #1
 8009ea6:	e7f8      	b.n	8009e9a <__ascii_mbtowc+0x16>

08009ea8 <_realloc_r>:
 8009ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eac:	4680      	mov	r8, r0
 8009eae:	4614      	mov	r4, r2
 8009eb0:	460e      	mov	r6, r1
 8009eb2:	b921      	cbnz	r1, 8009ebe <_realloc_r+0x16>
 8009eb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009eb8:	4611      	mov	r1, r2
 8009eba:	f7ff b977 	b.w	80091ac <_malloc_r>
 8009ebe:	b92a      	cbnz	r2, 8009ecc <_realloc_r+0x24>
 8009ec0:	f7ff f900 	bl	80090c4 <_free_r>
 8009ec4:	4625      	mov	r5, r4
 8009ec6:	4628      	mov	r0, r5
 8009ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ecc:	f000 f841 	bl	8009f52 <_malloc_usable_size_r>
 8009ed0:	4284      	cmp	r4, r0
 8009ed2:	4607      	mov	r7, r0
 8009ed4:	d802      	bhi.n	8009edc <_realloc_r+0x34>
 8009ed6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009eda:	d812      	bhi.n	8009f02 <_realloc_r+0x5a>
 8009edc:	4621      	mov	r1, r4
 8009ede:	4640      	mov	r0, r8
 8009ee0:	f7ff f964 	bl	80091ac <_malloc_r>
 8009ee4:	4605      	mov	r5, r0
 8009ee6:	2800      	cmp	r0, #0
 8009ee8:	d0ed      	beq.n	8009ec6 <_realloc_r+0x1e>
 8009eea:	42bc      	cmp	r4, r7
 8009eec:	4622      	mov	r2, r4
 8009eee:	4631      	mov	r1, r6
 8009ef0:	bf28      	it	cs
 8009ef2:	463a      	movcs	r2, r7
 8009ef4:	f7fe fa5d 	bl	80083b2 <memcpy>
 8009ef8:	4631      	mov	r1, r6
 8009efa:	4640      	mov	r0, r8
 8009efc:	f7ff f8e2 	bl	80090c4 <_free_r>
 8009f00:	e7e1      	b.n	8009ec6 <_realloc_r+0x1e>
 8009f02:	4635      	mov	r5, r6
 8009f04:	e7df      	b.n	8009ec6 <_realloc_r+0x1e>

08009f06 <__ascii_wctomb>:
 8009f06:	b149      	cbz	r1, 8009f1c <__ascii_wctomb+0x16>
 8009f08:	2aff      	cmp	r2, #255	; 0xff
 8009f0a:	bf85      	ittet	hi
 8009f0c:	238a      	movhi	r3, #138	; 0x8a
 8009f0e:	6003      	strhi	r3, [r0, #0]
 8009f10:	700a      	strbls	r2, [r1, #0]
 8009f12:	f04f 30ff 	movhi.w	r0, #4294967295
 8009f16:	bf98      	it	ls
 8009f18:	2001      	movls	r0, #1
 8009f1a:	4770      	bx	lr
 8009f1c:	4608      	mov	r0, r1
 8009f1e:	4770      	bx	lr

08009f20 <fiprintf>:
 8009f20:	b40e      	push	{r1, r2, r3}
 8009f22:	b503      	push	{r0, r1, lr}
 8009f24:	4601      	mov	r1, r0
 8009f26:	ab03      	add	r3, sp, #12
 8009f28:	4805      	ldr	r0, [pc, #20]	; (8009f40 <fiprintf+0x20>)
 8009f2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f2e:	6800      	ldr	r0, [r0, #0]
 8009f30:	9301      	str	r3, [sp, #4]
 8009f32:	f000 f83f 	bl	8009fb4 <_vfiprintf_r>
 8009f36:	b002      	add	sp, #8
 8009f38:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f3c:	b003      	add	sp, #12
 8009f3e:	4770      	bx	lr
 8009f40:	20000070 	.word	0x20000070

08009f44 <abort>:
 8009f44:	b508      	push	{r3, lr}
 8009f46:	2006      	movs	r0, #6
 8009f48:	f000 fa0c 	bl	800a364 <raise>
 8009f4c:	2001      	movs	r0, #1
 8009f4e:	f7f7 fee9 	bl	8001d24 <_exit>

08009f52 <_malloc_usable_size_r>:
 8009f52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f56:	1f18      	subs	r0, r3, #4
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	bfbc      	itt	lt
 8009f5c:	580b      	ldrlt	r3, [r1, r0]
 8009f5e:	18c0      	addlt	r0, r0, r3
 8009f60:	4770      	bx	lr

08009f62 <__sfputc_r>:
 8009f62:	6893      	ldr	r3, [r2, #8]
 8009f64:	3b01      	subs	r3, #1
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	b410      	push	{r4}
 8009f6a:	6093      	str	r3, [r2, #8]
 8009f6c:	da08      	bge.n	8009f80 <__sfputc_r+0x1e>
 8009f6e:	6994      	ldr	r4, [r2, #24]
 8009f70:	42a3      	cmp	r3, r4
 8009f72:	db01      	blt.n	8009f78 <__sfputc_r+0x16>
 8009f74:	290a      	cmp	r1, #10
 8009f76:	d103      	bne.n	8009f80 <__sfputc_r+0x1e>
 8009f78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f7c:	f000 b934 	b.w	800a1e8 <__swbuf_r>
 8009f80:	6813      	ldr	r3, [r2, #0]
 8009f82:	1c58      	adds	r0, r3, #1
 8009f84:	6010      	str	r0, [r2, #0]
 8009f86:	7019      	strb	r1, [r3, #0]
 8009f88:	4608      	mov	r0, r1
 8009f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <__sfputs_r>:
 8009f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f92:	4606      	mov	r6, r0
 8009f94:	460f      	mov	r7, r1
 8009f96:	4614      	mov	r4, r2
 8009f98:	18d5      	adds	r5, r2, r3
 8009f9a:	42ac      	cmp	r4, r5
 8009f9c:	d101      	bne.n	8009fa2 <__sfputs_r+0x12>
 8009f9e:	2000      	movs	r0, #0
 8009fa0:	e007      	b.n	8009fb2 <__sfputs_r+0x22>
 8009fa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fa6:	463a      	mov	r2, r7
 8009fa8:	4630      	mov	r0, r6
 8009faa:	f7ff ffda 	bl	8009f62 <__sfputc_r>
 8009fae:	1c43      	adds	r3, r0, #1
 8009fb0:	d1f3      	bne.n	8009f9a <__sfputs_r+0xa>
 8009fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009fb4 <_vfiprintf_r>:
 8009fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb8:	460d      	mov	r5, r1
 8009fba:	b09d      	sub	sp, #116	; 0x74
 8009fbc:	4614      	mov	r4, r2
 8009fbe:	4698      	mov	r8, r3
 8009fc0:	4606      	mov	r6, r0
 8009fc2:	b118      	cbz	r0, 8009fcc <_vfiprintf_r+0x18>
 8009fc4:	6a03      	ldr	r3, [r0, #32]
 8009fc6:	b90b      	cbnz	r3, 8009fcc <_vfiprintf_r+0x18>
 8009fc8:	f7fe f8da 	bl	8008180 <__sinit>
 8009fcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fce:	07d9      	lsls	r1, r3, #31
 8009fd0:	d405      	bmi.n	8009fde <_vfiprintf_r+0x2a>
 8009fd2:	89ab      	ldrh	r3, [r5, #12]
 8009fd4:	059a      	lsls	r2, r3, #22
 8009fd6:	d402      	bmi.n	8009fde <_vfiprintf_r+0x2a>
 8009fd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fda:	f7fe f9e8 	bl	80083ae <__retarget_lock_acquire_recursive>
 8009fde:	89ab      	ldrh	r3, [r5, #12]
 8009fe0:	071b      	lsls	r3, r3, #28
 8009fe2:	d501      	bpl.n	8009fe8 <_vfiprintf_r+0x34>
 8009fe4:	692b      	ldr	r3, [r5, #16]
 8009fe6:	b99b      	cbnz	r3, 800a010 <_vfiprintf_r+0x5c>
 8009fe8:	4629      	mov	r1, r5
 8009fea:	4630      	mov	r0, r6
 8009fec:	f000 f93a 	bl	800a264 <__swsetup_r>
 8009ff0:	b170      	cbz	r0, 800a010 <_vfiprintf_r+0x5c>
 8009ff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ff4:	07dc      	lsls	r4, r3, #31
 8009ff6:	d504      	bpl.n	800a002 <_vfiprintf_r+0x4e>
 8009ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ffc:	b01d      	add	sp, #116	; 0x74
 8009ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a002:	89ab      	ldrh	r3, [r5, #12]
 800a004:	0598      	lsls	r0, r3, #22
 800a006:	d4f7      	bmi.n	8009ff8 <_vfiprintf_r+0x44>
 800a008:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a00a:	f7fe f9d1 	bl	80083b0 <__retarget_lock_release_recursive>
 800a00e:	e7f3      	b.n	8009ff8 <_vfiprintf_r+0x44>
 800a010:	2300      	movs	r3, #0
 800a012:	9309      	str	r3, [sp, #36]	; 0x24
 800a014:	2320      	movs	r3, #32
 800a016:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a01a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a01e:	2330      	movs	r3, #48	; 0x30
 800a020:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a1d4 <_vfiprintf_r+0x220>
 800a024:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a028:	f04f 0901 	mov.w	r9, #1
 800a02c:	4623      	mov	r3, r4
 800a02e:	469a      	mov	sl, r3
 800a030:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a034:	b10a      	cbz	r2, 800a03a <_vfiprintf_r+0x86>
 800a036:	2a25      	cmp	r2, #37	; 0x25
 800a038:	d1f9      	bne.n	800a02e <_vfiprintf_r+0x7a>
 800a03a:	ebba 0b04 	subs.w	fp, sl, r4
 800a03e:	d00b      	beq.n	800a058 <_vfiprintf_r+0xa4>
 800a040:	465b      	mov	r3, fp
 800a042:	4622      	mov	r2, r4
 800a044:	4629      	mov	r1, r5
 800a046:	4630      	mov	r0, r6
 800a048:	f7ff ffa2 	bl	8009f90 <__sfputs_r>
 800a04c:	3001      	adds	r0, #1
 800a04e:	f000 80a9 	beq.w	800a1a4 <_vfiprintf_r+0x1f0>
 800a052:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a054:	445a      	add	r2, fp
 800a056:	9209      	str	r2, [sp, #36]	; 0x24
 800a058:	f89a 3000 	ldrb.w	r3, [sl]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	f000 80a1 	beq.w	800a1a4 <_vfiprintf_r+0x1f0>
 800a062:	2300      	movs	r3, #0
 800a064:	f04f 32ff 	mov.w	r2, #4294967295
 800a068:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a06c:	f10a 0a01 	add.w	sl, sl, #1
 800a070:	9304      	str	r3, [sp, #16]
 800a072:	9307      	str	r3, [sp, #28]
 800a074:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a078:	931a      	str	r3, [sp, #104]	; 0x68
 800a07a:	4654      	mov	r4, sl
 800a07c:	2205      	movs	r2, #5
 800a07e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a082:	4854      	ldr	r0, [pc, #336]	; (800a1d4 <_vfiprintf_r+0x220>)
 800a084:	f7f6 f8c4 	bl	8000210 <memchr>
 800a088:	9a04      	ldr	r2, [sp, #16]
 800a08a:	b9d8      	cbnz	r0, 800a0c4 <_vfiprintf_r+0x110>
 800a08c:	06d1      	lsls	r1, r2, #27
 800a08e:	bf44      	itt	mi
 800a090:	2320      	movmi	r3, #32
 800a092:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a096:	0713      	lsls	r3, r2, #28
 800a098:	bf44      	itt	mi
 800a09a:	232b      	movmi	r3, #43	; 0x2b
 800a09c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0a0:	f89a 3000 	ldrb.w	r3, [sl]
 800a0a4:	2b2a      	cmp	r3, #42	; 0x2a
 800a0a6:	d015      	beq.n	800a0d4 <_vfiprintf_r+0x120>
 800a0a8:	9a07      	ldr	r2, [sp, #28]
 800a0aa:	4654      	mov	r4, sl
 800a0ac:	2000      	movs	r0, #0
 800a0ae:	f04f 0c0a 	mov.w	ip, #10
 800a0b2:	4621      	mov	r1, r4
 800a0b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0b8:	3b30      	subs	r3, #48	; 0x30
 800a0ba:	2b09      	cmp	r3, #9
 800a0bc:	d94d      	bls.n	800a15a <_vfiprintf_r+0x1a6>
 800a0be:	b1b0      	cbz	r0, 800a0ee <_vfiprintf_r+0x13a>
 800a0c0:	9207      	str	r2, [sp, #28]
 800a0c2:	e014      	b.n	800a0ee <_vfiprintf_r+0x13a>
 800a0c4:	eba0 0308 	sub.w	r3, r0, r8
 800a0c8:	fa09 f303 	lsl.w	r3, r9, r3
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	9304      	str	r3, [sp, #16]
 800a0d0:	46a2      	mov	sl, r4
 800a0d2:	e7d2      	b.n	800a07a <_vfiprintf_r+0xc6>
 800a0d4:	9b03      	ldr	r3, [sp, #12]
 800a0d6:	1d19      	adds	r1, r3, #4
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	9103      	str	r1, [sp, #12]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	bfbb      	ittet	lt
 800a0e0:	425b      	neglt	r3, r3
 800a0e2:	f042 0202 	orrlt.w	r2, r2, #2
 800a0e6:	9307      	strge	r3, [sp, #28]
 800a0e8:	9307      	strlt	r3, [sp, #28]
 800a0ea:	bfb8      	it	lt
 800a0ec:	9204      	strlt	r2, [sp, #16]
 800a0ee:	7823      	ldrb	r3, [r4, #0]
 800a0f0:	2b2e      	cmp	r3, #46	; 0x2e
 800a0f2:	d10c      	bne.n	800a10e <_vfiprintf_r+0x15a>
 800a0f4:	7863      	ldrb	r3, [r4, #1]
 800a0f6:	2b2a      	cmp	r3, #42	; 0x2a
 800a0f8:	d134      	bne.n	800a164 <_vfiprintf_r+0x1b0>
 800a0fa:	9b03      	ldr	r3, [sp, #12]
 800a0fc:	1d1a      	adds	r2, r3, #4
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	9203      	str	r2, [sp, #12]
 800a102:	2b00      	cmp	r3, #0
 800a104:	bfb8      	it	lt
 800a106:	f04f 33ff 	movlt.w	r3, #4294967295
 800a10a:	3402      	adds	r4, #2
 800a10c:	9305      	str	r3, [sp, #20]
 800a10e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a1e4 <_vfiprintf_r+0x230>
 800a112:	7821      	ldrb	r1, [r4, #0]
 800a114:	2203      	movs	r2, #3
 800a116:	4650      	mov	r0, sl
 800a118:	f7f6 f87a 	bl	8000210 <memchr>
 800a11c:	b138      	cbz	r0, 800a12e <_vfiprintf_r+0x17a>
 800a11e:	9b04      	ldr	r3, [sp, #16]
 800a120:	eba0 000a 	sub.w	r0, r0, sl
 800a124:	2240      	movs	r2, #64	; 0x40
 800a126:	4082      	lsls	r2, r0
 800a128:	4313      	orrs	r3, r2
 800a12a:	3401      	adds	r4, #1
 800a12c:	9304      	str	r3, [sp, #16]
 800a12e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a132:	4829      	ldr	r0, [pc, #164]	; (800a1d8 <_vfiprintf_r+0x224>)
 800a134:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a138:	2206      	movs	r2, #6
 800a13a:	f7f6 f869 	bl	8000210 <memchr>
 800a13e:	2800      	cmp	r0, #0
 800a140:	d03f      	beq.n	800a1c2 <_vfiprintf_r+0x20e>
 800a142:	4b26      	ldr	r3, [pc, #152]	; (800a1dc <_vfiprintf_r+0x228>)
 800a144:	bb1b      	cbnz	r3, 800a18e <_vfiprintf_r+0x1da>
 800a146:	9b03      	ldr	r3, [sp, #12]
 800a148:	3307      	adds	r3, #7
 800a14a:	f023 0307 	bic.w	r3, r3, #7
 800a14e:	3308      	adds	r3, #8
 800a150:	9303      	str	r3, [sp, #12]
 800a152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a154:	443b      	add	r3, r7
 800a156:	9309      	str	r3, [sp, #36]	; 0x24
 800a158:	e768      	b.n	800a02c <_vfiprintf_r+0x78>
 800a15a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a15e:	460c      	mov	r4, r1
 800a160:	2001      	movs	r0, #1
 800a162:	e7a6      	b.n	800a0b2 <_vfiprintf_r+0xfe>
 800a164:	2300      	movs	r3, #0
 800a166:	3401      	adds	r4, #1
 800a168:	9305      	str	r3, [sp, #20]
 800a16a:	4619      	mov	r1, r3
 800a16c:	f04f 0c0a 	mov.w	ip, #10
 800a170:	4620      	mov	r0, r4
 800a172:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a176:	3a30      	subs	r2, #48	; 0x30
 800a178:	2a09      	cmp	r2, #9
 800a17a:	d903      	bls.n	800a184 <_vfiprintf_r+0x1d0>
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d0c6      	beq.n	800a10e <_vfiprintf_r+0x15a>
 800a180:	9105      	str	r1, [sp, #20]
 800a182:	e7c4      	b.n	800a10e <_vfiprintf_r+0x15a>
 800a184:	fb0c 2101 	mla	r1, ip, r1, r2
 800a188:	4604      	mov	r4, r0
 800a18a:	2301      	movs	r3, #1
 800a18c:	e7f0      	b.n	800a170 <_vfiprintf_r+0x1bc>
 800a18e:	ab03      	add	r3, sp, #12
 800a190:	9300      	str	r3, [sp, #0]
 800a192:	462a      	mov	r2, r5
 800a194:	4b12      	ldr	r3, [pc, #72]	; (800a1e0 <_vfiprintf_r+0x22c>)
 800a196:	a904      	add	r1, sp, #16
 800a198:	4630      	mov	r0, r6
 800a19a:	f7fd fb9f 	bl	80078dc <_printf_float>
 800a19e:	4607      	mov	r7, r0
 800a1a0:	1c78      	adds	r0, r7, #1
 800a1a2:	d1d6      	bne.n	800a152 <_vfiprintf_r+0x19e>
 800a1a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1a6:	07d9      	lsls	r1, r3, #31
 800a1a8:	d405      	bmi.n	800a1b6 <_vfiprintf_r+0x202>
 800a1aa:	89ab      	ldrh	r3, [r5, #12]
 800a1ac:	059a      	lsls	r2, r3, #22
 800a1ae:	d402      	bmi.n	800a1b6 <_vfiprintf_r+0x202>
 800a1b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1b2:	f7fe f8fd 	bl	80083b0 <__retarget_lock_release_recursive>
 800a1b6:	89ab      	ldrh	r3, [r5, #12]
 800a1b8:	065b      	lsls	r3, r3, #25
 800a1ba:	f53f af1d 	bmi.w	8009ff8 <_vfiprintf_r+0x44>
 800a1be:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1c0:	e71c      	b.n	8009ffc <_vfiprintf_r+0x48>
 800a1c2:	ab03      	add	r3, sp, #12
 800a1c4:	9300      	str	r3, [sp, #0]
 800a1c6:	462a      	mov	r2, r5
 800a1c8:	4b05      	ldr	r3, [pc, #20]	; (800a1e0 <_vfiprintf_r+0x22c>)
 800a1ca:	a904      	add	r1, sp, #16
 800a1cc:	4630      	mov	r0, r6
 800a1ce:	f7fd fe29 	bl	8007e24 <_printf_i>
 800a1d2:	e7e4      	b.n	800a19e <_vfiprintf_r+0x1ea>
 800a1d4:	0800ba7c 	.word	0x0800ba7c
 800a1d8:	0800ba86 	.word	0x0800ba86
 800a1dc:	080078dd 	.word	0x080078dd
 800a1e0:	08009f91 	.word	0x08009f91
 800a1e4:	0800ba82 	.word	0x0800ba82

0800a1e8 <__swbuf_r>:
 800a1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ea:	460e      	mov	r6, r1
 800a1ec:	4614      	mov	r4, r2
 800a1ee:	4605      	mov	r5, r0
 800a1f0:	b118      	cbz	r0, 800a1fa <__swbuf_r+0x12>
 800a1f2:	6a03      	ldr	r3, [r0, #32]
 800a1f4:	b90b      	cbnz	r3, 800a1fa <__swbuf_r+0x12>
 800a1f6:	f7fd ffc3 	bl	8008180 <__sinit>
 800a1fa:	69a3      	ldr	r3, [r4, #24]
 800a1fc:	60a3      	str	r3, [r4, #8]
 800a1fe:	89a3      	ldrh	r3, [r4, #12]
 800a200:	071a      	lsls	r2, r3, #28
 800a202:	d525      	bpl.n	800a250 <__swbuf_r+0x68>
 800a204:	6923      	ldr	r3, [r4, #16]
 800a206:	b31b      	cbz	r3, 800a250 <__swbuf_r+0x68>
 800a208:	6823      	ldr	r3, [r4, #0]
 800a20a:	6922      	ldr	r2, [r4, #16]
 800a20c:	1a98      	subs	r0, r3, r2
 800a20e:	6963      	ldr	r3, [r4, #20]
 800a210:	b2f6      	uxtb	r6, r6
 800a212:	4283      	cmp	r3, r0
 800a214:	4637      	mov	r7, r6
 800a216:	dc04      	bgt.n	800a222 <__swbuf_r+0x3a>
 800a218:	4621      	mov	r1, r4
 800a21a:	4628      	mov	r0, r5
 800a21c:	f7ff fdac 	bl	8009d78 <_fflush_r>
 800a220:	b9e0      	cbnz	r0, 800a25c <__swbuf_r+0x74>
 800a222:	68a3      	ldr	r3, [r4, #8]
 800a224:	3b01      	subs	r3, #1
 800a226:	60a3      	str	r3, [r4, #8]
 800a228:	6823      	ldr	r3, [r4, #0]
 800a22a:	1c5a      	adds	r2, r3, #1
 800a22c:	6022      	str	r2, [r4, #0]
 800a22e:	701e      	strb	r6, [r3, #0]
 800a230:	6962      	ldr	r2, [r4, #20]
 800a232:	1c43      	adds	r3, r0, #1
 800a234:	429a      	cmp	r2, r3
 800a236:	d004      	beq.n	800a242 <__swbuf_r+0x5a>
 800a238:	89a3      	ldrh	r3, [r4, #12]
 800a23a:	07db      	lsls	r3, r3, #31
 800a23c:	d506      	bpl.n	800a24c <__swbuf_r+0x64>
 800a23e:	2e0a      	cmp	r6, #10
 800a240:	d104      	bne.n	800a24c <__swbuf_r+0x64>
 800a242:	4621      	mov	r1, r4
 800a244:	4628      	mov	r0, r5
 800a246:	f7ff fd97 	bl	8009d78 <_fflush_r>
 800a24a:	b938      	cbnz	r0, 800a25c <__swbuf_r+0x74>
 800a24c:	4638      	mov	r0, r7
 800a24e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a250:	4621      	mov	r1, r4
 800a252:	4628      	mov	r0, r5
 800a254:	f000 f806 	bl	800a264 <__swsetup_r>
 800a258:	2800      	cmp	r0, #0
 800a25a:	d0d5      	beq.n	800a208 <__swbuf_r+0x20>
 800a25c:	f04f 37ff 	mov.w	r7, #4294967295
 800a260:	e7f4      	b.n	800a24c <__swbuf_r+0x64>
	...

0800a264 <__swsetup_r>:
 800a264:	b538      	push	{r3, r4, r5, lr}
 800a266:	4b2a      	ldr	r3, [pc, #168]	; (800a310 <__swsetup_r+0xac>)
 800a268:	4605      	mov	r5, r0
 800a26a:	6818      	ldr	r0, [r3, #0]
 800a26c:	460c      	mov	r4, r1
 800a26e:	b118      	cbz	r0, 800a278 <__swsetup_r+0x14>
 800a270:	6a03      	ldr	r3, [r0, #32]
 800a272:	b90b      	cbnz	r3, 800a278 <__swsetup_r+0x14>
 800a274:	f7fd ff84 	bl	8008180 <__sinit>
 800a278:	89a3      	ldrh	r3, [r4, #12]
 800a27a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a27e:	0718      	lsls	r0, r3, #28
 800a280:	d422      	bmi.n	800a2c8 <__swsetup_r+0x64>
 800a282:	06d9      	lsls	r1, r3, #27
 800a284:	d407      	bmi.n	800a296 <__swsetup_r+0x32>
 800a286:	2309      	movs	r3, #9
 800a288:	602b      	str	r3, [r5, #0]
 800a28a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a28e:	81a3      	strh	r3, [r4, #12]
 800a290:	f04f 30ff 	mov.w	r0, #4294967295
 800a294:	e034      	b.n	800a300 <__swsetup_r+0x9c>
 800a296:	0758      	lsls	r0, r3, #29
 800a298:	d512      	bpl.n	800a2c0 <__swsetup_r+0x5c>
 800a29a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a29c:	b141      	cbz	r1, 800a2b0 <__swsetup_r+0x4c>
 800a29e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2a2:	4299      	cmp	r1, r3
 800a2a4:	d002      	beq.n	800a2ac <__swsetup_r+0x48>
 800a2a6:	4628      	mov	r0, r5
 800a2a8:	f7fe ff0c 	bl	80090c4 <_free_r>
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	6363      	str	r3, [r4, #52]	; 0x34
 800a2b0:	89a3      	ldrh	r3, [r4, #12]
 800a2b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a2b6:	81a3      	strh	r3, [r4, #12]
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	6063      	str	r3, [r4, #4]
 800a2bc:	6923      	ldr	r3, [r4, #16]
 800a2be:	6023      	str	r3, [r4, #0]
 800a2c0:	89a3      	ldrh	r3, [r4, #12]
 800a2c2:	f043 0308 	orr.w	r3, r3, #8
 800a2c6:	81a3      	strh	r3, [r4, #12]
 800a2c8:	6923      	ldr	r3, [r4, #16]
 800a2ca:	b94b      	cbnz	r3, 800a2e0 <__swsetup_r+0x7c>
 800a2cc:	89a3      	ldrh	r3, [r4, #12]
 800a2ce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a2d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2d6:	d003      	beq.n	800a2e0 <__swsetup_r+0x7c>
 800a2d8:	4621      	mov	r1, r4
 800a2da:	4628      	mov	r0, r5
 800a2dc:	f000 f884 	bl	800a3e8 <__smakebuf_r>
 800a2e0:	89a0      	ldrh	r0, [r4, #12]
 800a2e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2e6:	f010 0301 	ands.w	r3, r0, #1
 800a2ea:	d00a      	beq.n	800a302 <__swsetup_r+0x9e>
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	60a3      	str	r3, [r4, #8]
 800a2f0:	6963      	ldr	r3, [r4, #20]
 800a2f2:	425b      	negs	r3, r3
 800a2f4:	61a3      	str	r3, [r4, #24]
 800a2f6:	6923      	ldr	r3, [r4, #16]
 800a2f8:	b943      	cbnz	r3, 800a30c <__swsetup_r+0xa8>
 800a2fa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a2fe:	d1c4      	bne.n	800a28a <__swsetup_r+0x26>
 800a300:	bd38      	pop	{r3, r4, r5, pc}
 800a302:	0781      	lsls	r1, r0, #30
 800a304:	bf58      	it	pl
 800a306:	6963      	ldrpl	r3, [r4, #20]
 800a308:	60a3      	str	r3, [r4, #8]
 800a30a:	e7f4      	b.n	800a2f6 <__swsetup_r+0x92>
 800a30c:	2000      	movs	r0, #0
 800a30e:	e7f7      	b.n	800a300 <__swsetup_r+0x9c>
 800a310:	20000070 	.word	0x20000070

0800a314 <_raise_r>:
 800a314:	291f      	cmp	r1, #31
 800a316:	b538      	push	{r3, r4, r5, lr}
 800a318:	4604      	mov	r4, r0
 800a31a:	460d      	mov	r5, r1
 800a31c:	d904      	bls.n	800a328 <_raise_r+0x14>
 800a31e:	2316      	movs	r3, #22
 800a320:	6003      	str	r3, [r0, #0]
 800a322:	f04f 30ff 	mov.w	r0, #4294967295
 800a326:	bd38      	pop	{r3, r4, r5, pc}
 800a328:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a32a:	b112      	cbz	r2, 800a332 <_raise_r+0x1e>
 800a32c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a330:	b94b      	cbnz	r3, 800a346 <_raise_r+0x32>
 800a332:	4620      	mov	r0, r4
 800a334:	f000 f830 	bl	800a398 <_getpid_r>
 800a338:	462a      	mov	r2, r5
 800a33a:	4601      	mov	r1, r0
 800a33c:	4620      	mov	r0, r4
 800a33e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a342:	f000 b817 	b.w	800a374 <_kill_r>
 800a346:	2b01      	cmp	r3, #1
 800a348:	d00a      	beq.n	800a360 <_raise_r+0x4c>
 800a34a:	1c59      	adds	r1, r3, #1
 800a34c:	d103      	bne.n	800a356 <_raise_r+0x42>
 800a34e:	2316      	movs	r3, #22
 800a350:	6003      	str	r3, [r0, #0]
 800a352:	2001      	movs	r0, #1
 800a354:	e7e7      	b.n	800a326 <_raise_r+0x12>
 800a356:	2400      	movs	r4, #0
 800a358:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a35c:	4628      	mov	r0, r5
 800a35e:	4798      	blx	r3
 800a360:	2000      	movs	r0, #0
 800a362:	e7e0      	b.n	800a326 <_raise_r+0x12>

0800a364 <raise>:
 800a364:	4b02      	ldr	r3, [pc, #8]	; (800a370 <raise+0xc>)
 800a366:	4601      	mov	r1, r0
 800a368:	6818      	ldr	r0, [r3, #0]
 800a36a:	f7ff bfd3 	b.w	800a314 <_raise_r>
 800a36e:	bf00      	nop
 800a370:	20000070 	.word	0x20000070

0800a374 <_kill_r>:
 800a374:	b538      	push	{r3, r4, r5, lr}
 800a376:	4d07      	ldr	r5, [pc, #28]	; (800a394 <_kill_r+0x20>)
 800a378:	2300      	movs	r3, #0
 800a37a:	4604      	mov	r4, r0
 800a37c:	4608      	mov	r0, r1
 800a37e:	4611      	mov	r1, r2
 800a380:	602b      	str	r3, [r5, #0]
 800a382:	f7f7 fcbf 	bl	8001d04 <_kill>
 800a386:	1c43      	adds	r3, r0, #1
 800a388:	d102      	bne.n	800a390 <_kill_r+0x1c>
 800a38a:	682b      	ldr	r3, [r5, #0]
 800a38c:	b103      	cbz	r3, 800a390 <_kill_r+0x1c>
 800a38e:	6023      	str	r3, [r4, #0]
 800a390:	bd38      	pop	{r3, r4, r5, pc}
 800a392:	bf00      	nop
 800a394:	200051f0 	.word	0x200051f0

0800a398 <_getpid_r>:
 800a398:	f7f7 bcac 	b.w	8001cf4 <_getpid>

0800a39c <__swhatbuf_r>:
 800a39c:	b570      	push	{r4, r5, r6, lr}
 800a39e:	460c      	mov	r4, r1
 800a3a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3a4:	2900      	cmp	r1, #0
 800a3a6:	b096      	sub	sp, #88	; 0x58
 800a3a8:	4615      	mov	r5, r2
 800a3aa:	461e      	mov	r6, r3
 800a3ac:	da0d      	bge.n	800a3ca <__swhatbuf_r+0x2e>
 800a3ae:	89a3      	ldrh	r3, [r4, #12]
 800a3b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a3b4:	f04f 0100 	mov.w	r1, #0
 800a3b8:	bf0c      	ite	eq
 800a3ba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a3be:	2340      	movne	r3, #64	; 0x40
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	6031      	str	r1, [r6, #0]
 800a3c4:	602b      	str	r3, [r5, #0]
 800a3c6:	b016      	add	sp, #88	; 0x58
 800a3c8:	bd70      	pop	{r4, r5, r6, pc}
 800a3ca:	466a      	mov	r2, sp
 800a3cc:	f000 f848 	bl	800a460 <_fstat_r>
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	dbec      	blt.n	800a3ae <__swhatbuf_r+0x12>
 800a3d4:	9901      	ldr	r1, [sp, #4]
 800a3d6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a3da:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a3de:	4259      	negs	r1, r3
 800a3e0:	4159      	adcs	r1, r3
 800a3e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3e6:	e7eb      	b.n	800a3c0 <__swhatbuf_r+0x24>

0800a3e8 <__smakebuf_r>:
 800a3e8:	898b      	ldrh	r3, [r1, #12]
 800a3ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a3ec:	079d      	lsls	r5, r3, #30
 800a3ee:	4606      	mov	r6, r0
 800a3f0:	460c      	mov	r4, r1
 800a3f2:	d507      	bpl.n	800a404 <__smakebuf_r+0x1c>
 800a3f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a3f8:	6023      	str	r3, [r4, #0]
 800a3fa:	6123      	str	r3, [r4, #16]
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	6163      	str	r3, [r4, #20]
 800a400:	b002      	add	sp, #8
 800a402:	bd70      	pop	{r4, r5, r6, pc}
 800a404:	ab01      	add	r3, sp, #4
 800a406:	466a      	mov	r2, sp
 800a408:	f7ff ffc8 	bl	800a39c <__swhatbuf_r>
 800a40c:	9900      	ldr	r1, [sp, #0]
 800a40e:	4605      	mov	r5, r0
 800a410:	4630      	mov	r0, r6
 800a412:	f7fe fecb 	bl	80091ac <_malloc_r>
 800a416:	b948      	cbnz	r0, 800a42c <__smakebuf_r+0x44>
 800a418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a41c:	059a      	lsls	r2, r3, #22
 800a41e:	d4ef      	bmi.n	800a400 <__smakebuf_r+0x18>
 800a420:	f023 0303 	bic.w	r3, r3, #3
 800a424:	f043 0302 	orr.w	r3, r3, #2
 800a428:	81a3      	strh	r3, [r4, #12]
 800a42a:	e7e3      	b.n	800a3f4 <__smakebuf_r+0xc>
 800a42c:	89a3      	ldrh	r3, [r4, #12]
 800a42e:	6020      	str	r0, [r4, #0]
 800a430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a434:	81a3      	strh	r3, [r4, #12]
 800a436:	9b00      	ldr	r3, [sp, #0]
 800a438:	6163      	str	r3, [r4, #20]
 800a43a:	9b01      	ldr	r3, [sp, #4]
 800a43c:	6120      	str	r0, [r4, #16]
 800a43e:	b15b      	cbz	r3, 800a458 <__smakebuf_r+0x70>
 800a440:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a444:	4630      	mov	r0, r6
 800a446:	f000 f81d 	bl	800a484 <_isatty_r>
 800a44a:	b128      	cbz	r0, 800a458 <__smakebuf_r+0x70>
 800a44c:	89a3      	ldrh	r3, [r4, #12]
 800a44e:	f023 0303 	bic.w	r3, r3, #3
 800a452:	f043 0301 	orr.w	r3, r3, #1
 800a456:	81a3      	strh	r3, [r4, #12]
 800a458:	89a3      	ldrh	r3, [r4, #12]
 800a45a:	431d      	orrs	r5, r3
 800a45c:	81a5      	strh	r5, [r4, #12]
 800a45e:	e7cf      	b.n	800a400 <__smakebuf_r+0x18>

0800a460 <_fstat_r>:
 800a460:	b538      	push	{r3, r4, r5, lr}
 800a462:	4d07      	ldr	r5, [pc, #28]	; (800a480 <_fstat_r+0x20>)
 800a464:	2300      	movs	r3, #0
 800a466:	4604      	mov	r4, r0
 800a468:	4608      	mov	r0, r1
 800a46a:	4611      	mov	r1, r2
 800a46c:	602b      	str	r3, [r5, #0]
 800a46e:	f7f7 fca8 	bl	8001dc2 <_fstat>
 800a472:	1c43      	adds	r3, r0, #1
 800a474:	d102      	bne.n	800a47c <_fstat_r+0x1c>
 800a476:	682b      	ldr	r3, [r5, #0]
 800a478:	b103      	cbz	r3, 800a47c <_fstat_r+0x1c>
 800a47a:	6023      	str	r3, [r4, #0]
 800a47c:	bd38      	pop	{r3, r4, r5, pc}
 800a47e:	bf00      	nop
 800a480:	200051f0 	.word	0x200051f0

0800a484 <_isatty_r>:
 800a484:	b538      	push	{r3, r4, r5, lr}
 800a486:	4d06      	ldr	r5, [pc, #24]	; (800a4a0 <_isatty_r+0x1c>)
 800a488:	2300      	movs	r3, #0
 800a48a:	4604      	mov	r4, r0
 800a48c:	4608      	mov	r0, r1
 800a48e:	602b      	str	r3, [r5, #0]
 800a490:	f7f7 fca7 	bl	8001de2 <_isatty>
 800a494:	1c43      	adds	r3, r0, #1
 800a496:	d102      	bne.n	800a49e <_isatty_r+0x1a>
 800a498:	682b      	ldr	r3, [r5, #0]
 800a49a:	b103      	cbz	r3, 800a49e <_isatty_r+0x1a>
 800a49c:	6023      	str	r3, [r4, #0]
 800a49e:	bd38      	pop	{r3, r4, r5, pc}
 800a4a0:	200051f0 	.word	0x200051f0

0800a4a4 <_init>:
 800a4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4a6:	bf00      	nop
 800a4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4aa:	bc08      	pop	{r3}
 800a4ac:	469e      	mov	lr, r3
 800a4ae:	4770      	bx	lr

0800a4b0 <_fini>:
 800a4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4b2:	bf00      	nop
 800a4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4b6:	bc08      	pop	{r3}
 800a4b8:	469e      	mov	lr, r3
 800a4ba:	4770      	bx	lr
