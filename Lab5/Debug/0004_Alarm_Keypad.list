
0004_Alarm_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d08  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eb8  08006ed8  08006ed8  00016ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d90  08007d90  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  08007d90  08007d90  00017d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d98  08007d98  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d98  08007d98  00017d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d9c  08007d9c  00017d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08007da0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e88  20000028  08007dc8  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004eb0  08007dc8  00024eb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b15b  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003aa5  00000000  00000000  0003b1f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001830  00000000  00000000  0003eca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012fa  00000000  00000000  000404d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000242ea  00000000  00000000  000417ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d11b  00000000  00000000  00065ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de060  00000000  00000000  00082bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006728  00000000  00000000  00160c30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00167358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000028 	.word	0x20000028
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006ec0 	.word	0x08006ec0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000002c 	.word	0x2000002c
 800020c:	08006ec0 	.word	0x08006ec0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b970 	b.w	800051c <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	460f      	mov	r7, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14a      	bne.n	80002fa <__udivmoddi4+0xa6>
 8000264:	428a      	cmp	r2, r1
 8000266:	4694      	mov	ip, r2
 8000268:	d965      	bls.n	8000336 <__udivmoddi4+0xe2>
 800026a:	fab2 f382 	clz	r3, r2
 800026e:	b143      	cbz	r3, 8000282 <__udivmoddi4+0x2e>
 8000270:	fa02 fc03 	lsl.w	ip, r2, r3
 8000274:	f1c3 0220 	rsb	r2, r3, #32
 8000278:	409f      	lsls	r7, r3
 800027a:	fa20 f202 	lsr.w	r2, r0, r2
 800027e:	4317      	orrs	r7, r2
 8000280:	409c      	lsls	r4, r3
 8000282:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000286:	fa1f f58c 	uxth.w	r5, ip
 800028a:	fbb7 f1fe 	udiv	r1, r7, lr
 800028e:	0c22      	lsrs	r2, r4, #16
 8000290:	fb0e 7711 	mls	r7, lr, r1, r7
 8000294:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000298:	fb01 f005 	mul.w	r0, r1, r5
 800029c:	4290      	cmp	r0, r2
 800029e:	d90a      	bls.n	80002b6 <__udivmoddi4+0x62>
 80002a0:	eb1c 0202 	adds.w	r2, ip, r2
 80002a4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002a8:	f080 811c 	bcs.w	80004e4 <__udivmoddi4+0x290>
 80002ac:	4290      	cmp	r0, r2
 80002ae:	f240 8119 	bls.w	80004e4 <__udivmoddi4+0x290>
 80002b2:	3902      	subs	r1, #2
 80002b4:	4462      	add	r2, ip
 80002b6:	1a12      	subs	r2, r2, r0
 80002b8:	b2a4      	uxth	r4, r4
 80002ba:	fbb2 f0fe 	udiv	r0, r2, lr
 80002be:	fb0e 2210 	mls	r2, lr, r0, r2
 80002c2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c6:	fb00 f505 	mul.w	r5, r0, r5
 80002ca:	42a5      	cmp	r5, r4
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x90>
 80002ce:	eb1c 0404 	adds.w	r4, ip, r4
 80002d2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d6:	f080 8107 	bcs.w	80004e8 <__udivmoddi4+0x294>
 80002da:	42a5      	cmp	r5, r4
 80002dc:	f240 8104 	bls.w	80004e8 <__udivmoddi4+0x294>
 80002e0:	4464      	add	r4, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e8:	1b64      	subs	r4, r4, r5
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11e      	cbz	r6, 80002f6 <__udivmoddi4+0xa2>
 80002ee:	40dc      	lsrs	r4, r3
 80002f0:	2300      	movs	r3, #0
 80002f2:	e9c6 4300 	strd	r4, r3, [r6]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d908      	bls.n	8000310 <__udivmoddi4+0xbc>
 80002fe:	2e00      	cmp	r6, #0
 8000300:	f000 80ed 	beq.w	80004de <__udivmoddi4+0x28a>
 8000304:	2100      	movs	r1, #0
 8000306:	e9c6 0500 	strd	r0, r5, [r6]
 800030a:	4608      	mov	r0, r1
 800030c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000310:	fab3 f183 	clz	r1, r3
 8000314:	2900      	cmp	r1, #0
 8000316:	d149      	bne.n	80003ac <__udivmoddi4+0x158>
 8000318:	42ab      	cmp	r3, r5
 800031a:	d302      	bcc.n	8000322 <__udivmoddi4+0xce>
 800031c:	4282      	cmp	r2, r0
 800031e:	f200 80f8 	bhi.w	8000512 <__udivmoddi4+0x2be>
 8000322:	1a84      	subs	r4, r0, r2
 8000324:	eb65 0203 	sbc.w	r2, r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	4617      	mov	r7, r2
 800032c:	2e00      	cmp	r6, #0
 800032e:	d0e2      	beq.n	80002f6 <__udivmoddi4+0xa2>
 8000330:	e9c6 4700 	strd	r4, r7, [r6]
 8000334:	e7df      	b.n	80002f6 <__udivmoddi4+0xa2>
 8000336:	b902      	cbnz	r2, 800033a <__udivmoddi4+0xe6>
 8000338:	deff      	udf	#255	; 0xff
 800033a:	fab2 f382 	clz	r3, r2
 800033e:	2b00      	cmp	r3, #0
 8000340:	f040 8090 	bne.w	8000464 <__udivmoddi4+0x210>
 8000344:	1a8a      	subs	r2, r1, r2
 8000346:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034a:	fa1f fe8c 	uxth.w	lr, ip
 800034e:	2101      	movs	r1, #1
 8000350:	fbb2 f5f7 	udiv	r5, r2, r7
 8000354:	fb07 2015 	mls	r0, r7, r5, r2
 8000358:	0c22      	lsrs	r2, r4, #16
 800035a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035e:	fb0e f005 	mul.w	r0, lr, r5
 8000362:	4290      	cmp	r0, r2
 8000364:	d908      	bls.n	8000378 <__udivmoddi4+0x124>
 8000366:	eb1c 0202 	adds.w	r2, ip, r2
 800036a:	f105 38ff 	add.w	r8, r5, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x122>
 8000370:	4290      	cmp	r0, r2
 8000372:	f200 80cb 	bhi.w	800050c <__udivmoddi4+0x2b8>
 8000376:	4645      	mov	r5, r8
 8000378:	1a12      	subs	r2, r2, r0
 800037a:	b2a4      	uxth	r4, r4
 800037c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000380:	fb07 2210 	mls	r2, r7, r0, r2
 8000384:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000388:	fb0e fe00 	mul.w	lr, lr, r0
 800038c:	45a6      	cmp	lr, r4
 800038e:	d908      	bls.n	80003a2 <__udivmoddi4+0x14e>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f100 32ff 	add.w	r2, r0, #4294967295
 8000398:	d202      	bcs.n	80003a0 <__udivmoddi4+0x14c>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f200 80bb 	bhi.w	8000516 <__udivmoddi4+0x2c2>
 80003a0:	4610      	mov	r0, r2
 80003a2:	eba4 040e 	sub.w	r4, r4, lr
 80003a6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003aa:	e79f      	b.n	80002ec <__udivmoddi4+0x98>
 80003ac:	f1c1 0720 	rsb	r7, r1, #32
 80003b0:	408b      	lsls	r3, r1
 80003b2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ba:	fa05 f401 	lsl.w	r4, r5, r1
 80003be:	fa20 f307 	lsr.w	r3, r0, r7
 80003c2:	40fd      	lsrs	r5, r7
 80003c4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c8:	4323      	orrs	r3, r4
 80003ca:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	fb09 5518 	mls	r5, r9, r8, r5
 80003d6:	0c1c      	lsrs	r4, r3, #16
 80003d8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003dc:	fb08 f50e 	mul.w	r5, r8, lr
 80003e0:	42a5      	cmp	r5, r4
 80003e2:	fa02 f201 	lsl.w	r2, r2, r1
 80003e6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ea:	d90b      	bls.n	8000404 <__udivmoddi4+0x1b0>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f4:	f080 8088 	bcs.w	8000508 <__udivmoddi4+0x2b4>
 80003f8:	42a5      	cmp	r5, r4
 80003fa:	f240 8085 	bls.w	8000508 <__udivmoddi4+0x2b4>
 80003fe:	f1a8 0802 	sub.w	r8, r8, #2
 8000402:	4464      	add	r4, ip
 8000404:	1b64      	subs	r4, r4, r5
 8000406:	b29d      	uxth	r5, r3
 8000408:	fbb4 f3f9 	udiv	r3, r4, r9
 800040c:	fb09 4413 	mls	r4, r9, r3, r4
 8000410:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000414:	fb03 fe0e 	mul.w	lr, r3, lr
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x1da>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f103 35ff 	add.w	r5, r3, #4294967295
 8000424:	d26c      	bcs.n	8000500 <__udivmoddi4+0x2ac>
 8000426:	45a6      	cmp	lr, r4
 8000428:	d96a      	bls.n	8000500 <__udivmoddi4+0x2ac>
 800042a:	3b02      	subs	r3, #2
 800042c:	4464      	add	r4, ip
 800042e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000432:	fba3 9502 	umull	r9, r5, r3, r2
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	42ac      	cmp	r4, r5
 800043c:	46c8      	mov	r8, r9
 800043e:	46ae      	mov	lr, r5
 8000440:	d356      	bcc.n	80004f0 <__udivmoddi4+0x29c>
 8000442:	d053      	beq.n	80004ec <__udivmoddi4+0x298>
 8000444:	b156      	cbz	r6, 800045c <__udivmoddi4+0x208>
 8000446:	ebb0 0208 	subs.w	r2, r0, r8
 800044a:	eb64 040e 	sbc.w	r4, r4, lr
 800044e:	fa04 f707 	lsl.w	r7, r4, r7
 8000452:	40ca      	lsrs	r2, r1
 8000454:	40cc      	lsrs	r4, r1
 8000456:	4317      	orrs	r7, r2
 8000458:	e9c6 7400 	strd	r7, r4, [r6]
 800045c:	4618      	mov	r0, r3
 800045e:	2100      	movs	r1, #0
 8000460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000464:	f1c3 0120 	rsb	r1, r3, #32
 8000468:	fa02 fc03 	lsl.w	ip, r2, r3
 800046c:	fa20 f201 	lsr.w	r2, r0, r1
 8000470:	fa25 f101 	lsr.w	r1, r5, r1
 8000474:	409d      	lsls	r5, r3
 8000476:	432a      	orrs	r2, r5
 8000478:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800047c:	fa1f fe8c 	uxth.w	lr, ip
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1510 	mls	r5, r7, r0, r1
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800048e:	fb00 f50e 	mul.w	r5, r0, lr
 8000492:	428d      	cmp	r5, r1
 8000494:	fa04 f403 	lsl.w	r4, r4, r3
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x258>
 800049a:	eb1c 0101 	adds.w	r1, ip, r1
 800049e:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a2:	d22f      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004a4:	428d      	cmp	r5, r1
 80004a6:	d92d      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004a8:	3802      	subs	r0, #2
 80004aa:	4461      	add	r1, ip
 80004ac:	1b49      	subs	r1, r1, r5
 80004ae:	b292      	uxth	r2, r2
 80004b0:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b4:	fb07 1115 	mls	r1, r7, r5, r1
 80004b8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004bc:	fb05 f10e 	mul.w	r1, r5, lr
 80004c0:	4291      	cmp	r1, r2
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x282>
 80004c4:	eb1c 0202 	adds.w	r2, ip, r2
 80004c8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004cc:	d216      	bcs.n	80004fc <__udivmoddi4+0x2a8>
 80004ce:	4291      	cmp	r1, r2
 80004d0:	d914      	bls.n	80004fc <__udivmoddi4+0x2a8>
 80004d2:	3d02      	subs	r5, #2
 80004d4:	4462      	add	r2, ip
 80004d6:	1a52      	subs	r2, r2, r1
 80004d8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004dc:	e738      	b.n	8000350 <__udivmoddi4+0xfc>
 80004de:	4631      	mov	r1, r6
 80004e0:	4630      	mov	r0, r6
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xa2>
 80004e4:	4639      	mov	r1, r7
 80004e6:	e6e6      	b.n	80002b6 <__udivmoddi4+0x62>
 80004e8:	4610      	mov	r0, r2
 80004ea:	e6fb      	b.n	80002e4 <__udivmoddi4+0x90>
 80004ec:	4548      	cmp	r0, r9
 80004ee:	d2a9      	bcs.n	8000444 <__udivmoddi4+0x1f0>
 80004f0:	ebb9 0802 	subs.w	r8, r9, r2
 80004f4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004f8:	3b01      	subs	r3, #1
 80004fa:	e7a3      	b.n	8000444 <__udivmoddi4+0x1f0>
 80004fc:	4645      	mov	r5, r8
 80004fe:	e7ea      	b.n	80004d6 <__udivmoddi4+0x282>
 8000500:	462b      	mov	r3, r5
 8000502:	e794      	b.n	800042e <__udivmoddi4+0x1da>
 8000504:	4640      	mov	r0, r8
 8000506:	e7d1      	b.n	80004ac <__udivmoddi4+0x258>
 8000508:	46d0      	mov	r8, sl
 800050a:	e77b      	b.n	8000404 <__udivmoddi4+0x1b0>
 800050c:	3d02      	subs	r5, #2
 800050e:	4462      	add	r2, ip
 8000510:	e732      	b.n	8000378 <__udivmoddi4+0x124>
 8000512:	4608      	mov	r0, r1
 8000514:	e70a      	b.n	800032c <__udivmoddi4+0xd8>
 8000516:	4464      	add	r4, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e742      	b.n	80003a2 <__udivmoddi4+0x14e>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <Get_Key>:
*/

#include "Keypad4X4.h"
char key;
char Get_Key(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
	int done=1;
 8000526:	2301      	movs	r3, #1
 8000528:	607b      	str	r3, [r7, #4]
	while(done)
 800052a:	e19b      	b.n	8000864 <Get_Key+0x344>
	{
	//COLUMN 3
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);     // Pull the C0 HIGH
 800052c:	2201      	movs	r2, #1
 800052e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000532:	48b3      	ldr	r0, [pc, #716]	; (8000800 <Get_Key+0x2e0>)
 8000534:	f001 fc9c 	bl	8001e70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 8000538:	2200      	movs	r2, #0
 800053a:	2110      	movs	r1, #16
 800053c:	48b0      	ldr	r0, [pc, #704]	; (8000800 <Get_Key+0x2e0>)
 800053e:	f001 fc97 	bl	8001e70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8000542:	2200      	movs	r2, #0
 8000544:	2120      	movs	r1, #32
 8000546:	48ae      	ldr	r0, [pc, #696]	; (8000800 <Get_Key+0x2e0>)
 8000548:	f001 fc92 	bl	8001e70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 800054c:	2200      	movs	r2, #0
 800054e:	2108      	movs	r1, #8
 8000550:	48ab      	ldr	r0, [pc, #684]	; (8000800 <Get_Key+0x2e0>)
 8000552:	f001 fc8d 	bl	8001e70 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000556:	2140      	movs	r1, #64	; 0x40
 8000558:	48a9      	ldr	r0, [pc, #676]	; (8000800 <Get_Key+0x2e0>)
 800055a:	f001 fc71 	bl	8001e40 <HAL_GPIO_ReadPin>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d00b      	beq.n	800057c <Get_Key+0x5c>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000564:	bf00      	nop
 8000566:	2140      	movs	r1, #64	; 0x40
 8000568:	48a5      	ldr	r0, [pc, #660]	; (8000800 <Get_Key+0x2e0>)
 800056a:	f001 fc69 	bl	8001e40 <HAL_GPIO_ReadPin>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d1f8      	bne.n	8000566 <Get_Key+0x46>
		key='1';
 8000574:	4ba3      	ldr	r3, [pc, #652]	; (8000804 <Get_Key+0x2e4>)
 8000576:	2231      	movs	r2, #49	; 0x31
 8000578:	701a      	strb	r2, [r3, #0]
		break;
 800057a:	e177      	b.n	800086c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 800057c:	2180      	movs	r1, #128	; 0x80
 800057e:	48a2      	ldr	r0, [pc, #648]	; (8000808 <Get_Key+0x2e8>)
 8000580:	f001 fc5e 	bl	8001e40 <HAL_GPIO_ReadPin>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d00b      	beq.n	80005a2 <Get_Key+0x82>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 800058a:	bf00      	nop
 800058c:	2180      	movs	r1, #128	; 0x80
 800058e:	489e      	ldr	r0, [pc, #632]	; (8000808 <Get_Key+0x2e8>)
 8000590:	f001 fc56 	bl	8001e40 <HAL_GPIO_ReadPin>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d1f8      	bne.n	800058c <Get_Key+0x6c>
		key='4';
 800059a:	4b9a      	ldr	r3, [pc, #616]	; (8000804 <Get_Key+0x2e4>)
 800059c:	2234      	movs	r2, #52	; 0x34
 800059e:	701a      	strb	r2, [r3, #0]
		break;
 80005a0:	e164      	b.n	800086c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80005a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a6:	4899      	ldr	r0, [pc, #612]	; (800080c <Get_Key+0x2ec>)
 80005a8:	f001 fc4a 	bl	8001e40 <HAL_GPIO_ReadPin>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d00c      	beq.n	80005cc <Get_Key+0xac>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80005b2:	bf00      	nop
 80005b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b8:	4894      	ldr	r0, [pc, #592]	; (800080c <Get_Key+0x2ec>)
 80005ba:	f001 fc41 	bl	8001e40 <HAL_GPIO_ReadPin>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d1f7      	bne.n	80005b4 <Get_Key+0x94>
		key='7';
 80005c4:	4b8f      	ldr	r3, [pc, #572]	; (8000804 <Get_Key+0x2e4>)
 80005c6:	2237      	movs	r2, #55	; 0x37
 80005c8:	701a      	strb	r2, [r3, #0]
		break;
 80005ca:	e14f      	b.n	800086c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80005cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d0:	488e      	ldr	r0, [pc, #568]	; (800080c <Get_Key+0x2ec>)
 80005d2:	f001 fc35 	bl	8001e40 <HAL_GPIO_ReadPin>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d00c      	beq.n	80005f6 <Get_Key+0xd6>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80005dc:	bf00      	nop
 80005de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e2:	488a      	ldr	r0, [pc, #552]	; (800080c <Get_Key+0x2ec>)
 80005e4:	f001 fc2c 	bl	8001e40 <HAL_GPIO_ReadPin>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d1f7      	bne.n	80005de <Get_Key+0xbe>
		key='*';
 80005ee:	4b85      	ldr	r3, [pc, #532]	; (8000804 <Get_Key+0x2e4>)
 80005f0:	222a      	movs	r2, #42	; 0x2a
 80005f2:	701a      	strb	r2, [r3, #0]
		break;
 80005f4:	e13a      	b.n	800086c <Get_Key+0x34c>
	}

	//COLUMN 2
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 80005f6:	2200      	movs	r2, #0
 80005f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005fc:	4880      	ldr	r0, [pc, #512]	; (8000800 <Get_Key+0x2e0>)
 80005fe:	f001 fc37 	bl	8001e70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);     // Pull the C1 HIGH
 8000602:	2201      	movs	r2, #1
 8000604:	2110      	movs	r1, #16
 8000606:	487e      	ldr	r0, [pc, #504]	; (8000800 <Get_Key+0x2e0>)
 8000608:	f001 fc32 	bl	8001e70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 800060c:	2200      	movs	r2, #0
 800060e:	2120      	movs	r1, #32
 8000610:	487b      	ldr	r0, [pc, #492]	; (8000800 <Get_Key+0x2e0>)
 8000612:	f001 fc2d 	bl	8001e70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 8000616:	2200      	movs	r2, #0
 8000618:	2108      	movs	r1, #8
 800061a:	4879      	ldr	r0, [pc, #484]	; (8000800 <Get_Key+0x2e0>)
 800061c:	f001 fc28 	bl	8001e70 <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000620:	2140      	movs	r1, #64	; 0x40
 8000622:	4877      	ldr	r0, [pc, #476]	; (8000800 <Get_Key+0x2e0>)
 8000624:	f001 fc0c 	bl	8001e40 <HAL_GPIO_ReadPin>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d00b      	beq.n	8000646 <Get_Key+0x126>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 800062e:	bf00      	nop
 8000630:	2140      	movs	r1, #64	; 0x40
 8000632:	4873      	ldr	r0, [pc, #460]	; (8000800 <Get_Key+0x2e0>)
 8000634:	f001 fc04 	bl	8001e40 <HAL_GPIO_ReadPin>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d1f8      	bne.n	8000630 <Get_Key+0x110>
		key='2';
 800063e:	4b71      	ldr	r3, [pc, #452]	; (8000804 <Get_Key+0x2e4>)
 8000640:	2232      	movs	r2, #50	; 0x32
 8000642:	701a      	strb	r2, [r3, #0]
		break;
 8000644:	e112      	b.n	800086c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000646:	2180      	movs	r1, #128	; 0x80
 8000648:	486f      	ldr	r0, [pc, #444]	; (8000808 <Get_Key+0x2e8>)
 800064a:	f001 fbf9 	bl	8001e40 <HAL_GPIO_ReadPin>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d00b      	beq.n	800066c <Get_Key+0x14c>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000654:	bf00      	nop
 8000656:	2180      	movs	r1, #128	; 0x80
 8000658:	486b      	ldr	r0, [pc, #428]	; (8000808 <Get_Key+0x2e8>)
 800065a:	f001 fbf1 	bl	8001e40 <HAL_GPIO_ReadPin>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d1f8      	bne.n	8000656 <Get_Key+0x136>
		key='5';
 8000664:	4b67      	ldr	r3, [pc, #412]	; (8000804 <Get_Key+0x2e4>)
 8000666:	2235      	movs	r2, #53	; 0x35
 8000668:	701a      	strb	r2, [r3, #0]
		break;
 800066a:	e0ff      	b.n	800086c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 800066c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000670:	4866      	ldr	r0, [pc, #408]	; (800080c <Get_Key+0x2ec>)
 8000672:	f001 fbe5 	bl	8001e40 <HAL_GPIO_ReadPin>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d00c      	beq.n	8000696 <Get_Key+0x176>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 800067c:	bf00      	nop
 800067e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000682:	4862      	ldr	r0, [pc, #392]	; (800080c <Get_Key+0x2ec>)
 8000684:	f001 fbdc 	bl	8001e40 <HAL_GPIO_ReadPin>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d1f7      	bne.n	800067e <Get_Key+0x15e>
		key='8';
 800068e:	4b5d      	ldr	r3, [pc, #372]	; (8000804 <Get_Key+0x2e4>)
 8000690:	2238      	movs	r2, #56	; 0x38
 8000692:	701a      	strb	r2, [r3, #0]
		break;
 8000694:	e0ea      	b.n	800086c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000696:	f44f 7180 	mov.w	r1, #256	; 0x100
 800069a:	485c      	ldr	r0, [pc, #368]	; (800080c <Get_Key+0x2ec>)
 800069c:	f001 fbd0 	bl	8001e40 <HAL_GPIO_ReadPin>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d00c      	beq.n	80006c0 <Get_Key+0x1a0>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80006a6:	bf00      	nop
 80006a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ac:	4857      	ldr	r0, [pc, #348]	; (800080c <Get_Key+0x2ec>)
 80006ae:	f001 fbc7 	bl	8001e40 <HAL_GPIO_ReadPin>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d1f7      	bne.n	80006a8 <Get_Key+0x188>
		key='0';
 80006b8:	4b52      	ldr	r3, [pc, #328]	; (8000804 <Get_Key+0x2e4>)
 80006ba:	2230      	movs	r2, #48	; 0x30
 80006bc:	701a      	strb	r2, [r3, #0]
		break;
 80006be:	e0d5      	b.n	800086c <Get_Key+0x34c>
	}
	//COLUMN 1
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);  // Pull the C0 LOW  
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006c6:	484e      	ldr	r0, [pc, #312]	; (8000800 <Get_Key+0x2e0>)
 80006c8:	f001 fbd2 	bl	8001e70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);  // Pull the C1 LOW
 80006cc:	2200      	movs	r2, #0
 80006ce:	2110      	movs	r1, #16
 80006d0:	484b      	ldr	r0, [pc, #300]	; (8000800 <Get_Key+0x2e0>)
 80006d2:	f001 fbcd 	bl	8001e70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);    // Pull the C2 HIGH
 80006d6:	2201      	movs	r2, #1
 80006d8:	2120      	movs	r1, #32
 80006da:	4849      	ldr	r0, [pc, #292]	; (8000800 <Get_Key+0x2e0>)
 80006dc:	f001 fbc8 	bl	8001e70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);  // Pull the C3 LOW
 80006e0:	2200      	movs	r2, #0
 80006e2:	2108      	movs	r1, #8
 80006e4:	4846      	ldr	r0, [pc, #280]	; (8000800 <Get_Key+0x2e0>)
 80006e6:	f001 fbc3 	bl	8001e70 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80006ea:	2140      	movs	r1, #64	; 0x40
 80006ec:	4844      	ldr	r0, [pc, #272]	; (8000800 <Get_Key+0x2e0>)
 80006ee:	f001 fba7 	bl	8001e40 <HAL_GPIO_ReadPin>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d00b      	beq.n	8000710 <Get_Key+0x1f0>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80006f8:	bf00      	nop
 80006fa:	2140      	movs	r1, #64	; 0x40
 80006fc:	4840      	ldr	r0, [pc, #256]	; (8000800 <Get_Key+0x2e0>)
 80006fe:	f001 fb9f 	bl	8001e40 <HAL_GPIO_ReadPin>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d1f8      	bne.n	80006fa <Get_Key+0x1da>
		key='3';
 8000708:	4b3e      	ldr	r3, [pc, #248]	; (8000804 <Get_Key+0x2e4>)
 800070a:	2233      	movs	r2, #51	; 0x33
 800070c:	701a      	strb	r2, [r3, #0]
		break;
 800070e:	e0ad      	b.n	800086c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000710:	2180      	movs	r1, #128	; 0x80
 8000712:	483d      	ldr	r0, [pc, #244]	; (8000808 <Get_Key+0x2e8>)
 8000714:	f001 fb94 	bl	8001e40 <HAL_GPIO_ReadPin>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d00b      	beq.n	8000736 <Get_Key+0x216>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 800071e:	bf00      	nop
 8000720:	2180      	movs	r1, #128	; 0x80
 8000722:	4839      	ldr	r0, [pc, #228]	; (8000808 <Get_Key+0x2e8>)
 8000724:	f001 fb8c 	bl	8001e40 <HAL_GPIO_ReadPin>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d1f8      	bne.n	8000720 <Get_Key+0x200>
		key='6';
 800072e:	4b35      	ldr	r3, [pc, #212]	; (8000804 <Get_Key+0x2e4>)
 8000730:	2236      	movs	r2, #54	; 0x36
 8000732:	701a      	strb	r2, [r3, #0]
		break;
 8000734:	e09a      	b.n	800086c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000736:	f44f 7100 	mov.w	r1, #512	; 0x200
 800073a:	4834      	ldr	r0, [pc, #208]	; (800080c <Get_Key+0x2ec>)
 800073c:	f001 fb80 	bl	8001e40 <HAL_GPIO_ReadPin>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d00c      	beq.n	8000760 <Get_Key+0x240>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000746:	bf00      	nop
 8000748:	f44f 7100 	mov.w	r1, #512	; 0x200
 800074c:	482f      	ldr	r0, [pc, #188]	; (800080c <Get_Key+0x2ec>)
 800074e:	f001 fb77 	bl	8001e40 <HAL_GPIO_ReadPin>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d1f7      	bne.n	8000748 <Get_Key+0x228>
		key='9';
 8000758:	4b2a      	ldr	r3, [pc, #168]	; (8000804 <Get_Key+0x2e4>)
 800075a:	2239      	movs	r2, #57	; 0x39
 800075c:	701a      	strb	r2, [r3, #0]
		break;
 800075e:	e085      	b.n	800086c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000760:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000764:	4829      	ldr	r0, [pc, #164]	; (800080c <Get_Key+0x2ec>)
 8000766:	f001 fb6b 	bl	8001e40 <HAL_GPIO_ReadPin>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d00c      	beq.n	800078a <Get_Key+0x26a>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000770:	bf00      	nop
 8000772:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000776:	4825      	ldr	r0, [pc, #148]	; (800080c <Get_Key+0x2ec>)
 8000778:	f001 fb62 	bl	8001e40 <HAL_GPIO_ReadPin>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d1f7      	bne.n	8000772 <Get_Key+0x252>
		key='#';
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <Get_Key+0x2e4>)
 8000784:	2223      	movs	r2, #35	; 0x23
 8000786:	701a      	strb	r2, [r3, #0]
		break;
 8000788:	e070      	b.n	800086c <Get_Key+0x34c>
	}
	//COLUMN 0
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000790:	481b      	ldr	r0, [pc, #108]	; (8000800 <Get_Key+0x2e0>)
 8000792:	f001 fb6d 	bl	8001e70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 8000796:	2200      	movs	r2, #0
 8000798:	2110      	movs	r1, #16
 800079a:	4819      	ldr	r0, [pc, #100]	; (8000800 <Get_Key+0x2e0>)
 800079c:	f001 fb68 	bl	8001e70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80007a0:	2200      	movs	r2, #0
 80007a2:	2120      	movs	r1, #32
 80007a4:	4816      	ldr	r0, [pc, #88]	; (8000800 <Get_Key+0x2e0>)
 80007a6:	f001 fb63 	bl	8001e70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);     // Pull the C3 HIGH
 80007aa:	2201      	movs	r2, #1
 80007ac:	2108      	movs	r1, #8
 80007ae:	4814      	ldr	r0, [pc, #80]	; (8000800 <Get_Key+0x2e0>)
 80007b0:	f001 fb5e 	bl	8001e70 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80007b4:	2140      	movs	r1, #64	; 0x40
 80007b6:	4812      	ldr	r0, [pc, #72]	; (8000800 <Get_Key+0x2e0>)
 80007b8:	f001 fb42 	bl	8001e40 <HAL_GPIO_ReadPin>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d00b      	beq.n	80007da <Get_Key+0x2ba>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80007c2:	bf00      	nop
 80007c4:	2140      	movs	r1, #64	; 0x40
 80007c6:	480e      	ldr	r0, [pc, #56]	; (8000800 <Get_Key+0x2e0>)
 80007c8:	f001 fb3a 	bl	8001e40 <HAL_GPIO_ReadPin>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d1f8      	bne.n	80007c4 <Get_Key+0x2a4>
		key='A';
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <Get_Key+0x2e4>)
 80007d4:	2241      	movs	r2, #65	; 0x41
 80007d6:	701a      	strb	r2, [r3, #0]
		break;
 80007d8:	e048      	b.n	800086c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80007da:	2180      	movs	r1, #128	; 0x80
 80007dc:	480a      	ldr	r0, [pc, #40]	; (8000808 <Get_Key+0x2e8>)
 80007de:	f001 fb2f 	bl	8001e40 <HAL_GPIO_ReadPin>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d013      	beq.n	8000810 <Get_Key+0x2f0>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80007e8:	bf00      	nop
 80007ea:	2180      	movs	r1, #128	; 0x80
 80007ec:	4806      	ldr	r0, [pc, #24]	; (8000808 <Get_Key+0x2e8>)
 80007ee:	f001 fb27 	bl	8001e40 <HAL_GPIO_ReadPin>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d1f8      	bne.n	80007ea <Get_Key+0x2ca>
		key='B';
 80007f8:	4b02      	ldr	r3, [pc, #8]	; (8000804 <Get_Key+0x2e4>)
 80007fa:	2242      	movs	r2, #66	; 0x42
 80007fc:	701a      	strb	r2, [r3, #0]
		break;
 80007fe:	e035      	b.n	800086c <Get_Key+0x34c>
 8000800:	40020400 	.word	0x40020400
 8000804:	20000044 	.word	0x20000044
 8000808:	40020800 	.word	0x40020800
 800080c:	40020000 	.word	0x40020000
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000810:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000814:	481a      	ldr	r0, [pc, #104]	; (8000880 <Get_Key+0x360>)
 8000816:	f001 fb13 	bl	8001e40 <HAL_GPIO_ReadPin>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d00c      	beq.n	800083a <Get_Key+0x31a>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000820:	bf00      	nop
 8000822:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000826:	4816      	ldr	r0, [pc, #88]	; (8000880 <Get_Key+0x360>)
 8000828:	f001 fb0a 	bl	8001e40 <HAL_GPIO_ReadPin>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d1f7      	bne.n	8000822 <Get_Key+0x302>
		key='C';
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <Get_Key+0x364>)
 8000834:	2243      	movs	r2, #67	; 0x43
 8000836:	701a      	strb	r2, [r3, #0]
		break;
 8000838:	e018      	b.n	800086c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 800083a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800083e:	4810      	ldr	r0, [pc, #64]	; (8000880 <Get_Key+0x360>)
 8000840:	f001 fafe 	bl	8001e40 <HAL_GPIO_ReadPin>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d00c      	beq.n	8000864 <Get_Key+0x344>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 800084a:	bf00      	nop
 800084c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000850:	480b      	ldr	r0, [pc, #44]	; (8000880 <Get_Key+0x360>)
 8000852:	f001 faf5 	bl	8001e40 <HAL_GPIO_ReadPin>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d1f7      	bne.n	800084c <Get_Key+0x32c>
		key='D';
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <Get_Key+0x364>)
 800085e:	2244      	movs	r2, #68	; 0x44
 8000860:	701a      	strb	r2, [r3, #0]
		break;
 8000862:	e003      	b.n	800086c <Get_Key+0x34c>
	while(done)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2b00      	cmp	r3, #0
 8000868:	f47f ae60 	bne.w	800052c <Get_Key+0xc>
	}
}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800086c:	2120      	movs	r1, #32
 800086e:	4804      	ldr	r0, [pc, #16]	; (8000880 <Get_Key+0x360>)
 8000870:	f001 fb17 	bl	8001ea2 <HAL_GPIO_TogglePin>
	return(key);
 8000874:	4b03      	ldr	r3, [pc, #12]	; (8000884 <Get_Key+0x364>)
 8000876:	781b      	ldrb	r3, [r3, #0]
}
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40020000 	.word	0x40020000
 8000884:	20000044 	.word	0x20000044

08000888 <appendTypedCode>:
int LCDUpdateFlag = 1;
int LightsUpdateFlag = 1;



void appendTypedCode(char c){
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
	if(typedCodeIndex < MAX_CODE_SIZE){
 8000892:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <appendTypedCode+0x40>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2b05      	cmp	r3, #5
 8000898:	dc0a      	bgt.n	80008b0 <appendTypedCode+0x28>
		typedCode[typedCodeIndex] = c;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <appendTypedCode+0x40>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	490b      	ldr	r1, [pc, #44]	; (80008cc <appendTypedCode+0x44>)
 80008a0:	79fa      	ldrb	r2, [r7, #7]
 80008a2:	54ca      	strb	r2, [r1, r3]
		typedCodeIndex++;
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <appendTypedCode+0x40>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	3301      	adds	r3, #1
 80008aa:	4a07      	ldr	r2, [pc, #28]	; (80008c8 <appendTypedCode+0x40>)
 80008ac:	6013      	str	r3, [r2, #0]
	}else{
		//clearing typedCode variable
		memset(typedCode, 0, MAX_CODE_SIZE);
		typedCodeIndex = 0;
	}
}
 80008ae:	e007      	b.n	80008c0 <appendTypedCode+0x38>
		memset(typedCode, 0, MAX_CODE_SIZE);
 80008b0:	2206      	movs	r2, #6
 80008b2:	2100      	movs	r1, #0
 80008b4:	4805      	ldr	r0, [pc, #20]	; (80008cc <appendTypedCode+0x44>)
 80008b6:	f006 fac1 	bl	8006e3c <memset>
		typedCodeIndex = 0;
 80008ba:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <appendTypedCode+0x40>)
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000104 	.word	0x20000104
 80008cc:	200000fc 	.word	0x200000fc

080008d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d4:	f000 ffd8 	bl	8001888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d8:	f000 f860 	bl	800099c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008dc:	f000 f924 	bl	8000b28 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008e0:	f000 f8f8 	bl	8000ad4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80008e4:	f000 f8c8 	bl	8000a78 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */
    SSD1306_Init();
 80008e8:	f000 fb72 	bl	8000fd0 <SSD1306_Init>
//    HAL_Delay (500);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008ec:	f003 fc84 	bl	80041f8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of consoleQueue */
  consoleQueueHandle = osMessageQueueNew (10, 25, &consoleQueue_attributes);
 80008f0:	4a19      	ldr	r2, [pc, #100]	; (8000958 <main+0x88>)
 80008f2:	2119      	movs	r1, #25
 80008f4:	200a      	movs	r0, #10
 80008f6:	f003 fd8b 	bl	8004410 <osMessageQueueNew>
 80008fa:	4603      	mov	r3, r0
 80008fc:	4a17      	ldr	r2, [pc, #92]	; (800095c <main+0x8c>)
 80008fe:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000900:	4a17      	ldr	r2, [pc, #92]	; (8000960 <main+0x90>)
 8000902:	2100      	movs	r1, #0
 8000904:	4817      	ldr	r0, [pc, #92]	; (8000964 <main+0x94>)
 8000906:	f003 fcd6 	bl	80042b6 <osThreadNew>
 800090a:	4603      	mov	r3, r0
 800090c:	4a16      	ldr	r2, [pc, #88]	; (8000968 <main+0x98>)
 800090e:	6013      	str	r3, [r2, #0]

  /* creation of keypadTask */
  keypadTaskHandle = osThreadNew(StartkeypadTask, NULL, &keypadTask_attributes);
 8000910:	4a16      	ldr	r2, [pc, #88]	; (800096c <main+0x9c>)
 8000912:	2100      	movs	r1, #0
 8000914:	4816      	ldr	r0, [pc, #88]	; (8000970 <main+0xa0>)
 8000916:	f003 fcce 	bl	80042b6 <osThreadNew>
 800091a:	4603      	mov	r3, r0
 800091c:	4a15      	ldr	r2, [pc, #84]	; (8000974 <main+0xa4>)
 800091e:	6013      	str	r3, [r2, #0]

  /* creation of LCDTask */
  LCDTaskHandle = osThreadNew(StartLCDTask, NULL, &LCDTask_attributes);
 8000920:	4a15      	ldr	r2, [pc, #84]	; (8000978 <main+0xa8>)
 8000922:	2100      	movs	r1, #0
 8000924:	4815      	ldr	r0, [pc, #84]	; (800097c <main+0xac>)
 8000926:	f003 fcc6 	bl	80042b6 <osThreadNew>
 800092a:	4603      	mov	r3, r0
 800092c:	4a14      	ldr	r2, [pc, #80]	; (8000980 <main+0xb0>)
 800092e:	6013      	str	r3, [r2, #0]

  /* creation of lightsTask */
  lightsTaskHandle = osThreadNew(StartlightsTask, NULL, &lightsTask_attributes);
 8000930:	4a14      	ldr	r2, [pc, #80]	; (8000984 <main+0xb4>)
 8000932:	2100      	movs	r1, #0
 8000934:	4814      	ldr	r0, [pc, #80]	; (8000988 <main+0xb8>)
 8000936:	f003 fcbe 	bl	80042b6 <osThreadNew>
 800093a:	4603      	mov	r3, r0
 800093c:	4a13      	ldr	r2, [pc, #76]	; (800098c <main+0xbc>)
 800093e:	6013      	str	r3, [r2, #0]

  pirTaskHandle = osThreadNew(StartPirTask, NULL, &pirTask_attributes);
 8000940:	4a13      	ldr	r2, [pc, #76]	; (8000990 <main+0xc0>)
 8000942:	2100      	movs	r1, #0
 8000944:	4813      	ldr	r0, [pc, #76]	; (8000994 <main+0xc4>)
 8000946:	f003 fcb6 	bl	80042b6 <osThreadNew>
 800094a:	4603      	mov	r3, r0
 800094c:	4a12      	ldr	r2, [pc, #72]	; (8000998 <main+0xc8>)
 800094e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000950:	f003 fc76 	bl	8004240 <osKernelStart>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000954:	e7fe      	b.n	8000954 <main+0x84>
 8000956:	bf00      	nop
 8000958:	08007d60 	.word	0x08007d60
 800095c:	200000f8 	.word	0x200000f8
 8000960:	08007cac 	.word	0x08007cac
 8000964:	08000c99 	.word	0x08000c99
 8000968:	200000e4 	.word	0x200000e4
 800096c:	08007cd0 	.word	0x08007cd0
 8000970:	08000ca9 	.word	0x08000ca9
 8000974:	200000e8 	.word	0x200000e8
 8000978:	08007cf4 	.word	0x08007cf4
 800097c:	08000dbd 	.word	0x08000dbd
 8000980:	200000ec 	.word	0x200000ec
 8000984:	08007d18 	.word	0x08007d18
 8000988:	08000e81 	.word	0x08000e81
 800098c:	200000f0 	.word	0x200000f0
 8000990:	08007d3c 	.word	0x08007d3c
 8000994:	08000ee5 	.word	0x08000ee5
 8000998:	200000f4 	.word	0x200000f4

0800099c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b094      	sub	sp, #80	; 0x50
 80009a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	2234      	movs	r2, #52	; 0x34
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f006 fa46 	bl	8006e3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b0:	f107 0308 	add.w	r3, r7, #8
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c0:	2300      	movs	r3, #0
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	4b2a      	ldr	r3, [pc, #168]	; (8000a70 <SystemClock_Config+0xd4>)
 80009c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c8:	4a29      	ldr	r2, [pc, #164]	; (8000a70 <SystemClock_Config+0xd4>)
 80009ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ce:	6413      	str	r3, [r2, #64]	; 0x40
 80009d0:	4b27      	ldr	r3, [pc, #156]	; (8000a70 <SystemClock_Config+0xd4>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009dc:	2300      	movs	r3, #0
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	4b24      	ldr	r3, [pc, #144]	; (8000a74 <SystemClock_Config+0xd8>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009e8:	4a22      	ldr	r2, [pc, #136]	; (8000a74 <SystemClock_Config+0xd8>)
 80009ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ee:	6013      	str	r3, [r2, #0]
 80009f0:	4b20      	ldr	r3, [pc, #128]	; (8000a74 <SystemClock_Config+0xd8>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009fc:	2302      	movs	r3, #2
 80009fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a00:	2301      	movs	r3, #1
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a04:	2310      	movs	r3, #16
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a10:	2310      	movs	r3, #16
 8000a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a14:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a18:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a22:	2302      	movs	r3, #2
 8000a24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f002 fb9c 	bl	8003168 <HAL_RCC_OscConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a36:	f000 fac5 	bl	8000fc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3a:	230f      	movs	r3, #15
 8000a3c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a42:	2300      	movs	r3, #0
 8000a44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a50:	f107 0308 	add.w	r3, r7, #8
 8000a54:	2102      	movs	r1, #2
 8000a56:	4618      	mov	r0, r3
 8000a58:	f002 f80a 	bl	8002a70 <HAL_RCC_ClockConfig>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a62:	f000 faaf 	bl	8000fc4 <Error_Handler>
  }
}
 8000a66:	bf00      	nop
 8000a68:	3750      	adds	r7, #80	; 0x50
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40007000 	.word	0x40007000

08000a78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <MX_I2C1_Init+0x50>)
 8000a7e:	4a13      	ldr	r2, [pc, #76]	; (8000acc <MX_I2C1_Init+0x54>)
 8000a80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <MX_I2C1_Init+0x50>)
 8000a84:	4a12      	ldr	r2, [pc, #72]	; (8000ad0 <MX_I2C1_Init+0x58>)
 8000a86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <MX_I2C1_Init+0x50>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <MX_I2C1_Init+0x50>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <MX_I2C1_Init+0x50>)
 8000a96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <MX_I2C1_Init+0x50>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <MX_I2C1_Init+0x50>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aa8:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <MX_I2C1_Init+0x50>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <MX_I2C1_Init+0x50>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ab4:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <MX_I2C1_Init+0x50>)
 8000ab6:	f001 fa0f 	bl	8001ed8 <HAL_I2C_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ac0:	f000 fa80 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000048 	.word	0x20000048
 8000acc:	40005400 	.word	0x40005400
 8000ad0:	00061a80 	.word	0x00061a80

08000ad4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000ada:	4a12      	ldr	r2, [pc, #72]	; (8000b24 <MX_USART2_UART_Init+0x50>)
 8000adc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000ae0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ae4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000afa:	220c      	movs	r2, #12
 8000afc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000b0c:	f003 f86c 	bl	8003be8 <HAL_UART_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b16:	f000 fa55 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	2000009c 	.word	0x2000009c
 8000b24:	40004400 	.word	0x40004400

08000b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	4b51      	ldr	r3, [pc, #324]	; (8000c88 <MX_GPIO_Init+0x160>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a50      	ldr	r2, [pc, #320]	; (8000c88 <MX_GPIO_Init+0x160>)
 8000b48:	f043 0304 	orr.w	r3, r3, #4
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b4e      	ldr	r3, [pc, #312]	; (8000c88 <MX_GPIO_Init+0x160>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0304 	and.w	r3, r3, #4
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	4b4a      	ldr	r3, [pc, #296]	; (8000c88 <MX_GPIO_Init+0x160>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a49      	ldr	r2, [pc, #292]	; (8000c88 <MX_GPIO_Init+0x160>)
 8000b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b47      	ldr	r3, [pc, #284]	; (8000c88 <MX_GPIO_Init+0x160>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	4b43      	ldr	r3, [pc, #268]	; (8000c88 <MX_GPIO_Init+0x160>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a42      	ldr	r2, [pc, #264]	; (8000c88 <MX_GPIO_Init+0x160>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b40      	ldr	r3, [pc, #256]	; (8000c88 <MX_GPIO_Init+0x160>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	4b3c      	ldr	r3, [pc, #240]	; (8000c88 <MX_GPIO_Init+0x160>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a3b      	ldr	r2, [pc, #236]	; (8000c88 <MX_GPIO_Init+0x160>)
 8000b9c:	f043 0302 	orr.w	r3, r3, #2
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b39      	ldr	r3, [pc, #228]	; (8000c88 <MX_GPIO_Init+0x160>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2160      	movs	r1, #96	; 0x60
 8000bb2:	4836      	ldr	r0, [pc, #216]	; (8000c8c <MX_GPIO_Init+0x164>)
 8000bb4:	f001 f95c 	bl	8001e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000bbe:	4834      	ldr	r0, [pc, #208]	; (8000c90 <MX_GPIO_Init+0x168>)
 8000bc0:	f001 f956 	bl	8001e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000bc4:	2360      	movs	r3, #96	; 0x60
 8000bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	482c      	ldr	r0, [pc, #176]	; (8000c8c <MX_GPIO_Init+0x164>)
 8000bdc:	f000 ff9c 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : KC0_Pin KC3_Pin KC1_Pin KC2_Pin */
  GPIO_InitStruct.Pin = KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin;
 8000be0:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be6:	2301      	movs	r3, #1
 8000be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4825      	ldr	r0, [pc, #148]	; (8000c90 <MX_GPIO_Init+0x168>)
 8000bfa:	f000 ff8d 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : KR1_Pin */
  GPIO_InitStruct.Pin = KR1_Pin;
 8000bfe:	2380      	movs	r3, #128	; 0x80
 8000c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c06:	2302      	movs	r3, #2
 8000c08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR1_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4820      	ldr	r0, [pc, #128]	; (8000c94 <MX_GPIO_Init+0x16c>)
 8000c12:	f000 ff81 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : KR3_Pin KR2_Pin */
  GPIO_InitStruct.Pin = KR3_Pin|KR2_Pin;
 8000c16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c20:	2302      	movs	r3, #2
 8000c22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4818      	ldr	r0, [pc, #96]	; (8000c8c <MX_GPIO_Init+0x164>)
 8000c2c:	f000 ff74 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : KR0_Pin */
  GPIO_InitStruct.Pin = KR0_Pin;
 8000c30:	2340      	movs	r3, #64	; 0x40
 8000c32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR0_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4619      	mov	r1, r3
 8000c42:	4813      	ldr	r0, [pc, #76]	; (8000c90 <MX_GPIO_Init+0x168>)
 8000c44:	f000 ff68 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pin for the PIR Sensor */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	480b      	ldr	r0, [pc, #44]	; (8000c8c <MX_GPIO_Init+0x164>)
 8000c5e:	f000 ff5b 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pin for the Buzzer */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4804      	ldr	r0, [pc, #16]	; (8000c8c <MX_GPIO_Init+0x164>)
 8000c7c:	f000 ff4c 	bl	8001b18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c80:	bf00      	nop
 8000c82:	3728      	adds	r7, #40	; 0x28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020000 	.word	0x40020000
 8000c90:	40020400 	.word	0x40020400
 8000c94:	40020800 	.word	0x40020800

08000c98 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f003 fb9a 	bl	80043da <osDelay>
 8000ca6:	e7fb      	b.n	8000ca0 <StartDefaultTask+0x8>

08000ca8 <StartkeypadTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartkeypadTask */
void StartkeypadTask(void *argument)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartkeypadTask */
  /* Infinite loop */
  for(;;)
  {
	key = Get_Key();
 8000cb0:	f7ff fc36 	bl	8000520 <Get_Key>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	4b38      	ldr	r3, [pc, #224]	; (8000d9c <StartkeypadTask+0xf4>)
 8000cba:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cc2:	4837      	ldr	r0, [pc, #220]	; (8000da0 <StartkeypadTask+0xf8>)
 8000cc4:	f001 f8d4 	bl	8001e70 <HAL_GPIO_WritePin>
	  osDelay(10000);
 8000cc8:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ccc:	f003 fb85 	bl	80043da <osDelay>
//	actionCode = '\0';
	if(key == '#'){
 8000cd0:	4b32      	ldr	r3, [pc, #200]	; (8000d9c <StartkeypadTask+0xf4>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b23      	cmp	r3, #35	; 0x23
 8000cd6:	d148      	bne.n	8000d6a <StartkeypadTask+0xc2>
//		actionCode = key;
		if(typedCodeIndex == 4 || typedCodeIndex == 5 || typedCodeIndex == 6){
 8000cd8:	4b32      	ldr	r3, [pc, #200]	; (8000da4 <StartkeypadTask+0xfc>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b04      	cmp	r3, #4
 8000cde:	d007      	beq.n	8000cf0 <StartkeypadTask+0x48>
 8000ce0:	4b30      	ldr	r3, [pc, #192]	; (8000da4 <StartkeypadTask+0xfc>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b05      	cmp	r3, #5
 8000ce6:	d003      	beq.n	8000cf0 <StartkeypadTask+0x48>
 8000ce8:	4b2e      	ldr	r3, [pc, #184]	; (8000da4 <StartkeypadTask+0xfc>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b06      	cmp	r3, #6
 8000cee:	d133      	bne.n	8000d58 <StartkeypadTask+0xb0>
			if(alarmState == 1){
 8000cf0:	4b2d      	ldr	r3, [pc, #180]	; (8000da8 <StartkeypadTask+0x100>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d11b      	bne.n	8000d30 <StartkeypadTask+0x88>
				if(strcmp(passcode, typedCode) == 0){
 8000cf8:	492c      	ldr	r1, [pc, #176]	; (8000dac <StartkeypadTask+0x104>)
 8000cfa:	482d      	ldr	r0, [pc, #180]	; (8000db0 <StartkeypadTask+0x108>)
 8000cfc:	f7ff fa88 	bl	8000210 <strcmp>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d10b      	bne.n	8000d1e <StartkeypadTask+0x76>
					alarmState = 0;
 8000d06:	4b28      	ldr	r3, [pc, #160]	; (8000da8 <StartkeypadTask+0x100>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]

					//clearing typed code
					memset(typedCode, 0, MAX_CODE_SIZE);
 8000d0c:	2206      	movs	r2, #6
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4826      	ldr	r0, [pc, #152]	; (8000dac <StartkeypadTask+0x104>)
 8000d12:	f006 f893 	bl	8006e3c <memset>
					typedCodeIndex = 0;
 8000d16:	4b23      	ldr	r3, [pc, #140]	; (8000da4 <StartkeypadTask+0xfc>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
			if(alarmState == 1){
 8000d1c:	e02f      	b.n	8000d7e <StartkeypadTask+0xd6>
				} else{
//					char errMsg[25];
//					snprintf(errMsg, sizeof(errMsg), "[AUTH] - REQ: %s\n", passcode);
//					snprintf(errMsg, sizeof(errMsg), "[AUTH] - GOT: %s\n", typedCode);
					//clearing typed code
					memset(typedCode, 0, MAX_CODE_SIZE);
 8000d1e:	2206      	movs	r2, #6
 8000d20:	2100      	movs	r1, #0
 8000d22:	4822      	ldr	r0, [pc, #136]	; (8000dac <StartkeypadTask+0x104>)
 8000d24:	f006 f88a 	bl	8006e3c <memset>
					typedCodeIndex = 0;
 8000d28:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <StartkeypadTask+0xfc>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
			if(alarmState == 1){
 8000d2e:	e026      	b.n	8000d7e <StartkeypadTask+0xd6>
				}
			}
			else if(alarmState == 0){
 8000d30:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <StartkeypadTask+0x100>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d122      	bne.n	8000d7e <StartkeypadTask+0xd6>
				strcpy(passcode, typedCode);
 8000d38:	491c      	ldr	r1, [pc, #112]	; (8000dac <StartkeypadTask+0x104>)
 8000d3a:	481d      	ldr	r0, [pc, #116]	; (8000db0 <StartkeypadTask+0x108>)
 8000d3c:	f006 f8aa 	bl	8006e94 <strcpy>
				alarmState = 1;
 8000d40:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <StartkeypadTask+0x100>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	601a      	str	r2, [r3, #0]

				//clearing typed code
				memset(typedCode, 0, MAX_CODE_SIZE);
 8000d46:	2206      	movs	r2, #6
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4818      	ldr	r0, [pc, #96]	; (8000dac <StartkeypadTask+0x104>)
 8000d4c:	f006 f876 	bl	8006e3c <memset>
				typedCodeIndex = 0;
 8000d50:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <StartkeypadTask+0xfc>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
			if(alarmState == 1){
 8000d56:	e012      	b.n	8000d7e <StartkeypadTask+0xd6>
			}
		} else{ //invalid code length
			//clearing typed code
			memset(typedCode, 0, MAX_CODE_SIZE);
 8000d58:	2206      	movs	r2, #6
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4813      	ldr	r0, [pc, #76]	; (8000dac <StartkeypadTask+0x104>)
 8000d5e:	f006 f86d 	bl	8006e3c <memset>
			typedCodeIndex = 0;
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <StartkeypadTask+0xfc>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	e00a      	b.n	8000d80 <StartkeypadTask+0xd8>
		}
	}else if (key != '*'){ //'*' is not alphanumeric
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <StartkeypadTask+0xf4>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b2a      	cmp	r3, #42	; 0x2a
 8000d70:	d006      	beq.n	8000d80 <StartkeypadTask+0xd8>
		appendTypedCode(key); //character is not '#', i.e. new char in typedCode
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <StartkeypadTask+0xf4>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fd86 	bl	8000888 <appendTypedCode>
 8000d7c:	e000      	b.n	8000d80 <StartkeypadTask+0xd8>
			if(alarmState == 1){
 8000d7e:	bf00      	nop

	}
	LCDUpdateFlag = 1;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <StartkeypadTask+0x10c>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	601a      	str	r2, [r3, #0]
	LightsUpdateFlag = 1;
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <StartkeypadTask+0x110>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	601a      	str	r2, [r3, #0]

	HAL_Delay(100);
 8000d8c:	2064      	movs	r0, #100	; 0x64
 8000d8e:	f000 fdbd 	bl	800190c <HAL_Delay>
    osDelay(1);
 8000d92:	2001      	movs	r0, #1
 8000d94:	f003 fb21 	bl	80043da <osDelay>
	key = Get_Key();
 8000d98:	e78a      	b.n	8000cb0 <StartkeypadTask+0x8>
 8000d9a:	bf00      	nop
 8000d9c:	20000044 	.word	0x20000044
 8000da0:	40020000 	.word	0x40020000
 8000da4:	20000104 	.word	0x20000104
 8000da8:	20000108 	.word	0x20000108
 8000dac:	200000fc 	.word	0x200000fc
 8000db0:	20000008 	.word	0x20000008
 8000db4:	20000010 	.word	0x20000010
 8000db8:	20000014 	.word	0x20000014

08000dbc <StartLCDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLCDTask */
void StartLCDTask(void *argument)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLCDTask */
  /* Infinite loop */
  for(;;)
  {
	  if(LCDUpdateFlag == 1){
 8000dc4:	4b27      	ldr	r3, [pc, #156]	; (8000e64 <StartLCDTask+0xa8>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d147      	bne.n	8000e5c <StartLCDTask+0xa0>
		  SSD1306_Clear();
 8000dcc:	f000 fb25 	bl	800141a <SSD1306_Clear>
		  SSD1306_UpdateScreen();
 8000dd0:	f000 f9c2 	bl	8001158 <SSD1306_UpdateScreen>

		  SSD1306_GotoXY(0,0);
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f000 fa64 	bl	80012a4 <SSD1306_GotoXY>

		  if(alarmState == 1){
 8000ddc:	4b22      	ldr	r3, [pc, #136]	; (8000e68 <StartLCDTask+0xac>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d105      	bne.n	8000df0 <StartLCDTask+0x34>
			  SSD1306_Puts("Armed", &Font_11x18,1);
 8000de4:	2201      	movs	r2, #1
 8000de6:	4921      	ldr	r1, [pc, #132]	; (8000e6c <StartLCDTask+0xb0>)
 8000de8:	4821      	ldr	r0, [pc, #132]	; (8000e70 <StartLCDTask+0xb4>)
 8000dea:	f000 faf1 	bl	80013d0 <SSD1306_Puts>
 8000dee:	e008      	b.n	8000e02 <StartLCDTask+0x46>
		  }
		  else if(alarmState == 0){
 8000df0:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <StartLCDTask+0xac>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d104      	bne.n	8000e02 <StartLCDTask+0x46>
			  SSD1306_Puts("Disarmed",&Font_11x18,1);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	491c      	ldr	r1, [pc, #112]	; (8000e6c <StartLCDTask+0xb0>)
 8000dfc:	481d      	ldr	r0, [pc, #116]	; (8000e74 <StartLCDTask+0xb8>)
 8000dfe:	f000 fae7 	bl	80013d0 <SSD1306_Puts>
		  }

		  SSD1306_GotoXY (0, 30);
 8000e02:	211e      	movs	r1, #30
 8000e04:	2000      	movs	r0, #0
 8000e06:	f000 fa4d 	bl	80012a4 <SSD1306_GotoXY>
		  SSD1306_Puts("Code:",&Font_11x18, 1);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	4917      	ldr	r1, [pc, #92]	; (8000e6c <StartLCDTask+0xb0>)
 8000e0e:	481a      	ldr	r0, [pc, #104]	; (8000e78 <StartLCDTask+0xbc>)
 8000e10:	f000 fade 	bl	80013d0 <SSD1306_Puts>


		  //This null terminator is necessary for string-handling functions to know where the string ends.
		  char starsToDisplay[MAX_CODE_SIZE+1];
		  for(int i = 0; i < typedCodeIndex; i++){
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	e008      	b.n	8000e2c <StartLCDTask+0x70>
			  starsToDisplay[i] = '*';
 8000e1a:	f107 020c 	add.w	r2, r7, #12
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	4413      	add	r3, r2
 8000e22:	222a      	movs	r2, #42	; 0x2a
 8000e24:	701a      	strb	r2, [r3, #0]
		  for(int i = 0; i < typedCodeIndex; i++){
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <StartLCDTask+0xc0>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	697a      	ldr	r2, [r7, #20]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	dbf1      	blt.n	8000e1a <StartLCDTask+0x5e>
		  }
		  starsToDisplay[typedCodeIndex] = '\0';
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <StartLCDTask+0xc0>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	3318      	adds	r3, #24
 8000e3c:	443b      	add	r3, r7
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f803 2c0c 	strb.w	r2, [r3, #-12]

		  SSD1306_Puts(starsToDisplay, &Font_11x18, 1);
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	2201      	movs	r2, #1
 8000e4a:	4908      	ldr	r1, [pc, #32]	; (8000e6c <StartLCDTask+0xb0>)
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f000 fabf 	bl	80013d0 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 8000e52:	f000 f981 	bl	8001158 <SSD1306_UpdateScreen>
		  LCDUpdateFlag = 0;
 8000e56:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <StartLCDTask+0xa8>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
	  }
    osDelay(1);
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f003 fabc 	bl	80043da <osDelay>
	  if(LCDUpdateFlag == 1){
 8000e62:	e7af      	b.n	8000dc4 <StartLCDTask+0x8>
 8000e64:	20000010 	.word	0x20000010
 8000e68:	20000108 	.word	0x20000108
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	08006f1c 	.word	0x08006f1c
 8000e74:	08006f24 	.word	0x08006f24
 8000e78:	08006f30 	.word	0x08006f30
 8000e7c:	20000104 	.word	0x20000104

08000e80 <StartlightsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartlightsTask */
void StartlightsTask(void *argument)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartlightsTask */
  /* Infinite loop */
  for(;;)
  {
	if(LightsUpdateFlag == 1){
 8000e88:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <StartlightsTask+0x58>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d11f      	bne.n	8000ed0 <StartlightsTask+0x50>
		if(alarmState == 1){ //armed, red light should be on
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <StartlightsTask+0x5c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d10a      	bne.n	8000eae <StartlightsTask+0x2e>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET); //turn off green LED
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2120      	movs	r1, #32
 8000e9c:	4810      	ldr	r0, [pc, #64]	; (8000ee0 <StartlightsTask+0x60>)
 8000e9e:	f000 ffe7 	bl	8001e70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);  //turn on red LED
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2140      	movs	r1, #64	; 0x40
 8000ea6:	480e      	ldr	r0, [pc, #56]	; (8000ee0 <StartlightsTask+0x60>)
 8000ea8:	f000 ffe2 	bl	8001e70 <HAL_GPIO_WritePin>
 8000eac:	e00d      	b.n	8000eca <StartlightsTask+0x4a>
		}else if(alarmState == 0){ //disarmed, green light should be on
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <StartlightsTask+0x5c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d109      	bne.n	8000eca <StartlightsTask+0x4a>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);  //turn on green LED
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2120      	movs	r1, #32
 8000eba:	4809      	ldr	r0, [pc, #36]	; (8000ee0 <StartlightsTask+0x60>)
 8000ebc:	f000 ffd8 	bl	8001e70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET); //turn off red LED
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2140      	movs	r1, #64	; 0x40
 8000ec4:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <StartlightsTask+0x60>)
 8000ec6:	f000 ffd3 	bl	8001e70 <HAL_GPIO_WritePin>
		}
		LightsUpdateFlag = 0;
 8000eca:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <StartlightsTask+0x58>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
	}
    osDelay(1);
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f003 fa82 	bl	80043da <osDelay>
	if(LightsUpdateFlag == 1){
 8000ed6:	e7d7      	b.n	8000e88 <StartlightsTask+0x8>
 8000ed8:	20000014 	.word	0x20000014
 8000edc:	20000108 	.word	0x20000108
 8000ee0:	40020000 	.word	0x40020000

08000ee4 <StartPirTask>:
  }
  /* USER CODE END StartlightsTask */
}

void StartPirTask(void *argument) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint8_t pirState = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	74fb      	strb	r3, [r7, #19]
  uint32_t armTime = 0; // Time when the system was armed
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61fb      	str	r3, [r7, #28]
  uint8_t systemArmed = 0; // Indicates if the system is armed
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	76fb      	strb	r3, [r7, #27]
  const uint32_t gracePeriod = 60000; // 60 seconds in milliseconds
 8000ef8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8000efc:	60fb      	str	r3, [r7, #12]
  uint32_t pirDetectedTime = 0; // Time when PIR sensor detected movement
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]

  for (;;) {
    if (alarmState == 1 && !systemArmed) {
 8000f02:	4b25      	ldr	r3, [pc, #148]	; (8000f98 <StartPirTask+0xb4>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d108      	bne.n	8000f1c <StartPirTask+0x38>
 8000f0a:	7efb      	ldrb	r3, [r7, #27]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d105      	bne.n	8000f1c <StartPirTask+0x38>
      // System has just been armed
      armTime = osKernelGetTickCount(); // Refresh arm time
 8000f10:	f003 f9bc 	bl	800428c <osKernelGetTickCount>
 8000f14:	61f8      	str	r0, [r7, #28]
      systemArmed = 1;
 8000f16:	2301      	movs	r3, #1
 8000f18:	76fb      	strb	r3, [r7, #27]
 8000f1a:	e005      	b.n	8000f28 <StartPirTask+0x44>
    } else if (alarmState == 0) {
 8000f1c:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <StartPirTask+0xb4>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d101      	bne.n	8000f28 <StartPirTask+0x44>
      systemArmed = 0; // System disarmed, reset armed status
 8000f24:	2300      	movs	r3, #0
 8000f26:	76fb      	strb	r3, [r7, #27]
    }

    if (systemArmed) {
 8000f28:	7efb      	ldrb	r3, [r7, #27]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d030      	beq.n	8000f90 <StartPirTask+0xac>
      pirState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8); // Read PIR sensor state
 8000f2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f32:	481a      	ldr	r0, [pc, #104]	; (8000f9c <StartPirTask+0xb8>)
 8000f34:	f000 ff84 	bl	8001e40 <HAL_GPIO_ReadPin>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	74fb      	strb	r3, [r7, #19]
      uint32_t currentTime = osKernelGetTickCount();
 8000f3c:	f003 f9a6 	bl	800428c <osKernelGetTickCount>
 8000f40:	60b8      	str	r0, [r7, #8]

      if (pirState == 1 && (currentTime - armTime) > gracePeriod) {
 8000f42:	7cfb      	ldrb	r3, [r7, #19]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d11e      	bne.n	8000f86 <StartPirTask+0xa2>
 8000f48:	68ba      	ldr	r2, [r7, #8]
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d218      	bcs.n	8000f86 <StartPirTask+0xa2>
        // Presence detected after grace period
        if (pirDetectedTime == 0) { // First detection, start buzzer delay
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d101      	bne.n	8000f5e <StartPirTask+0x7a>
          pirDetectedTime = currentTime;
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	617b      	str	r3, [r7, #20]
        }

        if ((currentTime - pirDetectedTime) < gracePeriod) {
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	68fa      	ldr	r2, [r7, #12]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d906      	bls.n	8000f78 <StartPirTask+0x94>
          // Still within disarm period after detection
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); // Activate buzzer
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f70:	480a      	ldr	r0, [pc, #40]	; (8000f9c <StartPirTask+0xb8>)
 8000f72:	f000 ff7d 	bl	8001e70 <HAL_GPIO_WritePin>
        if ((currentTime - pirDetectedTime) < gracePeriod) {
 8000f76:	e00b      	b.n	8000f90 <StartPirTask+0xac>
        } else {
          // Disarm period expired, stop buzzer or take further action
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); // Stop buzzer
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f7e:	4807      	ldr	r0, [pc, #28]	; (8000f9c <StartPirTask+0xb8>)
 8000f80:	f000 ff76 	bl	8001e70 <HAL_GPIO_WritePin>
        if ((currentTime - pirDetectedTime) < gracePeriod) {
 8000f84:	e004      	b.n	8000f90 <StartPirTask+0xac>
        }
      } else if (pirState == 0) {
 8000f86:	7cfb      	ldrb	r3, [r7, #19]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d101      	bne.n	8000f90 <StartPirTask+0xac>
        pirDetectedTime = 0; // Reset detection time if no movement
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
      }
    }

    osDelay(100); // Short delay to prevent tight looping
 8000f90:	2064      	movs	r0, #100	; 0x64
 8000f92:	f003 fa22 	bl	80043da <osDelay>
    if (alarmState == 1 && !systemArmed) {
 8000f96:	e7b4      	b.n	8000f02 <StartPirTask+0x1e>
 8000f98:	20000108 	.word	0x20000108
 8000f9c:	40020000 	.word	0x40020000

08000fa0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d101      	bne.n	8000fb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fb2:	f000 fc8b 	bl	80018cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40001000 	.word	0x40001000

08000fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc8:	b672      	cpsid	i
}
 8000fca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <Error_Handler+0x8>
	...

08000fd0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000fd6:	f000 fa29 	bl	800142c <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000fda:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2178      	movs	r1, #120	; 0x78
 8000fe2:	485b      	ldr	r0, [pc, #364]	; (8001150 <SSD1306_Init+0x180>)
 8000fe4:	f001 f9ba 	bl	800235c <HAL_I2C_IsDeviceReady>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e0a9      	b.n	8001146 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000ff2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000ff6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ff8:	e002      	b.n	8001000 <SSD1306_Init+0x30>
		p--;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1f9      	bne.n	8000ffa <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001006:	22ae      	movs	r2, #174	; 0xae
 8001008:	2100      	movs	r1, #0
 800100a:	2078      	movs	r0, #120	; 0x78
 800100c:	f000 fa8a 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001010:	2220      	movs	r2, #32
 8001012:	2100      	movs	r1, #0
 8001014:	2078      	movs	r0, #120	; 0x78
 8001016:	f000 fa85 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800101a:	2210      	movs	r2, #16
 800101c:	2100      	movs	r1, #0
 800101e:	2078      	movs	r0, #120	; 0x78
 8001020:	f000 fa80 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001024:	22b0      	movs	r2, #176	; 0xb0
 8001026:	2100      	movs	r1, #0
 8001028:	2078      	movs	r0, #120	; 0x78
 800102a:	f000 fa7b 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800102e:	22c8      	movs	r2, #200	; 0xc8
 8001030:	2100      	movs	r1, #0
 8001032:	2078      	movs	r0, #120	; 0x78
 8001034:	f000 fa76 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001038:	2200      	movs	r2, #0
 800103a:	2100      	movs	r1, #0
 800103c:	2078      	movs	r0, #120	; 0x78
 800103e:	f000 fa71 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001042:	2210      	movs	r2, #16
 8001044:	2100      	movs	r1, #0
 8001046:	2078      	movs	r0, #120	; 0x78
 8001048:	f000 fa6c 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800104c:	2240      	movs	r2, #64	; 0x40
 800104e:	2100      	movs	r1, #0
 8001050:	2078      	movs	r0, #120	; 0x78
 8001052:	f000 fa67 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001056:	2281      	movs	r2, #129	; 0x81
 8001058:	2100      	movs	r1, #0
 800105a:	2078      	movs	r0, #120	; 0x78
 800105c:	f000 fa62 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001060:	22ff      	movs	r2, #255	; 0xff
 8001062:	2100      	movs	r1, #0
 8001064:	2078      	movs	r0, #120	; 0x78
 8001066:	f000 fa5d 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800106a:	22a1      	movs	r2, #161	; 0xa1
 800106c:	2100      	movs	r1, #0
 800106e:	2078      	movs	r0, #120	; 0x78
 8001070:	f000 fa58 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001074:	22a6      	movs	r2, #166	; 0xa6
 8001076:	2100      	movs	r1, #0
 8001078:	2078      	movs	r0, #120	; 0x78
 800107a:	f000 fa53 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800107e:	22a8      	movs	r2, #168	; 0xa8
 8001080:	2100      	movs	r1, #0
 8001082:	2078      	movs	r0, #120	; 0x78
 8001084:	f000 fa4e 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001088:	223f      	movs	r2, #63	; 0x3f
 800108a:	2100      	movs	r1, #0
 800108c:	2078      	movs	r0, #120	; 0x78
 800108e:	f000 fa49 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001092:	22a4      	movs	r2, #164	; 0xa4
 8001094:	2100      	movs	r1, #0
 8001096:	2078      	movs	r0, #120	; 0x78
 8001098:	f000 fa44 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800109c:	22d3      	movs	r2, #211	; 0xd3
 800109e:	2100      	movs	r1, #0
 80010a0:	2078      	movs	r0, #120	; 0x78
 80010a2:	f000 fa3f 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	2078      	movs	r0, #120	; 0x78
 80010ac:	f000 fa3a 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80010b0:	22d5      	movs	r2, #213	; 0xd5
 80010b2:	2100      	movs	r1, #0
 80010b4:	2078      	movs	r0, #120	; 0x78
 80010b6:	f000 fa35 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80010ba:	22f0      	movs	r2, #240	; 0xf0
 80010bc:	2100      	movs	r1, #0
 80010be:	2078      	movs	r0, #120	; 0x78
 80010c0:	f000 fa30 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80010c4:	22d9      	movs	r2, #217	; 0xd9
 80010c6:	2100      	movs	r1, #0
 80010c8:	2078      	movs	r0, #120	; 0x78
 80010ca:	f000 fa2b 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80010ce:	2222      	movs	r2, #34	; 0x22
 80010d0:	2100      	movs	r1, #0
 80010d2:	2078      	movs	r0, #120	; 0x78
 80010d4:	f000 fa26 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80010d8:	22da      	movs	r2, #218	; 0xda
 80010da:	2100      	movs	r1, #0
 80010dc:	2078      	movs	r0, #120	; 0x78
 80010de:	f000 fa21 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80010e2:	2212      	movs	r2, #18
 80010e4:	2100      	movs	r1, #0
 80010e6:	2078      	movs	r0, #120	; 0x78
 80010e8:	f000 fa1c 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80010ec:	22db      	movs	r2, #219	; 0xdb
 80010ee:	2100      	movs	r1, #0
 80010f0:	2078      	movs	r0, #120	; 0x78
 80010f2:	f000 fa17 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80010f6:	2220      	movs	r2, #32
 80010f8:	2100      	movs	r1, #0
 80010fa:	2078      	movs	r0, #120	; 0x78
 80010fc:	f000 fa12 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001100:	228d      	movs	r2, #141	; 0x8d
 8001102:	2100      	movs	r1, #0
 8001104:	2078      	movs	r0, #120	; 0x78
 8001106:	f000 fa0d 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800110a:	2214      	movs	r2, #20
 800110c:	2100      	movs	r1, #0
 800110e:	2078      	movs	r0, #120	; 0x78
 8001110:	f000 fa08 	bl	8001524 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001114:	22af      	movs	r2, #175	; 0xaf
 8001116:	2100      	movs	r1, #0
 8001118:	2078      	movs	r0, #120	; 0x78
 800111a:	f000 fa03 	bl	8001524 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800111e:	222e      	movs	r2, #46	; 0x2e
 8001120:	2100      	movs	r1, #0
 8001122:	2078      	movs	r0, #120	; 0x78
 8001124:	f000 f9fe 	bl	8001524 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001128:	2000      	movs	r0, #0
 800112a:	f000 f843 	bl	80011b4 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800112e:	f000 f813 	bl	8001158 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001132:	4b08      	ldr	r3, [pc, #32]	; (8001154 <SSD1306_Init+0x184>)
 8001134:	2200      	movs	r2, #0
 8001136:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <SSD1306_Init+0x184>)
 800113a:	2200      	movs	r2, #0
 800113c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800113e:	4b05      	ldr	r3, [pc, #20]	; (8001154 <SSD1306_Init+0x184>)
 8001140:	2201      	movs	r2, #1
 8001142:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001144:	2301      	movs	r3, #1
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000048 	.word	0x20000048
 8001154:	2000050c 	.word	0x2000050c

08001158 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800115e:	2300      	movs	r3, #0
 8001160:	71fb      	strb	r3, [r7, #7]
 8001162:	e01d      	b.n	80011a0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	3b50      	subs	r3, #80	; 0x50
 8001168:	b2db      	uxtb	r3, r3
 800116a:	461a      	mov	r2, r3
 800116c:	2100      	movs	r1, #0
 800116e:	2078      	movs	r0, #120	; 0x78
 8001170:	f000 f9d8 	bl	8001524 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001174:	2200      	movs	r2, #0
 8001176:	2100      	movs	r1, #0
 8001178:	2078      	movs	r0, #120	; 0x78
 800117a:	f000 f9d3 	bl	8001524 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800117e:	2210      	movs	r2, #16
 8001180:	2100      	movs	r1, #0
 8001182:	2078      	movs	r0, #120	; 0x78
 8001184:	f000 f9ce 	bl	8001524 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	01db      	lsls	r3, r3, #7
 800118c:	4a08      	ldr	r2, [pc, #32]	; (80011b0 <SSD1306_UpdateScreen+0x58>)
 800118e:	441a      	add	r2, r3
 8001190:	2380      	movs	r3, #128	; 0x80
 8001192:	2140      	movs	r1, #64	; 0x40
 8001194:	2078      	movs	r0, #120	; 0x78
 8001196:	f000 f95f 	bl	8001458 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	3301      	adds	r3, #1
 800119e:	71fb      	strb	r3, [r7, #7]
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	2b07      	cmp	r3, #7
 80011a4:	d9de      	bls.n	8001164 <SSD1306_UpdateScreen+0xc>
	}
}
 80011a6:	bf00      	nop
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	2000010c 	.word	0x2000010c

080011b4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <SSD1306_Fill+0x14>
 80011c4:	2300      	movs	r3, #0
 80011c6:	e000      	b.n	80011ca <SSD1306_Fill+0x16>
 80011c8:	23ff      	movs	r3, #255	; 0xff
 80011ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ce:	4619      	mov	r1, r3
 80011d0:	4803      	ldr	r0, [pc, #12]	; (80011e0 <SSD1306_Fill+0x2c>)
 80011d2:	f005 fe33 	bl	8006e3c <memset>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	2000010c 	.word	0x2000010c

080011e4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	80fb      	strh	r3, [r7, #6]
 80011ee:	460b      	mov	r3, r1
 80011f0:	80bb      	strh	r3, [r7, #4]
 80011f2:	4613      	mov	r3, r2
 80011f4:	70fb      	strb	r3, [r7, #3]
	if (
 80011f6:	88fb      	ldrh	r3, [r7, #6]
 80011f8:	2b7f      	cmp	r3, #127	; 0x7f
 80011fa:	d848      	bhi.n	800128e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80011fc:	88bb      	ldrh	r3, [r7, #4]
 80011fe:	2b3f      	cmp	r3, #63	; 0x3f
 8001200:	d845      	bhi.n	800128e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001202:	4b26      	ldr	r3, [pc, #152]	; (800129c <SSD1306_DrawPixel+0xb8>)
 8001204:	791b      	ldrb	r3, [r3, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d006      	beq.n	8001218 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800120a:	78fb      	ldrb	r3, [r7, #3]
 800120c:	2b00      	cmp	r3, #0
 800120e:	bf0c      	ite	eq
 8001210:	2301      	moveq	r3, #1
 8001212:	2300      	movne	r3, #0
 8001214:	b2db      	uxtb	r3, r3
 8001216:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d11a      	bne.n	8001254 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800121e:	88fa      	ldrh	r2, [r7, #6]
 8001220:	88bb      	ldrh	r3, [r7, #4]
 8001222:	08db      	lsrs	r3, r3, #3
 8001224:	b298      	uxth	r0, r3
 8001226:	4603      	mov	r3, r0
 8001228:	01db      	lsls	r3, r3, #7
 800122a:	4413      	add	r3, r2
 800122c:	4a1c      	ldr	r2, [pc, #112]	; (80012a0 <SSD1306_DrawPixel+0xbc>)
 800122e:	5cd3      	ldrb	r3, [r2, r3]
 8001230:	b25a      	sxtb	r2, r3
 8001232:	88bb      	ldrh	r3, [r7, #4]
 8001234:	f003 0307 	and.w	r3, r3, #7
 8001238:	2101      	movs	r1, #1
 800123a:	fa01 f303 	lsl.w	r3, r1, r3
 800123e:	b25b      	sxtb	r3, r3
 8001240:	4313      	orrs	r3, r2
 8001242:	b259      	sxtb	r1, r3
 8001244:	88fa      	ldrh	r2, [r7, #6]
 8001246:	4603      	mov	r3, r0
 8001248:	01db      	lsls	r3, r3, #7
 800124a:	4413      	add	r3, r2
 800124c:	b2c9      	uxtb	r1, r1
 800124e:	4a14      	ldr	r2, [pc, #80]	; (80012a0 <SSD1306_DrawPixel+0xbc>)
 8001250:	54d1      	strb	r1, [r2, r3]
 8001252:	e01d      	b.n	8001290 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001254:	88fa      	ldrh	r2, [r7, #6]
 8001256:	88bb      	ldrh	r3, [r7, #4]
 8001258:	08db      	lsrs	r3, r3, #3
 800125a:	b298      	uxth	r0, r3
 800125c:	4603      	mov	r3, r0
 800125e:	01db      	lsls	r3, r3, #7
 8001260:	4413      	add	r3, r2
 8001262:	4a0f      	ldr	r2, [pc, #60]	; (80012a0 <SSD1306_DrawPixel+0xbc>)
 8001264:	5cd3      	ldrb	r3, [r2, r3]
 8001266:	b25a      	sxtb	r2, r3
 8001268:	88bb      	ldrh	r3, [r7, #4]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	2101      	movs	r1, #1
 8001270:	fa01 f303 	lsl.w	r3, r1, r3
 8001274:	b25b      	sxtb	r3, r3
 8001276:	43db      	mvns	r3, r3
 8001278:	b25b      	sxtb	r3, r3
 800127a:	4013      	ands	r3, r2
 800127c:	b259      	sxtb	r1, r3
 800127e:	88fa      	ldrh	r2, [r7, #6]
 8001280:	4603      	mov	r3, r0
 8001282:	01db      	lsls	r3, r3, #7
 8001284:	4413      	add	r3, r2
 8001286:	b2c9      	uxtb	r1, r1
 8001288:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <SSD1306_DrawPixel+0xbc>)
 800128a:	54d1      	strb	r1, [r2, r3]
 800128c:	e000      	b.n	8001290 <SSD1306_DrawPixel+0xac>
		return;
 800128e:	bf00      	nop
	}
}
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	2000050c 	.word	0x2000050c
 80012a0:	2000010c 	.word	0x2000010c

080012a4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	460a      	mov	r2, r1
 80012ae:	80fb      	strh	r3, [r7, #6]
 80012b0:	4613      	mov	r3, r2
 80012b2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80012b4:	4a05      	ldr	r2, [pc, #20]	; (80012cc <SSD1306_GotoXY+0x28>)
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80012ba:	4a04      	ldr	r2, [pc, #16]	; (80012cc <SSD1306_GotoXY+0x28>)
 80012bc:	88bb      	ldrh	r3, [r7, #4]
 80012be:	8053      	strh	r3, [r2, #2]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	2000050c 	.word	0x2000050c

080012d0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	6039      	str	r1, [r7, #0]
 80012da:	71fb      	strb	r3, [r7, #7]
 80012dc:	4613      	mov	r3, r2
 80012de:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80012e0:	4b3a      	ldr	r3, [pc, #232]	; (80013cc <SSD1306_Putc+0xfc>)
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4413      	add	r3, r2
	if (
 80012ec:	2b7f      	cmp	r3, #127	; 0x7f
 80012ee:	dc07      	bgt.n	8001300 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80012f0:	4b36      	ldr	r3, [pc, #216]	; (80013cc <SSD1306_Putc+0xfc>)
 80012f2:	885b      	ldrh	r3, [r3, #2]
 80012f4:	461a      	mov	r2, r3
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	785b      	ldrb	r3, [r3, #1]
 80012fa:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80012fc:	2b3f      	cmp	r3, #63	; 0x3f
 80012fe:	dd01      	ble.n	8001304 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001300:	2300      	movs	r3, #0
 8001302:	e05e      	b.n	80013c2 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	e04b      	b.n	80013a2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	3b20      	subs	r3, #32
 8001312:	6839      	ldr	r1, [r7, #0]
 8001314:	7849      	ldrb	r1, [r1, #1]
 8001316:	fb01 f303 	mul.w	r3, r1, r3
 800131a:	4619      	mov	r1, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	440b      	add	r3, r1
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	4413      	add	r3, r2
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001328:	2300      	movs	r3, #0
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	e030      	b.n	8001390 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d010      	beq.n	8001360 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800133e:	4b23      	ldr	r3, [pc, #140]	; (80013cc <SSD1306_Putc+0xfc>)
 8001340:	881a      	ldrh	r2, [r3, #0]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	b29b      	uxth	r3, r3
 8001346:	4413      	add	r3, r2
 8001348:	b298      	uxth	r0, r3
 800134a:	4b20      	ldr	r3, [pc, #128]	; (80013cc <SSD1306_Putc+0xfc>)
 800134c:	885a      	ldrh	r2, [r3, #2]
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	b29b      	uxth	r3, r3
 8001352:	4413      	add	r3, r2
 8001354:	b29b      	uxth	r3, r3
 8001356:	79ba      	ldrb	r2, [r7, #6]
 8001358:	4619      	mov	r1, r3
 800135a:	f7ff ff43 	bl	80011e4 <SSD1306_DrawPixel>
 800135e:	e014      	b.n	800138a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001360:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <SSD1306_Putc+0xfc>)
 8001362:	881a      	ldrh	r2, [r3, #0]
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	b29b      	uxth	r3, r3
 8001368:	4413      	add	r3, r2
 800136a:	b298      	uxth	r0, r3
 800136c:	4b17      	ldr	r3, [pc, #92]	; (80013cc <SSD1306_Putc+0xfc>)
 800136e:	885a      	ldrh	r2, [r3, #2]
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	b29b      	uxth	r3, r3
 8001374:	4413      	add	r3, r2
 8001376:	b299      	uxth	r1, r3
 8001378:	79bb      	ldrb	r3, [r7, #6]
 800137a:	2b00      	cmp	r3, #0
 800137c:	bf0c      	ite	eq
 800137e:	2301      	moveq	r3, #1
 8001380:	2300      	movne	r3, #0
 8001382:	b2db      	uxtb	r3, r3
 8001384:	461a      	mov	r2, r3
 8001386:	f7ff ff2d 	bl	80011e4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	3301      	adds	r3, #1
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	4293      	cmp	r3, r2
 800139a:	d3c8      	bcc.n	800132e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	3301      	adds	r3, #1
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	785b      	ldrb	r3, [r3, #1]
 80013a6:	461a      	mov	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d3ad      	bcc.n	800130a <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80013ae:	4b07      	ldr	r3, [pc, #28]	; (80013cc <SSD1306_Putc+0xfc>)
 80013b0:	881a      	ldrh	r2, [r3, #0]
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	4413      	add	r3, r2
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	4b03      	ldr	r3, [pc, #12]	; (80013cc <SSD1306_Putc+0xfc>)
 80013be:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80013c0:	79fb      	ldrb	r3, [r7, #7]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	2000050c 	.word	0x2000050c

080013d0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	4613      	mov	r3, r2
 80013dc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80013de:	e012      	b.n	8001406 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	79fa      	ldrb	r2, [r7, #7]
 80013e6:	68b9      	ldr	r1, [r7, #8]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff71 	bl	80012d0 <SSD1306_Putc>
 80013ee:	4603      	mov	r3, r0
 80013f0:	461a      	mov	r2, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d002      	beq.n	8001400 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	e008      	b.n	8001412 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	3301      	adds	r3, #1
 8001404:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1e8      	bne.n	80013e0 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	781b      	ldrb	r3, [r3, #0]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800141e:	2000      	movs	r0, #0
 8001420:	f7ff fec8 	bl	80011b4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001424:	f7ff fe98 	bl	8001158 <SSD1306_UpdateScreen>
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}

0800142c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <ssd1306_I2C_Init+0x28>)
 8001434:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001436:	e002      	b.n	800143e <ssd1306_I2C_Init+0x12>
		p--;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3b01      	subs	r3, #1
 800143c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1f9      	bne.n	8001438 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001444:	bf00      	nop
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	0003d090 	.word	0x0003d090

08001458 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b0c7      	sub	sp, #284	; 0x11c
 800145c:	af02      	add	r7, sp, #8
 800145e:	4604      	mov	r4, r0
 8001460:	4608      	mov	r0, r1
 8001462:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001466:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800146a:	600a      	str	r2, [r1, #0]
 800146c:	4619      	mov	r1, r3
 800146e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001472:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001476:	4622      	mov	r2, r4
 8001478:	701a      	strb	r2, [r3, #0]
 800147a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800147e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001482:	4602      	mov	r2, r0
 8001484:	701a      	strb	r2, [r3, #0]
 8001486:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800148a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800148e:	460a      	mov	r2, r1
 8001490:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001492:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001496:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800149a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800149e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80014a2:	7812      	ldrb	r2, [r2, #0]
 80014a4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80014a6:	2300      	movs	r3, #0
 80014a8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80014ac:	e015      	b.n	80014da <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80014ae:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80014b2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80014b6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80014ba:	6812      	ldr	r2, [r2, #0]
 80014bc:	441a      	add	r2, r3
 80014be:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80014c2:	3301      	adds	r3, #1
 80014c4:	7811      	ldrb	r1, [r2, #0]
 80014c6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80014ca:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80014ce:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80014d0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80014d4:	3301      	adds	r3, #1
 80014d6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80014da:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80014de:	b29b      	uxth	r3, r3
 80014e0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80014e4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80014e8:	8812      	ldrh	r2, [r2, #0]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d8df      	bhi.n	80014ae <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80014ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014f2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	b299      	uxth	r1, r3
 80014fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	3301      	adds	r3, #1
 8001506:	b29b      	uxth	r3, r3
 8001508:	f107 020c 	add.w	r2, r7, #12
 800150c:	200a      	movs	r0, #10
 800150e:	9000      	str	r0, [sp, #0]
 8001510:	4803      	ldr	r0, [pc, #12]	; (8001520 <ssd1306_I2C_WriteMulti+0xc8>)
 8001512:	f000 fe25 	bl	8002160 <HAL_I2C_Master_Transmit>
}
 8001516:	bf00      	nop
 8001518:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800151c:	46bd      	mov	sp, r7
 800151e:	bd90      	pop	{r4, r7, pc}
 8001520:	20000048 	.word	0x20000048

08001524 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af02      	add	r7, sp, #8
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
 800152e:	460b      	mov	r3, r1
 8001530:	71bb      	strb	r3, [r7, #6]
 8001532:	4613      	mov	r3, r2
 8001534:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001536:	79bb      	ldrb	r3, [r7, #6]
 8001538:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800153a:	797b      	ldrb	r3, [r7, #5]
 800153c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	b299      	uxth	r1, r3
 8001542:	f107 020c 	add.w	r2, r7, #12
 8001546:	230a      	movs	r3, #10
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	2302      	movs	r3, #2
 800154c:	4803      	ldr	r0, [pc, #12]	; (800155c <ssd1306_I2C_Write+0x38>)
 800154e:	f000 fe07 	bl	8002160 <HAL_I2C_Master_Transmit>
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000048 	.word	0x20000048

08001560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_MspInit+0x54>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	4a11      	ldr	r2, [pc, #68]	; (80015b4 <HAL_MspInit+0x54>)
 8001570:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001574:	6453      	str	r3, [r2, #68]	; 0x44
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <HAL_MspInit+0x54>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	603b      	str	r3, [r7, #0]
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <HAL_MspInit+0x54>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <HAL_MspInit+0x54>)
 800158c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001590:	6413      	str	r3, [r2, #64]	; 0x40
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <HAL_MspInit+0x54>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	210f      	movs	r1, #15
 80015a2:	f06f 0001 	mvn.w	r0, #1
 80015a6:	f000 fa8d 	bl	8001ac4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40023800 	.word	0x40023800

080015b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	; 0x28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a19      	ldr	r2, [pc, #100]	; (800163c <HAL_I2C_MspInit+0x84>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d12c      	bne.n	8001634 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	4b18      	ldr	r3, [pc, #96]	; (8001640 <HAL_I2C_MspInit+0x88>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a17      	ldr	r2, [pc, #92]	; (8001640 <HAL_I2C_MspInit+0x88>)
 80015e4:	f043 0302 	orr.w	r3, r3, #2
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <HAL_I2C_MspInit+0x88>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80015f6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80015fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015fc:	2312      	movs	r3, #18
 80015fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001604:	2303      	movs	r3, #3
 8001606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001608:	2304      	movs	r3, #4
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	480c      	ldr	r0, [pc, #48]	; (8001644 <HAL_I2C_MspInit+0x8c>)
 8001614:	f000 fa80 	bl	8001b18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	4b08      	ldr	r3, [pc, #32]	; (8001640 <HAL_I2C_MspInit+0x88>)
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	4a07      	ldr	r2, [pc, #28]	; (8001640 <HAL_I2C_MspInit+0x88>)
 8001622:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001626:	6413      	str	r3, [r2, #64]	; 0x40
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <HAL_I2C_MspInit+0x88>)
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001634:	bf00      	nop
 8001636:	3728      	adds	r7, #40	; 0x28
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40005400 	.word	0x40005400
 8001640:	40023800 	.word	0x40023800
 8001644:	40020400 	.word	0x40020400

08001648 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	; 0x28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a19      	ldr	r2, [pc, #100]	; (80016cc <HAL_UART_MspInit+0x84>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d12b      	bne.n	80016c2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <HAL_UART_MspInit+0x88>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	4a17      	ldr	r2, [pc, #92]	; (80016d0 <HAL_UART_MspInit+0x88>)
 8001674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001678:	6413      	str	r3, [r2, #64]	; 0x40
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <HAL_UART_MspInit+0x88>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <HAL_UART_MspInit+0x88>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a10      	ldr	r2, [pc, #64]	; (80016d0 <HAL_UART_MspInit+0x88>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <HAL_UART_MspInit+0x88>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016a2:	230c      	movs	r3, #12
 80016a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ae:	2303      	movs	r3, #3
 80016b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016b2:	2307      	movs	r3, #7
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	4805      	ldr	r0, [pc, #20]	; (80016d4 <HAL_UART_MspInit+0x8c>)
 80016be:	f000 fa2b 	bl	8001b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016c2:	bf00      	nop
 80016c4:	3728      	adds	r7, #40	; 0x28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40004400 	.word	0x40004400
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40020000 	.word	0x40020000

080016d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08e      	sub	sp, #56	; 0x38
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016e8:	2300      	movs	r3, #0
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	4b33      	ldr	r3, [pc, #204]	; (80017bc <HAL_InitTick+0xe4>)
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	4a32      	ldr	r2, [pc, #200]	; (80017bc <HAL_InitTick+0xe4>)
 80016f2:	f043 0310 	orr.w	r3, r3, #16
 80016f6:	6413      	str	r3, [r2, #64]	; 0x40
 80016f8:	4b30      	ldr	r3, [pc, #192]	; (80017bc <HAL_InitTick+0xe4>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	f003 0310 	and.w	r3, r3, #16
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001704:	f107 0210 	add.w	r2, r7, #16
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	4611      	mov	r1, r2
 800170e:	4618      	mov	r0, r3
 8001710:	f001 fac8 	bl	8002ca4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001714:	6a3b      	ldr	r3, [r7, #32]
 8001716:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171a:	2b00      	cmp	r3, #0
 800171c:	d103      	bne.n	8001726 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800171e:	f001 fa99 	bl	8002c54 <HAL_RCC_GetPCLK1Freq>
 8001722:	6378      	str	r0, [r7, #52]	; 0x34
 8001724:	e004      	b.n	8001730 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001726:	f001 fa95 	bl	8002c54 <HAL_RCC_GetPCLK1Freq>
 800172a:	4603      	mov	r3, r0
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001732:	4a23      	ldr	r2, [pc, #140]	; (80017c0 <HAL_InitTick+0xe8>)
 8001734:	fba2 2303 	umull	r2, r3, r2, r3
 8001738:	0c9b      	lsrs	r3, r3, #18
 800173a:	3b01      	subs	r3, #1
 800173c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800173e:	4b21      	ldr	r3, [pc, #132]	; (80017c4 <HAL_InitTick+0xec>)
 8001740:	4a21      	ldr	r2, [pc, #132]	; (80017c8 <HAL_InitTick+0xf0>)
 8001742:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001744:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <HAL_InitTick+0xec>)
 8001746:	f240 32e7 	movw	r2, #999	; 0x3e7
 800174a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800174c:	4a1d      	ldr	r2, [pc, #116]	; (80017c4 <HAL_InitTick+0xec>)
 800174e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001750:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001752:	4b1c      	ldr	r3, [pc, #112]	; (80017c4 <HAL_InitTick+0xec>)
 8001754:	2200      	movs	r2, #0
 8001756:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001758:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <HAL_InitTick+0xec>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800175e:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <HAL_InitTick+0xec>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001764:	4817      	ldr	r0, [pc, #92]	; (80017c4 <HAL_InitTick+0xec>)
 8001766:	f001 ff9d 	bl	80036a4 <HAL_TIM_Base_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001770:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001774:	2b00      	cmp	r3, #0
 8001776:	d11b      	bne.n	80017b0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001778:	4812      	ldr	r0, [pc, #72]	; (80017c4 <HAL_InitTick+0xec>)
 800177a:	f001 ffed 	bl	8003758 <HAL_TIM_Base_Start_IT>
 800177e:	4603      	mov	r3, r0
 8001780:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001784:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001788:	2b00      	cmp	r3, #0
 800178a:	d111      	bne.n	80017b0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800178c:	2036      	movs	r0, #54	; 0x36
 800178e:	f000 f9b5 	bl	8001afc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b0f      	cmp	r3, #15
 8001796:	d808      	bhi.n	80017aa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001798:	2200      	movs	r2, #0
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	2036      	movs	r0, #54	; 0x36
 800179e:	f000 f991 	bl	8001ac4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017a2:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <HAL_InitTick+0xf4>)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	e002      	b.n	80017b0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80017b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3738      	adds	r7, #56	; 0x38
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40023800 	.word	0x40023800
 80017c0:	431bde83 	.word	0x431bde83
 80017c4:	20000514 	.word	0x20000514
 80017c8:	40001000 	.word	0x40001000
 80017cc:	2000001c 	.word	0x2000001c

080017d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017d4:	e7fe      	b.n	80017d4 <NMI_Handler+0x4>

080017d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017da:	e7fe      	b.n	80017da <HardFault_Handler+0x4>

080017dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <MemManage_Handler+0x4>

080017e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <BusFault_Handler+0x4>

080017e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <UsageFault_Handler+0x4>

080017ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <TIM6_DAC_IRQHandler+0x10>)
 8001802:	f002 f819 	bl	8003838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000514 	.word	0x20000514

08001810 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <SystemInit+0x20>)
 8001816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800181a:	4a05      	ldr	r2, [pc, #20]	; (8001830 <SystemInit+0x20>)
 800181c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001834:	f8df d034 	ldr.w	sp, [pc, #52]	; 800186c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001838:	f7ff ffea 	bl	8001810 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800183c:	480c      	ldr	r0, [pc, #48]	; (8001870 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800183e:	490d      	ldr	r1, [pc, #52]	; (8001874 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001840:	4a0d      	ldr	r2, [pc, #52]	; (8001878 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001844:	e002      	b.n	800184c <LoopCopyDataInit>

08001846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800184a:	3304      	adds	r3, #4

0800184c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800184c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800184e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001850:	d3f9      	bcc.n	8001846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001852:	4a0a      	ldr	r2, [pc, #40]	; (800187c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001854:	4c0a      	ldr	r4, [pc, #40]	; (8001880 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001858:	e001      	b.n	800185e <LoopFillZerobss>

0800185a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800185a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800185c:	3204      	adds	r2, #4

0800185e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800185e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001860:	d3fb      	bcc.n	800185a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001862:	f005 faf3 	bl	8006e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001866:	f7ff f833 	bl	80008d0 <main>
  bx  lr    
 800186a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800186c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001874:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001878:	08007da0 	.word	0x08007da0
  ldr r2, =_sbss
 800187c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001880:	20004eb0 	.word	0x20004eb0

08001884 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001884:	e7fe      	b.n	8001884 <ADC_IRQHandler>
	...

08001888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800188c:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <HAL_Init+0x40>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a0d      	ldr	r2, [pc, #52]	; (80018c8 <HAL_Init+0x40>)
 8001892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001896:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <HAL_Init+0x40>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <HAL_Init+0x40>)
 800189e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <HAL_Init+0x40>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a07      	ldr	r2, [pc, #28]	; (80018c8 <HAL_Init+0x40>)
 80018aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b0:	2003      	movs	r0, #3
 80018b2:	f000 f8fc 	bl	8001aae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018b6:	2000      	movs	r0, #0
 80018b8:	f7ff ff0e 	bl	80016d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018bc:	f7ff fe50 	bl	8001560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40023c00 	.word	0x40023c00

080018cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <HAL_IncTick+0x20>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	461a      	mov	r2, r3
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_IncTick+0x24>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4413      	add	r3, r2
 80018dc:	4a04      	ldr	r2, [pc, #16]	; (80018f0 <HAL_IncTick+0x24>)
 80018de:	6013      	str	r3, [r2, #0]
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	20000020 	.word	0x20000020
 80018f0:	2000055c 	.word	0x2000055c

080018f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return uwTick;
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <HAL_GetTick+0x14>)
 80018fa:	681b      	ldr	r3, [r3, #0]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	2000055c 	.word	0x2000055c

0800190c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001914:	f7ff ffee 	bl	80018f4 <HAL_GetTick>
 8001918:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001924:	d005      	beq.n	8001932 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001926:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <HAL_Delay+0x44>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	461a      	mov	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4413      	add	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001932:	bf00      	nop
 8001934:	f7ff ffde 	bl	80018f4 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	429a      	cmp	r2, r3
 8001942:	d8f7      	bhi.n	8001934 <HAL_Delay+0x28>
  {
  }
}
 8001944:	bf00      	nop
 8001946:	bf00      	nop
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000020 	.word	0x20000020

08001954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <__NVIC_SetPriorityGrouping+0x44>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001970:	4013      	ands	r3, r2
 8001972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800197c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001986:	4a04      	ldr	r2, [pc, #16]	; (8001998 <__NVIC_SetPriorityGrouping+0x44>)
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	60d3      	str	r3, [r2, #12]
}
 800198c:	bf00      	nop
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a0:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <__NVIC_GetPriorityGrouping+0x18>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	0a1b      	lsrs	r3, r3, #8
 80019a6:	f003 0307 	and.w	r3, r3, #7
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	db0b      	blt.n	80019e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	f003 021f 	and.w	r2, r3, #31
 80019d0:	4907      	ldr	r1, [pc, #28]	; (80019f0 <__NVIC_EnableIRQ+0x38>)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	095b      	lsrs	r3, r3, #5
 80019d8:	2001      	movs	r0, #1
 80019da:	fa00 f202 	lsl.w	r2, r0, r2
 80019de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000e100 	.word	0xe000e100

080019f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	6039      	str	r1, [r7, #0]
 80019fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	db0a      	blt.n	8001a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	490c      	ldr	r1, [pc, #48]	; (8001a40 <__NVIC_SetPriority+0x4c>)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	0112      	lsls	r2, r2, #4
 8001a14:	b2d2      	uxtb	r2, r2
 8001a16:	440b      	add	r3, r1
 8001a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a1c:	e00a      	b.n	8001a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	4908      	ldr	r1, [pc, #32]	; (8001a44 <__NVIC_SetPriority+0x50>)
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	3b04      	subs	r3, #4
 8001a2c:	0112      	lsls	r2, r2, #4
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	440b      	add	r3, r1
 8001a32:	761a      	strb	r2, [r3, #24]
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000e100 	.word	0xe000e100
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b089      	sub	sp, #36	; 0x24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f1c3 0307 	rsb	r3, r3, #7
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	bf28      	it	cs
 8001a66:	2304      	movcs	r3, #4
 8001a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	2b06      	cmp	r3, #6
 8001a70:	d902      	bls.n	8001a78 <NVIC_EncodePriority+0x30>
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3b03      	subs	r3, #3
 8001a76:	e000      	b.n	8001a7a <NVIC_EncodePriority+0x32>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43da      	mvns	r2, r3
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a90:	f04f 31ff 	mov.w	r1, #4294967295
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9a:	43d9      	mvns	r1, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa0:	4313      	orrs	r3, r2
         );
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3724      	adds	r7, #36	; 0x24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff ff4c 	bl	8001954 <__NVIC_SetPriorityGrouping>
}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
 8001ad0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ad6:	f7ff ff61 	bl	800199c <__NVIC_GetPriorityGrouping>
 8001ada:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	68b9      	ldr	r1, [r7, #8]
 8001ae0:	6978      	ldr	r0, [r7, #20]
 8001ae2:	f7ff ffb1 	bl	8001a48 <NVIC_EncodePriority>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aec:	4611      	mov	r1, r2
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff ff80 	bl	80019f4 <__NVIC_SetPriority>
}
 8001af4:	bf00      	nop
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff ff54 	bl	80019b8 <__NVIC_EnableIRQ>
}
 8001b10:	bf00      	nop
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b089      	sub	sp, #36	; 0x24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
 8001b32:	e165      	b.n	8001e00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b34:	2201      	movs	r2, #1
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	4013      	ands	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	f040 8154 	bne.w	8001dfa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d005      	beq.n	8001b6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d130      	bne.n	8001bcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	2203      	movs	r2, #3
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	091b      	lsrs	r3, r3, #4
 8001bb6:	f003 0201 	and.w	r2, r3, #1
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	d017      	beq.n	8001c08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	2203      	movs	r2, #3
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d123      	bne.n	8001c5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	08da      	lsrs	r2, r3, #3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3208      	adds	r2, #8
 8001c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	220f      	movs	r2, #15
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	08da      	lsrs	r2, r3, #3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3208      	adds	r2, #8
 8001c56:	69b9      	ldr	r1, [r7, #24]
 8001c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	2203      	movs	r2, #3
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 0203 	and.w	r2, r3, #3
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 80ae 	beq.w	8001dfa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	4b5d      	ldr	r3, [pc, #372]	; (8001e18 <HAL_GPIO_Init+0x300>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	4a5c      	ldr	r2, [pc, #368]	; (8001e18 <HAL_GPIO_Init+0x300>)
 8001ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cac:	6453      	str	r3, [r2, #68]	; 0x44
 8001cae:	4b5a      	ldr	r3, [pc, #360]	; (8001e18 <HAL_GPIO_Init+0x300>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cba:	4a58      	ldr	r2, [pc, #352]	; (8001e1c <HAL_GPIO_Init+0x304>)
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	089b      	lsrs	r3, r3, #2
 8001cc0:	3302      	adds	r3, #2
 8001cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	220f      	movs	r2, #15
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a4f      	ldr	r2, [pc, #316]	; (8001e20 <HAL_GPIO_Init+0x308>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d025      	beq.n	8001d32 <HAL_GPIO_Init+0x21a>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a4e      	ldr	r2, [pc, #312]	; (8001e24 <HAL_GPIO_Init+0x30c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d01f      	beq.n	8001d2e <HAL_GPIO_Init+0x216>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a4d      	ldr	r2, [pc, #308]	; (8001e28 <HAL_GPIO_Init+0x310>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d019      	beq.n	8001d2a <HAL_GPIO_Init+0x212>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a4c      	ldr	r2, [pc, #304]	; (8001e2c <HAL_GPIO_Init+0x314>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d013      	beq.n	8001d26 <HAL_GPIO_Init+0x20e>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a4b      	ldr	r2, [pc, #300]	; (8001e30 <HAL_GPIO_Init+0x318>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d00d      	beq.n	8001d22 <HAL_GPIO_Init+0x20a>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a4a      	ldr	r2, [pc, #296]	; (8001e34 <HAL_GPIO_Init+0x31c>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d007      	beq.n	8001d1e <HAL_GPIO_Init+0x206>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a49      	ldr	r2, [pc, #292]	; (8001e38 <HAL_GPIO_Init+0x320>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d101      	bne.n	8001d1a <HAL_GPIO_Init+0x202>
 8001d16:	2306      	movs	r3, #6
 8001d18:	e00c      	b.n	8001d34 <HAL_GPIO_Init+0x21c>
 8001d1a:	2307      	movs	r3, #7
 8001d1c:	e00a      	b.n	8001d34 <HAL_GPIO_Init+0x21c>
 8001d1e:	2305      	movs	r3, #5
 8001d20:	e008      	b.n	8001d34 <HAL_GPIO_Init+0x21c>
 8001d22:	2304      	movs	r3, #4
 8001d24:	e006      	b.n	8001d34 <HAL_GPIO_Init+0x21c>
 8001d26:	2303      	movs	r3, #3
 8001d28:	e004      	b.n	8001d34 <HAL_GPIO_Init+0x21c>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e002      	b.n	8001d34 <HAL_GPIO_Init+0x21c>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <HAL_GPIO_Init+0x21c>
 8001d32:	2300      	movs	r3, #0
 8001d34:	69fa      	ldr	r2, [r7, #28]
 8001d36:	f002 0203 	and.w	r2, r2, #3
 8001d3a:	0092      	lsls	r2, r2, #2
 8001d3c:	4093      	lsls	r3, r2
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d44:	4935      	ldr	r1, [pc, #212]	; (8001e1c <HAL_GPIO_Init+0x304>)
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	089b      	lsrs	r3, r3, #2
 8001d4a:	3302      	adds	r3, #2
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d52:	4b3a      	ldr	r3, [pc, #232]	; (8001e3c <HAL_GPIO_Init+0x324>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d76:	4a31      	ldr	r2, [pc, #196]	; (8001e3c <HAL_GPIO_Init+0x324>)
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d7c:	4b2f      	ldr	r3, [pc, #188]	; (8001e3c <HAL_GPIO_Init+0x324>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001da0:	4a26      	ldr	r2, [pc, #152]	; (8001e3c <HAL_GPIO_Init+0x324>)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001da6:	4b25      	ldr	r3, [pc, #148]	; (8001e3c <HAL_GPIO_Init+0x324>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dca:	4a1c      	ldr	r2, [pc, #112]	; (8001e3c <HAL_GPIO_Init+0x324>)
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dd0:	4b1a      	ldr	r3, [pc, #104]	; (8001e3c <HAL_GPIO_Init+0x324>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001df4:	4a11      	ldr	r2, [pc, #68]	; (8001e3c <HAL_GPIO_Init+0x324>)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	61fb      	str	r3, [r7, #28]
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	2b0f      	cmp	r3, #15
 8001e04:	f67f ae96 	bls.w	8001b34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e08:	bf00      	nop
 8001e0a:	bf00      	nop
 8001e0c:	3724      	adds	r7, #36	; 0x24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40013800 	.word	0x40013800
 8001e20:	40020000 	.word	0x40020000
 8001e24:	40020400 	.word	0x40020400
 8001e28:	40020800 	.word	0x40020800
 8001e2c:	40020c00 	.word	0x40020c00
 8001e30:	40021000 	.word	0x40021000
 8001e34:	40021400 	.word	0x40021400
 8001e38:	40021800 	.word	0x40021800
 8001e3c:	40013c00 	.word	0x40013c00

08001e40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691a      	ldr	r2, [r3, #16]
 8001e50:	887b      	ldrh	r3, [r7, #2]
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d002      	beq.n	8001e5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	73fb      	strb	r3, [r7, #15]
 8001e5c:	e001      	b.n	8001e62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	807b      	strh	r3, [r7, #2]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e80:	787b      	ldrb	r3, [r7, #1]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e86:	887a      	ldrh	r2, [r7, #2]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e8c:	e003      	b.n	8001e96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e8e:	887b      	ldrh	r3, [r7, #2]
 8001e90:	041a      	lsls	r2, r3, #16
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	619a      	str	r2, [r3, #24]
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b085      	sub	sp, #20
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001eb4:	887a      	ldrh	r2, [r7, #2]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	041a      	lsls	r2, r3, #16
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	43d9      	mvns	r1, r3
 8001ec0:	887b      	ldrh	r3, [r7, #2]
 8001ec2:	400b      	ands	r3, r1
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	619a      	str	r2, [r3, #24]
}
 8001eca:	bf00      	nop
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e12b      	b.n	8002142 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d106      	bne.n	8001f04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff fb5a 	bl	80015b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2224      	movs	r2, #36	; 0x24
 8001f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 0201 	bic.w	r2, r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f3c:	f000 fe8a 	bl	8002c54 <HAL_RCC_GetPCLK1Freq>
 8001f40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	4a81      	ldr	r2, [pc, #516]	; (800214c <HAL_I2C_Init+0x274>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d807      	bhi.n	8001f5c <HAL_I2C_Init+0x84>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4a80      	ldr	r2, [pc, #512]	; (8002150 <HAL_I2C_Init+0x278>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	bf94      	ite	ls
 8001f54:	2301      	movls	r3, #1
 8001f56:	2300      	movhi	r3, #0
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	e006      	b.n	8001f6a <HAL_I2C_Init+0x92>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4a7d      	ldr	r2, [pc, #500]	; (8002154 <HAL_I2C_Init+0x27c>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	bf94      	ite	ls
 8001f64:	2301      	movls	r3, #1
 8001f66:	2300      	movhi	r3, #0
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e0e7      	b.n	8002142 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4a78      	ldr	r2, [pc, #480]	; (8002158 <HAL_I2C_Init+0x280>)
 8001f76:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7a:	0c9b      	lsrs	r3, r3, #18
 8001f7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	4a6a      	ldr	r2, [pc, #424]	; (800214c <HAL_I2C_Init+0x274>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d802      	bhi.n	8001fac <HAL_I2C_Init+0xd4>
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	e009      	b.n	8001fc0 <HAL_I2C_Init+0xe8>
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001fb2:	fb02 f303 	mul.w	r3, r2, r3
 8001fb6:	4a69      	ldr	r2, [pc, #420]	; (800215c <HAL_I2C_Init+0x284>)
 8001fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbc:	099b      	lsrs	r3, r3, #6
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6812      	ldr	r2, [r2, #0]
 8001fc4:	430b      	orrs	r3, r1
 8001fc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001fd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	495c      	ldr	r1, [pc, #368]	; (800214c <HAL_I2C_Init+0x274>)
 8001fdc:	428b      	cmp	r3, r1
 8001fde:	d819      	bhi.n	8002014 <HAL_I2C_Init+0x13c>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	1e59      	subs	r1, r3, #1
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fee:	1c59      	adds	r1, r3, #1
 8001ff0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ff4:	400b      	ands	r3, r1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00a      	beq.n	8002010 <HAL_I2C_Init+0x138>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1e59      	subs	r1, r3, #1
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	fbb1 f3f3 	udiv	r3, r1, r3
 8002008:	3301      	adds	r3, #1
 800200a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800200e:	e051      	b.n	80020b4 <HAL_I2C_Init+0x1dc>
 8002010:	2304      	movs	r3, #4
 8002012:	e04f      	b.n	80020b4 <HAL_I2C_Init+0x1dc>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d111      	bne.n	8002040 <HAL_I2C_Init+0x168>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	1e58      	subs	r0, r3, #1
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6859      	ldr	r1, [r3, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	440b      	add	r3, r1
 800202a:	fbb0 f3f3 	udiv	r3, r0, r3
 800202e:	3301      	adds	r3, #1
 8002030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002034:	2b00      	cmp	r3, #0
 8002036:	bf0c      	ite	eq
 8002038:	2301      	moveq	r3, #1
 800203a:	2300      	movne	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	e012      	b.n	8002066 <HAL_I2C_Init+0x18e>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	1e58      	subs	r0, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6859      	ldr	r1, [r3, #4]
 8002048:	460b      	mov	r3, r1
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	0099      	lsls	r1, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	fbb0 f3f3 	udiv	r3, r0, r3
 8002056:	3301      	adds	r3, #1
 8002058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800205c:	2b00      	cmp	r3, #0
 800205e:	bf0c      	ite	eq
 8002060:	2301      	moveq	r3, #1
 8002062:	2300      	movne	r3, #0
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_I2C_Init+0x196>
 800206a:	2301      	movs	r3, #1
 800206c:	e022      	b.n	80020b4 <HAL_I2C_Init+0x1dc>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10e      	bne.n	8002094 <HAL_I2C_Init+0x1bc>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	1e58      	subs	r0, r3, #1
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6859      	ldr	r1, [r3, #4]
 800207e:	460b      	mov	r3, r1
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	440b      	add	r3, r1
 8002084:	fbb0 f3f3 	udiv	r3, r0, r3
 8002088:	3301      	adds	r3, #1
 800208a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800208e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002092:	e00f      	b.n	80020b4 <HAL_I2C_Init+0x1dc>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	1e58      	subs	r0, r3, #1
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6859      	ldr	r1, [r3, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	440b      	add	r3, r1
 80020a2:	0099      	lsls	r1, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020aa:	3301      	adds	r3, #1
 80020ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	6809      	ldr	r1, [r1, #0]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69da      	ldr	r2, [r3, #28]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	6911      	ldr	r1, [r2, #16]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	68d2      	ldr	r2, [r2, #12]
 80020ee:	4311      	orrs	r1, r2
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6812      	ldr	r2, [r2, #0]
 80020f4:	430b      	orrs	r3, r1
 80020f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	695a      	ldr	r2, [r3, #20]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	430a      	orrs	r2, r1
 8002112:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 0201 	orr.w	r2, r2, #1
 8002122:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2220      	movs	r2, #32
 800212e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	000186a0 	.word	0x000186a0
 8002150:	001e847f 	.word	0x001e847f
 8002154:	003d08ff 	.word	0x003d08ff
 8002158:	431bde83 	.word	0x431bde83
 800215c:	10624dd3 	.word	0x10624dd3

08002160 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b088      	sub	sp, #32
 8002164:	af02      	add	r7, sp, #8
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	607a      	str	r2, [r7, #4]
 800216a:	461a      	mov	r2, r3
 800216c:	460b      	mov	r3, r1
 800216e:	817b      	strh	r3, [r7, #10]
 8002170:	4613      	mov	r3, r2
 8002172:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002174:	f7ff fbbe 	bl	80018f4 <HAL_GetTick>
 8002178:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b20      	cmp	r3, #32
 8002184:	f040 80e0 	bne.w	8002348 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	2319      	movs	r3, #25
 800218e:	2201      	movs	r2, #1
 8002190:	4970      	ldr	r1, [pc, #448]	; (8002354 <HAL_I2C_Master_Transmit+0x1f4>)
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 fa92 	bl	80026bc <I2C_WaitOnFlagUntilTimeout>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800219e:	2302      	movs	r3, #2
 80021a0:	e0d3      	b.n	800234a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <HAL_I2C_Master_Transmit+0x50>
 80021ac:	2302      	movs	r3, #2
 80021ae:	e0cc      	b.n	800234a <HAL_I2C_Master_Transmit+0x1ea>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d007      	beq.n	80021d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f042 0201 	orr.w	r2, r2, #1
 80021d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2221      	movs	r2, #33	; 0x21
 80021ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2210      	movs	r2, #16
 80021f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	893a      	ldrh	r2, [r7, #8]
 8002206:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220c:	b29a      	uxth	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4a50      	ldr	r2, [pc, #320]	; (8002358 <HAL_I2C_Master_Transmit+0x1f8>)
 8002216:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002218:	8979      	ldrh	r1, [r7, #10]
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	6a3a      	ldr	r2, [r7, #32]
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f000 f9ca 	bl	80025b8 <I2C_MasterRequestWrite>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e08d      	b.n	800234a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002244:	e066      	b.n	8002314 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	6a39      	ldr	r1, [r7, #32]
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f000 fb50 	bl	80028f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00d      	beq.n	8002272 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	2b04      	cmp	r3, #4
 800225c:	d107      	bne.n	800226e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800226c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e06b      	b.n	800234a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002276:	781a      	ldrb	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228c:	b29b      	uxth	r3, r3
 800228e:	3b01      	subs	r3, #1
 8002290:	b29a      	uxth	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229a:	3b01      	subs	r3, #1
 800229c:	b29a      	uxth	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b04      	cmp	r3, #4
 80022ae:	d11b      	bne.n	80022e8 <HAL_I2C_Master_Transmit+0x188>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d017      	beq.n	80022e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022bc:	781a      	ldrb	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	3b01      	subs	r3, #1
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e0:	3b01      	subs	r3, #1
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	6a39      	ldr	r1, [r7, #32]
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f000 fb47 	bl	8002980 <I2C_WaitOnBTFFlagUntilTimeout>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00d      	beq.n	8002314 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d107      	bne.n	8002310 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800230e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e01a      	b.n	800234a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002318:	2b00      	cmp	r3, #0
 800231a:	d194      	bne.n	8002246 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800232a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2220      	movs	r2, #32
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002344:	2300      	movs	r3, #0
 8002346:	e000      	b.n	800234a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002348:	2302      	movs	r3, #2
  }
}
 800234a:	4618      	mov	r0, r3
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	00100002 	.word	0x00100002
 8002358:	ffff0000 	.word	0xffff0000

0800235c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08a      	sub	sp, #40	; 0x28
 8002360:	af02      	add	r7, sp, #8
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	607a      	str	r2, [r7, #4]
 8002366:	603b      	str	r3, [r7, #0]
 8002368:	460b      	mov	r3, r1
 800236a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800236c:	f7ff fac2 	bl	80018f4 <HAL_GetTick>
 8002370:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b20      	cmp	r3, #32
 8002380:	f040 8111 	bne.w	80025a6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	2319      	movs	r3, #25
 800238a:	2201      	movs	r2, #1
 800238c:	4988      	ldr	r1, [pc, #544]	; (80025b0 <HAL_I2C_IsDeviceReady+0x254>)
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 f994 	bl	80026bc <I2C_WaitOnFlagUntilTimeout>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800239a:	2302      	movs	r3, #2
 800239c:	e104      	b.n	80025a8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d101      	bne.n	80023ac <HAL_I2C_IsDeviceReady+0x50>
 80023a8:	2302      	movs	r3, #2
 80023aa:	e0fd      	b.n	80025a8 <HAL_I2C_IsDeviceReady+0x24c>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d007      	beq.n	80023d2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f042 0201 	orr.w	r2, r2, #1
 80023d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2224      	movs	r2, #36	; 0x24
 80023e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4a70      	ldr	r2, [pc, #448]	; (80025b4 <HAL_I2C_IsDeviceReady+0x258>)
 80023f4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002404:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	2200      	movs	r2, #0
 800240e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 f952 	bl	80026bc <I2C_WaitOnFlagUntilTimeout>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00d      	beq.n	800243a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002428:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800242c:	d103      	bne.n	8002436 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002434:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e0b6      	b.n	80025a8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800243a:	897b      	ldrh	r3, [r7, #10]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	461a      	mov	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002448:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800244a:	f7ff fa53 	bl	80018f4 <HAL_GetTick>
 800244e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b02      	cmp	r3, #2
 800245c:	bf0c      	ite	eq
 800245e:	2301      	moveq	r3, #1
 8002460:	2300      	movne	r3, #0
 8002462:	b2db      	uxtb	r3, r3
 8002464:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002474:	bf0c      	ite	eq
 8002476:	2301      	moveq	r3, #1
 8002478:	2300      	movne	r3, #0
 800247a:	b2db      	uxtb	r3, r3
 800247c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800247e:	e025      	b.n	80024cc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002480:	f7ff fa38 	bl	80018f4 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	429a      	cmp	r2, r3
 800248e:	d302      	bcc.n	8002496 <HAL_I2C_IsDeviceReady+0x13a>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d103      	bne.n	800249e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	22a0      	movs	r2, #160	; 0xa0
 800249a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	bf0c      	ite	eq
 80024ac:	2301      	moveq	r3, #1
 80024ae:	2300      	movne	r3, #0
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c2:	bf0c      	ite	eq
 80024c4:	2301      	moveq	r3, #1
 80024c6:	2300      	movne	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2ba0      	cmp	r3, #160	; 0xa0
 80024d6:	d005      	beq.n	80024e4 <HAL_I2C_IsDeviceReady+0x188>
 80024d8:	7dfb      	ldrb	r3, [r7, #23]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d102      	bne.n	80024e4 <HAL_I2C_IsDeviceReady+0x188>
 80024de:	7dbb      	ldrb	r3, [r7, #22]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0cd      	beq.n	8002480 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d129      	bne.n	800254e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002508:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800250a:	2300      	movs	r3, #0
 800250c:	613b      	str	r3, [r7, #16]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	2319      	movs	r3, #25
 8002526:	2201      	movs	r2, #1
 8002528:	4921      	ldr	r1, [pc, #132]	; (80025b0 <HAL_I2C_IsDeviceReady+0x254>)
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 f8c6 	bl	80026bc <I2C_WaitOnFlagUntilTimeout>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e036      	b.n	80025a8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2220      	movs	r2, #32
 800253e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	e02c      	b.n	80025a8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800255c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002566:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	2319      	movs	r3, #25
 800256e:	2201      	movs	r2, #1
 8002570:	490f      	ldr	r1, [pc, #60]	; (80025b0 <HAL_I2C_IsDeviceReady+0x254>)
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 f8a2 	bl	80026bc <I2C_WaitOnFlagUntilTimeout>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e012      	b.n	80025a8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	3301      	adds	r3, #1
 8002586:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	429a      	cmp	r2, r3
 800258e:	f4ff af32 	bcc.w	80023f6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2220      	movs	r2, #32
 8002596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80025a6:	2302      	movs	r3, #2
  }
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3720      	adds	r7, #32
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	00100002 	.word	0x00100002
 80025b4:	ffff0000 	.word	0xffff0000

080025b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af02      	add	r7, sp, #8
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	607a      	str	r2, [r7, #4]
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	460b      	mov	r3, r1
 80025c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d006      	beq.n	80025e2 <I2C_MasterRequestWrite+0x2a>
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d003      	beq.n	80025e2 <I2C_MasterRequestWrite+0x2a>
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025e0:	d108      	bne.n	80025f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	e00b      	b.n	800260c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f8:	2b12      	cmp	r3, #18
 80025fa:	d107      	bne.n	800260c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800260a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 f84f 	bl	80026bc <I2C_WaitOnFlagUntilTimeout>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00d      	beq.n	8002640 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002632:	d103      	bne.n	800263c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800263a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e035      	b.n	80026ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002648:	d108      	bne.n	800265c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800264a:	897b      	ldrh	r3, [r7, #10]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	461a      	mov	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002658:	611a      	str	r2, [r3, #16]
 800265a:	e01b      	b.n	8002694 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800265c:	897b      	ldrh	r3, [r7, #10]
 800265e:	11db      	asrs	r3, r3, #7
 8002660:	b2db      	uxtb	r3, r3
 8002662:	f003 0306 	and.w	r3, r3, #6
 8002666:	b2db      	uxtb	r3, r3
 8002668:	f063 030f 	orn	r3, r3, #15
 800266c:	b2da      	uxtb	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	490e      	ldr	r1, [pc, #56]	; (80026b4 <I2C_MasterRequestWrite+0xfc>)
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 f898 	bl	80027b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e010      	b.n	80026ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800268a:	897b      	ldrh	r3, [r7, #10]
 800268c:	b2da      	uxtb	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	4907      	ldr	r1, [pc, #28]	; (80026b8 <I2C_MasterRequestWrite+0x100>)
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f888 	bl	80027b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	00010008 	.word	0x00010008
 80026b8:	00010002 	.word	0x00010002

080026bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	603b      	str	r3, [r7, #0]
 80026c8:	4613      	mov	r3, r2
 80026ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026cc:	e048      	b.n	8002760 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d4:	d044      	beq.n	8002760 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026d6:	f7ff f90d 	bl	80018f4 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d302      	bcc.n	80026ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d139      	bne.n	8002760 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	0c1b      	lsrs	r3, r3, #16
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d10d      	bne.n	8002712 <I2C_WaitOnFlagUntilTimeout+0x56>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	43da      	mvns	r2, r3
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	4013      	ands	r3, r2
 8002702:	b29b      	uxth	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	bf0c      	ite	eq
 8002708:	2301      	moveq	r3, #1
 800270a:	2300      	movne	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	461a      	mov	r2, r3
 8002710:	e00c      	b.n	800272c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	43da      	mvns	r2, r3
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	4013      	ands	r3, r2
 800271e:	b29b      	uxth	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	bf0c      	ite	eq
 8002724:	2301      	moveq	r3, #1
 8002726:	2300      	movne	r3, #0
 8002728:	b2db      	uxtb	r3, r3
 800272a:	461a      	mov	r2, r3
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	429a      	cmp	r2, r3
 8002730:	d116      	bne.n	8002760 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2220      	movs	r2, #32
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	f043 0220 	orr.w	r2, r3, #32
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e023      	b.n	80027a8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	0c1b      	lsrs	r3, r3, #16
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b01      	cmp	r3, #1
 8002768:	d10d      	bne.n	8002786 <I2C_WaitOnFlagUntilTimeout+0xca>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	43da      	mvns	r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	4013      	ands	r3, r2
 8002776:	b29b      	uxth	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	bf0c      	ite	eq
 800277c:	2301      	moveq	r3, #1
 800277e:	2300      	movne	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	461a      	mov	r2, r3
 8002784:	e00c      	b.n	80027a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	43da      	mvns	r2, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	4013      	ands	r3, r2
 8002792:	b29b      	uxth	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	bf0c      	ite	eq
 8002798:	2301      	moveq	r3, #1
 800279a:	2300      	movne	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	461a      	mov	r2, r3
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d093      	beq.n	80026ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
 80027bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027be:	e071      	b.n	80028a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ce:	d123      	bne.n	8002818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2220      	movs	r2, #32
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	f043 0204 	orr.w	r2, r3, #4
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e067      	b.n	80028e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281e:	d041      	beq.n	80028a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002820:	f7ff f868 	bl	80018f4 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	429a      	cmp	r2, r3
 800282e:	d302      	bcc.n	8002836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d136      	bne.n	80028a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	0c1b      	lsrs	r3, r3, #16
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b01      	cmp	r3, #1
 800283e:	d10c      	bne.n	800285a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	43da      	mvns	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	4013      	ands	r3, r2
 800284c:	b29b      	uxth	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	bf14      	ite	ne
 8002852:	2301      	movne	r3, #1
 8002854:	2300      	moveq	r3, #0
 8002856:	b2db      	uxtb	r3, r3
 8002858:	e00b      	b.n	8002872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	43da      	mvns	r2, r3
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	4013      	ands	r3, r2
 8002866:	b29b      	uxth	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	bf14      	ite	ne
 800286c:	2301      	movne	r3, #1
 800286e:	2300      	moveq	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d016      	beq.n	80028a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2220      	movs	r2, #32
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	f043 0220 	orr.w	r2, r3, #32
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e021      	b.n	80028e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	0c1b      	lsrs	r3, r3, #16
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d10c      	bne.n	80028c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	43da      	mvns	r2, r3
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	4013      	ands	r3, r2
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	bf14      	ite	ne
 80028c0:	2301      	movne	r3, #1
 80028c2:	2300      	moveq	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	e00b      	b.n	80028e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	43da      	mvns	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	4013      	ands	r3, r2
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	bf14      	ite	ne
 80028da:	2301      	movne	r3, #1
 80028dc:	2300      	moveq	r3, #0
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f47f af6d 	bne.w	80027c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028fc:	e034      	b.n	8002968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 f886 	bl	8002a10 <I2C_IsAcknowledgeFailed>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e034      	b.n	8002978 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002914:	d028      	beq.n	8002968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002916:	f7fe ffed 	bl	80018f4 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	429a      	cmp	r2, r3
 8002924:	d302      	bcc.n	800292c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d11d      	bne.n	8002968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002936:	2b80      	cmp	r3, #128	; 0x80
 8002938:	d016      	beq.n	8002968 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2220      	movs	r2, #32
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	f043 0220 	orr.w	r2, r3, #32
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e007      	b.n	8002978 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002972:	2b80      	cmp	r3, #128	; 0x80
 8002974:	d1c3      	bne.n	80028fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800298c:	e034      	b.n	80029f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 f83e 	bl	8002a10 <I2C_IsAcknowledgeFailed>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e034      	b.n	8002a08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a4:	d028      	beq.n	80029f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029a6:	f7fe ffa5 	bl	80018f4 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d302      	bcc.n	80029bc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d11d      	bne.n	80029f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	f003 0304 	and.w	r3, r3, #4
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d016      	beq.n	80029f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2220      	movs	r2, #32
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	f043 0220 	orr.w	r2, r3, #32
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e007      	b.n	8002a08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d1c3      	bne.n	800298e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a26:	d11b      	bne.n	8002a60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	f043 0204 	orr.w	r2, r3, #4
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e000      	b.n	8002a62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
	...

08002a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e0cc      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a84:	4b68      	ldr	r3, [pc, #416]	; (8002c28 <HAL_RCC_ClockConfig+0x1b8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 030f 	and.w	r3, r3, #15
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d90c      	bls.n	8002aac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a92:	4b65      	ldr	r3, [pc, #404]	; (8002c28 <HAL_RCC_ClockConfig+0x1b8>)
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9a:	4b63      	ldr	r3, [pc, #396]	; (8002c28 <HAL_RCC_ClockConfig+0x1b8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d001      	beq.n	8002aac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e0b8      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d020      	beq.n	8002afa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ac4:	4b59      	ldr	r3, [pc, #356]	; (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	4a58      	ldr	r2, [pc, #352]	; (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ace:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d005      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002adc:	4b53      	ldr	r3, [pc, #332]	; (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	4a52      	ldr	r2, [pc, #328]	; (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ae6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae8:	4b50      	ldr	r3, [pc, #320]	; (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	494d      	ldr	r1, [pc, #308]	; (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d044      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d107      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0e:	4b47      	ldr	r3, [pc, #284]	; (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d119      	bne.n	8002b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e07f      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d003      	beq.n	8002b2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b2a:	2b03      	cmp	r3, #3
 8002b2c:	d107      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b2e:	4b3f      	ldr	r3, [pc, #252]	; (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d109      	bne.n	8002b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e06f      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b3e:	4b3b      	ldr	r3, [pc, #236]	; (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e067      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b4e:	4b37      	ldr	r3, [pc, #220]	; (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f023 0203 	bic.w	r2, r3, #3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	4934      	ldr	r1, [pc, #208]	; (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b60:	f7fe fec8 	bl	80018f4 <HAL_GetTick>
 8002b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b66:	e00a      	b.n	8002b7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b68:	f7fe fec4 	bl	80018f4 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e04f      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7e:	4b2b      	ldr	r3, [pc, #172]	; (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 020c 	and.w	r2, r3, #12
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d1eb      	bne.n	8002b68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b90:	4b25      	ldr	r3, [pc, #148]	; (8002c28 <HAL_RCC_ClockConfig+0x1b8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 030f 	and.w	r3, r3, #15
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d20c      	bcs.n	8002bb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9e:	4b22      	ldr	r3, [pc, #136]	; (8002c28 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba6:	4b20      	ldr	r3, [pc, #128]	; (8002c28 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d001      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e032      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d008      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bc4:	4b19      	ldr	r3, [pc, #100]	; (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	4916      	ldr	r1, [pc, #88]	; (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d009      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002be2:	4b12      	ldr	r3, [pc, #72]	; (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	490e      	ldr	r1, [pc, #56]	; (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bf6:	f000 f887 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	091b      	lsrs	r3, r3, #4
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	490a      	ldr	r1, [pc, #40]	; (8002c30 <HAL_RCC_ClockConfig+0x1c0>)
 8002c08:	5ccb      	ldrb	r3, [r1, r3]
 8002c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c0e:	4a09      	ldr	r2, [pc, #36]	; (8002c34 <HAL_RCC_ClockConfig+0x1c4>)
 8002c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c12:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <HAL_RCC_ClockConfig+0x1c8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fe fd5e 	bl	80016d8 <HAL_InitTick>

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40023c00 	.word	0x40023c00
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	08007d78 	.word	0x08007d78
 8002c34:	20000018 	.word	0x20000018
 8002c38:	2000001c 	.word	0x2000001c

08002c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c40:	4b03      	ldr	r3, [pc, #12]	; (8002c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c42:	681b      	ldr	r3, [r3, #0]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	20000018 	.word	0x20000018

08002c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c58:	f7ff fff0 	bl	8002c3c <HAL_RCC_GetHCLKFreq>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	0a9b      	lsrs	r3, r3, #10
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	4903      	ldr	r1, [pc, #12]	; (8002c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c6a:	5ccb      	ldrb	r3, [r1, r3]
 8002c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40023800 	.word	0x40023800
 8002c78:	08007d88 	.word	0x08007d88

08002c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c80:	f7ff ffdc 	bl	8002c3c <HAL_RCC_GetHCLKFreq>
 8002c84:	4602      	mov	r2, r0
 8002c86:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	0b5b      	lsrs	r3, r3, #13
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	4903      	ldr	r1, [pc, #12]	; (8002ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c92:	5ccb      	ldrb	r3, [r1, r3]
 8002c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	08007d88 	.word	0x08007d88

08002ca4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	220f      	movs	r2, #15
 8002cb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002cb4:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <HAL_RCC_GetClockConfig+0x5c>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 0203 	and.w	r2, r3, #3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <HAL_RCC_GetClockConfig+0x5c>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ccc:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <HAL_RCC_GetClockConfig+0x5c>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002cd8:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <HAL_RCC_GetClockConfig+0x5c>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	08db      	lsrs	r3, r3, #3
 8002cde:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ce6:	4b07      	ldr	r3, [pc, #28]	; (8002d04 <HAL_RCC_GetClockConfig+0x60>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 020f 	and.w	r2, r3, #15
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	601a      	str	r2, [r3, #0]
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40023800 	.word	0x40023800
 8002d04:	40023c00 	.word	0x40023c00

08002d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d0c:	b0ae      	sub	sp, #184	; 0xb8
 8002d0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d2e:	4bcb      	ldr	r3, [pc, #812]	; (800305c <HAL_RCC_GetSysClockFreq+0x354>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	2b0c      	cmp	r3, #12
 8002d38:	f200 8206 	bhi.w	8003148 <HAL_RCC_GetSysClockFreq+0x440>
 8002d3c:	a201      	add	r2, pc, #4	; (adr r2, 8002d44 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d42:	bf00      	nop
 8002d44:	08002d79 	.word	0x08002d79
 8002d48:	08003149 	.word	0x08003149
 8002d4c:	08003149 	.word	0x08003149
 8002d50:	08003149 	.word	0x08003149
 8002d54:	08002d81 	.word	0x08002d81
 8002d58:	08003149 	.word	0x08003149
 8002d5c:	08003149 	.word	0x08003149
 8002d60:	08003149 	.word	0x08003149
 8002d64:	08002d89 	.word	0x08002d89
 8002d68:	08003149 	.word	0x08003149
 8002d6c:	08003149 	.word	0x08003149
 8002d70:	08003149 	.word	0x08003149
 8002d74:	08002f79 	.word	0x08002f79
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d78:	4bb9      	ldr	r3, [pc, #740]	; (8003060 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002d7e:	e1e7      	b.n	8003150 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d80:	4bb8      	ldr	r3, [pc, #736]	; (8003064 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002d82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d86:	e1e3      	b.n	8003150 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d88:	4bb4      	ldr	r3, [pc, #720]	; (800305c <HAL_RCC_GetSysClockFreq+0x354>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d94:	4bb1      	ldr	r3, [pc, #708]	; (800305c <HAL_RCC_GetSysClockFreq+0x354>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d071      	beq.n	8002e84 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002da0:	4bae      	ldr	r3, [pc, #696]	; (800305c <HAL_RCC_GetSysClockFreq+0x354>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	099b      	lsrs	r3, r3, #6
 8002da6:	2200      	movs	r2, #0
 8002da8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002dac:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002db0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002db8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002dc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002dc6:	4622      	mov	r2, r4
 8002dc8:	462b      	mov	r3, r5
 8002dca:	f04f 0000 	mov.w	r0, #0
 8002dce:	f04f 0100 	mov.w	r1, #0
 8002dd2:	0159      	lsls	r1, r3, #5
 8002dd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dd8:	0150      	lsls	r0, r2, #5
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	4621      	mov	r1, r4
 8002de0:	1a51      	subs	r1, r2, r1
 8002de2:	6439      	str	r1, [r7, #64]	; 0x40
 8002de4:	4629      	mov	r1, r5
 8002de6:	eb63 0301 	sbc.w	r3, r3, r1
 8002dea:	647b      	str	r3, [r7, #68]	; 0x44
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	f04f 0300 	mov.w	r3, #0
 8002df4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002df8:	4649      	mov	r1, r9
 8002dfa:	018b      	lsls	r3, r1, #6
 8002dfc:	4641      	mov	r1, r8
 8002dfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e02:	4641      	mov	r1, r8
 8002e04:	018a      	lsls	r2, r1, #6
 8002e06:	4641      	mov	r1, r8
 8002e08:	1a51      	subs	r1, r2, r1
 8002e0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e0c:	4649      	mov	r1, r9
 8002e0e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002e20:	4649      	mov	r1, r9
 8002e22:	00cb      	lsls	r3, r1, #3
 8002e24:	4641      	mov	r1, r8
 8002e26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e2a:	4641      	mov	r1, r8
 8002e2c:	00ca      	lsls	r2, r1, #3
 8002e2e:	4610      	mov	r0, r2
 8002e30:	4619      	mov	r1, r3
 8002e32:	4603      	mov	r3, r0
 8002e34:	4622      	mov	r2, r4
 8002e36:	189b      	adds	r3, r3, r2
 8002e38:	633b      	str	r3, [r7, #48]	; 0x30
 8002e3a:	462b      	mov	r3, r5
 8002e3c:	460a      	mov	r2, r1
 8002e3e:	eb42 0303 	adc.w	r3, r2, r3
 8002e42:	637b      	str	r3, [r7, #52]	; 0x34
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e50:	4629      	mov	r1, r5
 8002e52:	024b      	lsls	r3, r1, #9
 8002e54:	4621      	mov	r1, r4
 8002e56:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e5a:	4621      	mov	r1, r4
 8002e5c:	024a      	lsls	r2, r1, #9
 8002e5e:	4610      	mov	r0, r2
 8002e60:	4619      	mov	r1, r3
 8002e62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e66:	2200      	movs	r2, #0
 8002e68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e70:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002e74:	f7fd f9d6 	bl	8000224 <__aeabi_uldivmod>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e82:	e067      	b.n	8002f54 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e84:	4b75      	ldr	r3, [pc, #468]	; (800305c <HAL_RCC_GetSysClockFreq+0x354>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	099b      	lsrs	r3, r3, #6
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e90:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002e94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ea2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002ea6:	4622      	mov	r2, r4
 8002ea8:	462b      	mov	r3, r5
 8002eaa:	f04f 0000 	mov.w	r0, #0
 8002eae:	f04f 0100 	mov.w	r1, #0
 8002eb2:	0159      	lsls	r1, r3, #5
 8002eb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eb8:	0150      	lsls	r0, r2, #5
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	4621      	mov	r1, r4
 8002ec0:	1a51      	subs	r1, r2, r1
 8002ec2:	62b9      	str	r1, [r7, #40]	; 0x28
 8002ec4:	4629      	mov	r1, r5
 8002ec6:	eb63 0301 	sbc.w	r3, r3, r1
 8002eca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	f04f 0300 	mov.w	r3, #0
 8002ed4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002ed8:	4649      	mov	r1, r9
 8002eda:	018b      	lsls	r3, r1, #6
 8002edc:	4641      	mov	r1, r8
 8002ede:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ee2:	4641      	mov	r1, r8
 8002ee4:	018a      	lsls	r2, r1, #6
 8002ee6:	4641      	mov	r1, r8
 8002ee8:	ebb2 0a01 	subs.w	sl, r2, r1
 8002eec:	4649      	mov	r1, r9
 8002eee:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	f04f 0300 	mov.w	r3, #0
 8002efa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002efe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f06:	4692      	mov	sl, r2
 8002f08:	469b      	mov	fp, r3
 8002f0a:	4623      	mov	r3, r4
 8002f0c:	eb1a 0303 	adds.w	r3, sl, r3
 8002f10:	623b      	str	r3, [r7, #32]
 8002f12:	462b      	mov	r3, r5
 8002f14:	eb4b 0303 	adc.w	r3, fp, r3
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002f26:	4629      	mov	r1, r5
 8002f28:	028b      	lsls	r3, r1, #10
 8002f2a:	4621      	mov	r1, r4
 8002f2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f30:	4621      	mov	r1, r4
 8002f32:	028a      	lsls	r2, r1, #10
 8002f34:	4610      	mov	r0, r2
 8002f36:	4619      	mov	r1, r3
 8002f38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	673b      	str	r3, [r7, #112]	; 0x70
 8002f40:	677a      	str	r2, [r7, #116]	; 0x74
 8002f42:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002f46:	f7fd f96d 	bl	8000224 <__aeabi_uldivmod>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	4613      	mov	r3, r2
 8002f50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f54:	4b41      	ldr	r3, [pc, #260]	; (800305c <HAL_RCC_GetSysClockFreq+0x354>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	0c1b      	lsrs	r3, r3, #16
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	3301      	adds	r3, #1
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002f66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f76:	e0eb      	b.n	8003150 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f78:	4b38      	ldr	r3, [pc, #224]	; (800305c <HAL_RCC_GetSysClockFreq+0x354>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f84:	4b35      	ldr	r3, [pc, #212]	; (800305c <HAL_RCC_GetSysClockFreq+0x354>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d06b      	beq.n	8003068 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f90:	4b32      	ldr	r3, [pc, #200]	; (800305c <HAL_RCC_GetSysClockFreq+0x354>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	099b      	lsrs	r3, r3, #6
 8002f96:	2200      	movs	r2, #0
 8002f98:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fa2:	663b      	str	r3, [r7, #96]	; 0x60
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	667b      	str	r3, [r7, #100]	; 0x64
 8002fa8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002fac:	4622      	mov	r2, r4
 8002fae:	462b      	mov	r3, r5
 8002fb0:	f04f 0000 	mov.w	r0, #0
 8002fb4:	f04f 0100 	mov.w	r1, #0
 8002fb8:	0159      	lsls	r1, r3, #5
 8002fba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fbe:	0150      	lsls	r0, r2, #5
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4621      	mov	r1, r4
 8002fc6:	1a51      	subs	r1, r2, r1
 8002fc8:	61b9      	str	r1, [r7, #24]
 8002fca:	4629      	mov	r1, r5
 8002fcc:	eb63 0301 	sbc.w	r3, r3, r1
 8002fd0:	61fb      	str	r3, [r7, #28]
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002fde:	4659      	mov	r1, fp
 8002fe0:	018b      	lsls	r3, r1, #6
 8002fe2:	4651      	mov	r1, sl
 8002fe4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fe8:	4651      	mov	r1, sl
 8002fea:	018a      	lsls	r2, r1, #6
 8002fec:	4651      	mov	r1, sl
 8002fee:	ebb2 0801 	subs.w	r8, r2, r1
 8002ff2:	4659      	mov	r1, fp
 8002ff4:	eb63 0901 	sbc.w	r9, r3, r1
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	f04f 0300 	mov.w	r3, #0
 8003000:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003004:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003008:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800300c:	4690      	mov	r8, r2
 800300e:	4699      	mov	r9, r3
 8003010:	4623      	mov	r3, r4
 8003012:	eb18 0303 	adds.w	r3, r8, r3
 8003016:	613b      	str	r3, [r7, #16]
 8003018:	462b      	mov	r3, r5
 800301a:	eb49 0303 	adc.w	r3, r9, r3
 800301e:	617b      	str	r3, [r7, #20]
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800302c:	4629      	mov	r1, r5
 800302e:	024b      	lsls	r3, r1, #9
 8003030:	4621      	mov	r1, r4
 8003032:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003036:	4621      	mov	r1, r4
 8003038:	024a      	lsls	r2, r1, #9
 800303a:	4610      	mov	r0, r2
 800303c:	4619      	mov	r1, r3
 800303e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003042:	2200      	movs	r2, #0
 8003044:	65bb      	str	r3, [r7, #88]	; 0x58
 8003046:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003048:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800304c:	f7fd f8ea 	bl	8000224 <__aeabi_uldivmod>
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	4613      	mov	r3, r2
 8003056:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800305a:	e065      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0x420>
 800305c:	40023800 	.word	0x40023800
 8003060:	00f42400 	.word	0x00f42400
 8003064:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003068:	4b3d      	ldr	r3, [pc, #244]	; (8003160 <HAL_RCC_GetSysClockFreq+0x458>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	099b      	lsrs	r3, r3, #6
 800306e:	2200      	movs	r2, #0
 8003070:	4618      	mov	r0, r3
 8003072:	4611      	mov	r1, r2
 8003074:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003078:	653b      	str	r3, [r7, #80]	; 0x50
 800307a:	2300      	movs	r3, #0
 800307c:	657b      	str	r3, [r7, #84]	; 0x54
 800307e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003082:	4642      	mov	r2, r8
 8003084:	464b      	mov	r3, r9
 8003086:	f04f 0000 	mov.w	r0, #0
 800308a:	f04f 0100 	mov.w	r1, #0
 800308e:	0159      	lsls	r1, r3, #5
 8003090:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003094:	0150      	lsls	r0, r2, #5
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	4641      	mov	r1, r8
 800309c:	1a51      	subs	r1, r2, r1
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	4649      	mov	r1, r9
 80030a2:	eb63 0301 	sbc.w	r3, r3, r1
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	f04f 0300 	mov.w	r3, #0
 80030b0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80030b4:	4659      	mov	r1, fp
 80030b6:	018b      	lsls	r3, r1, #6
 80030b8:	4651      	mov	r1, sl
 80030ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030be:	4651      	mov	r1, sl
 80030c0:	018a      	lsls	r2, r1, #6
 80030c2:	4651      	mov	r1, sl
 80030c4:	1a54      	subs	r4, r2, r1
 80030c6:	4659      	mov	r1, fp
 80030c8:	eb63 0501 	sbc.w	r5, r3, r1
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	00eb      	lsls	r3, r5, #3
 80030d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030da:	00e2      	lsls	r2, r4, #3
 80030dc:	4614      	mov	r4, r2
 80030de:	461d      	mov	r5, r3
 80030e0:	4643      	mov	r3, r8
 80030e2:	18e3      	adds	r3, r4, r3
 80030e4:	603b      	str	r3, [r7, #0]
 80030e6:	464b      	mov	r3, r9
 80030e8:	eb45 0303 	adc.w	r3, r5, r3
 80030ec:	607b      	str	r3, [r7, #4]
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030fa:	4629      	mov	r1, r5
 80030fc:	028b      	lsls	r3, r1, #10
 80030fe:	4621      	mov	r1, r4
 8003100:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003104:	4621      	mov	r1, r4
 8003106:	028a      	lsls	r2, r1, #10
 8003108:	4610      	mov	r0, r2
 800310a:	4619      	mov	r1, r3
 800310c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003110:	2200      	movs	r2, #0
 8003112:	64bb      	str	r3, [r7, #72]	; 0x48
 8003114:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003116:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800311a:	f7fd f883 	bl	8000224 <__aeabi_uldivmod>
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	4613      	mov	r3, r2
 8003124:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003128:	4b0d      	ldr	r3, [pc, #52]	; (8003160 <HAL_RCC_GetSysClockFreq+0x458>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	0f1b      	lsrs	r3, r3, #28
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003136:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800313a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800313e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003142:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003146:	e003      	b.n	8003150 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003148:	4b06      	ldr	r3, [pc, #24]	; (8003164 <HAL_RCC_GetSysClockFreq+0x45c>)
 800314a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800314e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003150:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003154:	4618      	mov	r0, r3
 8003156:	37b8      	adds	r7, #184	; 0xb8
 8003158:	46bd      	mov	sp, r7
 800315a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800315e:	bf00      	nop
 8003160:	40023800 	.word	0x40023800
 8003164:	00f42400 	.word	0x00f42400

08003168 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e28d      	b.n	8003696 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 8083 	beq.w	800328e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003188:	4b94      	ldr	r3, [pc, #592]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 030c 	and.w	r3, r3, #12
 8003190:	2b04      	cmp	r3, #4
 8003192:	d019      	beq.n	80031c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003194:	4b91      	ldr	r3, [pc, #580]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800319c:	2b08      	cmp	r3, #8
 800319e:	d106      	bne.n	80031ae <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031a0:	4b8e      	ldr	r3, [pc, #568]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ac:	d00c      	beq.n	80031c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ae:	4b8b      	ldr	r3, [pc, #556]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031b6:	2b0c      	cmp	r3, #12
 80031b8:	d112      	bne.n	80031e0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ba:	4b88      	ldr	r3, [pc, #544]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031c6:	d10b      	bne.n	80031e0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c8:	4b84      	ldr	r3, [pc, #528]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d05b      	beq.n	800328c <HAL_RCC_OscConfig+0x124>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d157      	bne.n	800328c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e25a      	b.n	8003696 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e8:	d106      	bne.n	80031f8 <HAL_RCC_OscConfig+0x90>
 80031ea:	4b7c      	ldr	r3, [pc, #496]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a7b      	ldr	r2, [pc, #492]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 80031f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	e01d      	b.n	8003234 <HAL_RCC_OscConfig+0xcc>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003200:	d10c      	bne.n	800321c <HAL_RCC_OscConfig+0xb4>
 8003202:	4b76      	ldr	r3, [pc, #472]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a75      	ldr	r2, [pc, #468]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 8003208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	4b73      	ldr	r3, [pc, #460]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a72      	ldr	r2, [pc, #456]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 8003214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	e00b      	b.n	8003234 <HAL_RCC_OscConfig+0xcc>
 800321c:	4b6f      	ldr	r3, [pc, #444]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a6e      	ldr	r2, [pc, #440]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 8003222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003226:	6013      	str	r3, [r2, #0]
 8003228:	4b6c      	ldr	r3, [pc, #432]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a6b      	ldr	r2, [pc, #428]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 800322e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d013      	beq.n	8003264 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323c:	f7fe fb5a 	bl	80018f4 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003244:	f7fe fb56 	bl	80018f4 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b64      	cmp	r3, #100	; 0x64
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e21f      	b.n	8003696 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003256:	4b61      	ldr	r3, [pc, #388]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0f0      	beq.n	8003244 <HAL_RCC_OscConfig+0xdc>
 8003262:	e014      	b.n	800328e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003264:	f7fe fb46 	bl	80018f4 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800326c:	f7fe fb42 	bl	80018f4 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b64      	cmp	r3, #100	; 0x64
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e20b      	b.n	8003696 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800327e:	4b57      	ldr	r3, [pc, #348]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1f0      	bne.n	800326c <HAL_RCC_OscConfig+0x104>
 800328a:	e000      	b.n	800328e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800328c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d06f      	beq.n	800337a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800329a:	4b50      	ldr	r3, [pc, #320]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 030c 	and.w	r3, r3, #12
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d017      	beq.n	80032d6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032a6:	4b4d      	ldr	r3, [pc, #308]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032ae:	2b08      	cmp	r3, #8
 80032b0:	d105      	bne.n	80032be <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032b2:	4b4a      	ldr	r3, [pc, #296]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00b      	beq.n	80032d6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032be:	4b47      	ldr	r3, [pc, #284]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032c6:	2b0c      	cmp	r3, #12
 80032c8:	d11c      	bne.n	8003304 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ca:	4b44      	ldr	r3, [pc, #272]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d116      	bne.n	8003304 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032d6:	4b41      	ldr	r3, [pc, #260]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d005      	beq.n	80032ee <HAL_RCC_OscConfig+0x186>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d001      	beq.n	80032ee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e1d3      	b.n	8003696 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ee:	4b3b      	ldr	r3, [pc, #236]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	4937      	ldr	r1, [pc, #220]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003302:	e03a      	b.n	800337a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d020      	beq.n	800334e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800330c:	4b34      	ldr	r3, [pc, #208]	; (80033e0 <HAL_RCC_OscConfig+0x278>)
 800330e:	2201      	movs	r2, #1
 8003310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003312:	f7fe faef 	bl	80018f4 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800331a:	f7fe faeb 	bl	80018f4 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e1b4      	b.n	8003696 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332c:	4b2b      	ldr	r3, [pc, #172]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0f0      	beq.n	800331a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003338:	4b28      	ldr	r3, [pc, #160]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	4925      	ldr	r1, [pc, #148]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 8003348:	4313      	orrs	r3, r2
 800334a:	600b      	str	r3, [r1, #0]
 800334c:	e015      	b.n	800337a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800334e:	4b24      	ldr	r3, [pc, #144]	; (80033e0 <HAL_RCC_OscConfig+0x278>)
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003354:	f7fe face 	bl	80018f4 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800335c:	f7fe faca 	bl	80018f4 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e193      	b.n	8003696 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800336e:	4b1b      	ldr	r3, [pc, #108]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f0      	bne.n	800335c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d036      	beq.n	80033f4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d016      	beq.n	80033bc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800338e:	4b15      	ldr	r3, [pc, #84]	; (80033e4 <HAL_RCC_OscConfig+0x27c>)
 8003390:	2201      	movs	r2, #1
 8003392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003394:	f7fe faae 	bl	80018f4 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800339c:	f7fe faaa 	bl	80018f4 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e173      	b.n	8003696 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ae:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 80033b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCC_OscConfig+0x234>
 80033ba:	e01b      	b.n	80033f4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033bc:	4b09      	ldr	r3, [pc, #36]	; (80033e4 <HAL_RCC_OscConfig+0x27c>)
 80033be:	2200      	movs	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c2:	f7fe fa97 	bl	80018f4 <HAL_GetTick>
 80033c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c8:	e00e      	b.n	80033e8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ca:	f7fe fa93 	bl	80018f4 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d907      	bls.n	80033e8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e15c      	b.n	8003696 <HAL_RCC_OscConfig+0x52e>
 80033dc:	40023800 	.word	0x40023800
 80033e0:	42470000 	.word	0x42470000
 80033e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e8:	4b8a      	ldr	r3, [pc, #552]	; (8003614 <HAL_RCC_OscConfig+0x4ac>)
 80033ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1ea      	bne.n	80033ca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 8097 	beq.w	8003530 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003402:	2300      	movs	r3, #0
 8003404:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003406:	4b83      	ldr	r3, [pc, #524]	; (8003614 <HAL_RCC_OscConfig+0x4ac>)
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10f      	bne.n	8003432 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003412:	2300      	movs	r3, #0
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	4b7f      	ldr	r3, [pc, #508]	; (8003614 <HAL_RCC_OscConfig+0x4ac>)
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	4a7e      	ldr	r2, [pc, #504]	; (8003614 <HAL_RCC_OscConfig+0x4ac>)
 800341c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003420:	6413      	str	r3, [r2, #64]	; 0x40
 8003422:	4b7c      	ldr	r3, [pc, #496]	; (8003614 <HAL_RCC_OscConfig+0x4ac>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342a:	60bb      	str	r3, [r7, #8]
 800342c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800342e:	2301      	movs	r3, #1
 8003430:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003432:	4b79      	ldr	r3, [pc, #484]	; (8003618 <HAL_RCC_OscConfig+0x4b0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343a:	2b00      	cmp	r3, #0
 800343c:	d118      	bne.n	8003470 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800343e:	4b76      	ldr	r3, [pc, #472]	; (8003618 <HAL_RCC_OscConfig+0x4b0>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a75      	ldr	r2, [pc, #468]	; (8003618 <HAL_RCC_OscConfig+0x4b0>)
 8003444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800344a:	f7fe fa53 	bl	80018f4 <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003450:	e008      	b.n	8003464 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003452:	f7fe fa4f 	bl	80018f4 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e118      	b.n	8003696 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003464:	4b6c      	ldr	r3, [pc, #432]	; (8003618 <HAL_RCC_OscConfig+0x4b0>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0f0      	beq.n	8003452 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d106      	bne.n	8003486 <HAL_RCC_OscConfig+0x31e>
 8003478:	4b66      	ldr	r3, [pc, #408]	; (8003614 <HAL_RCC_OscConfig+0x4ac>)
 800347a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347c:	4a65      	ldr	r2, [pc, #404]	; (8003614 <HAL_RCC_OscConfig+0x4ac>)
 800347e:	f043 0301 	orr.w	r3, r3, #1
 8003482:	6713      	str	r3, [r2, #112]	; 0x70
 8003484:	e01c      	b.n	80034c0 <HAL_RCC_OscConfig+0x358>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	2b05      	cmp	r3, #5
 800348c:	d10c      	bne.n	80034a8 <HAL_RCC_OscConfig+0x340>
 800348e:	4b61      	ldr	r3, [pc, #388]	; (8003614 <HAL_RCC_OscConfig+0x4ac>)
 8003490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003492:	4a60      	ldr	r2, [pc, #384]	; (8003614 <HAL_RCC_OscConfig+0x4ac>)
 8003494:	f043 0304 	orr.w	r3, r3, #4
 8003498:	6713      	str	r3, [r2, #112]	; 0x70
 800349a:	4b5e      	ldr	r3, [pc, #376]	; (8003614 <HAL_RCC_OscConfig+0x4ac>)
 800349c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349e:	4a5d      	ldr	r2, [pc, #372]	; (8003614 <HAL_RCC_OscConfig+0x4ac>)
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	6713      	str	r3, [r2, #112]	; 0x70
 80034a6:	e00b      	b.n	80034c0 <HAL_RCC_OscConfig+0x358>
 80034a8:	4b5a      	ldr	r3, [pc, #360]	; (8003614 <HAL_RCC_OscConfig+0x4ac>)
 80034aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ac:	4a59      	ldr	r2, [pc, #356]	; (8003614 <HAL_RCC_OscConfig+0x4ac>)
 80034ae:	f023 0301 	bic.w	r3, r3, #1
 80034b2:	6713      	str	r3, [r2, #112]	; 0x70
 80034b4:	4b57      	ldr	r3, [pc, #348]	; (8003614 <HAL_RCC_OscConfig+0x4ac>)
 80034b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b8:	4a56      	ldr	r2, [pc, #344]	; (8003614 <HAL_RCC_OscConfig+0x4ac>)
 80034ba:	f023 0304 	bic.w	r3, r3, #4
 80034be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d015      	beq.n	80034f4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c8:	f7fe fa14 	bl	80018f4 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ce:	e00a      	b.n	80034e6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034d0:	f7fe fa10 	bl	80018f4 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	f241 3288 	movw	r2, #5000	; 0x1388
 80034de:	4293      	cmp	r3, r2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e0d7      	b.n	8003696 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e6:	4b4b      	ldr	r3, [pc, #300]	; (8003614 <HAL_RCC_OscConfig+0x4ac>)
 80034e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0ee      	beq.n	80034d0 <HAL_RCC_OscConfig+0x368>
 80034f2:	e014      	b.n	800351e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f4:	f7fe f9fe 	bl	80018f4 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034fa:	e00a      	b.n	8003512 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034fc:	f7fe f9fa 	bl	80018f4 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	f241 3288 	movw	r2, #5000	; 0x1388
 800350a:	4293      	cmp	r3, r2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e0c1      	b.n	8003696 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003512:	4b40      	ldr	r3, [pc, #256]	; (8003614 <HAL_RCC_OscConfig+0x4ac>)
 8003514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1ee      	bne.n	80034fc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800351e:	7dfb      	ldrb	r3, [r7, #23]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d105      	bne.n	8003530 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003524:	4b3b      	ldr	r3, [pc, #236]	; (8003614 <HAL_RCC_OscConfig+0x4ac>)
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	4a3a      	ldr	r2, [pc, #232]	; (8003614 <HAL_RCC_OscConfig+0x4ac>)
 800352a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800352e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 80ad 	beq.w	8003694 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800353a:	4b36      	ldr	r3, [pc, #216]	; (8003614 <HAL_RCC_OscConfig+0x4ac>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 030c 	and.w	r3, r3, #12
 8003542:	2b08      	cmp	r3, #8
 8003544:	d060      	beq.n	8003608 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	2b02      	cmp	r3, #2
 800354c:	d145      	bne.n	80035da <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800354e:	4b33      	ldr	r3, [pc, #204]	; (800361c <HAL_RCC_OscConfig+0x4b4>)
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003554:	f7fe f9ce 	bl	80018f4 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800355c:	f7fe f9ca 	bl	80018f4 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e093      	b.n	8003696 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800356e:	4b29      	ldr	r3, [pc, #164]	; (8003614 <HAL_RCC_OscConfig+0x4ac>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f0      	bne.n	800355c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69da      	ldr	r2, [r3, #28]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	019b      	lsls	r3, r3, #6
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003590:	085b      	lsrs	r3, r3, #1
 8003592:	3b01      	subs	r3, #1
 8003594:	041b      	lsls	r3, r3, #16
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359c:	061b      	lsls	r3, r3, #24
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a4:	071b      	lsls	r3, r3, #28
 80035a6:	491b      	ldr	r1, [pc, #108]	; (8003614 <HAL_RCC_OscConfig+0x4ac>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035ac:	4b1b      	ldr	r3, [pc, #108]	; (800361c <HAL_RCC_OscConfig+0x4b4>)
 80035ae:	2201      	movs	r2, #1
 80035b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b2:	f7fe f99f 	bl	80018f4 <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b8:	e008      	b.n	80035cc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ba:	f7fe f99b 	bl	80018f4 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e064      	b.n	8003696 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035cc:	4b11      	ldr	r3, [pc, #68]	; (8003614 <HAL_RCC_OscConfig+0x4ac>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0f0      	beq.n	80035ba <HAL_RCC_OscConfig+0x452>
 80035d8:	e05c      	b.n	8003694 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035da:	4b10      	ldr	r3, [pc, #64]	; (800361c <HAL_RCC_OscConfig+0x4b4>)
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e0:	f7fe f988 	bl	80018f4 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e8:	f7fe f984 	bl	80018f4 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e04d      	b.n	8003696 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035fa:	4b06      	ldr	r3, [pc, #24]	; (8003614 <HAL_RCC_OscConfig+0x4ac>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f0      	bne.n	80035e8 <HAL_RCC_OscConfig+0x480>
 8003606:	e045      	b.n	8003694 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d107      	bne.n	8003620 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e040      	b.n	8003696 <HAL_RCC_OscConfig+0x52e>
 8003614:	40023800 	.word	0x40023800
 8003618:	40007000 	.word	0x40007000
 800361c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003620:	4b1f      	ldr	r3, [pc, #124]	; (80036a0 <HAL_RCC_OscConfig+0x538>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d030      	beq.n	8003690 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003638:	429a      	cmp	r2, r3
 800363a:	d129      	bne.n	8003690 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003646:	429a      	cmp	r2, r3
 8003648:	d122      	bne.n	8003690 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003650:	4013      	ands	r3, r2
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003656:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003658:	4293      	cmp	r3, r2
 800365a:	d119      	bne.n	8003690 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003666:	085b      	lsrs	r3, r3, #1
 8003668:	3b01      	subs	r3, #1
 800366a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800366c:	429a      	cmp	r2, r3
 800366e:	d10f      	bne.n	8003690 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800367c:	429a      	cmp	r2, r3
 800367e:	d107      	bne.n	8003690 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800368c:	429a      	cmp	r2, r3
 800368e:	d001      	beq.n	8003694 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e000      	b.n	8003696 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40023800 	.word	0x40023800

080036a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e041      	b.n	800373a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d106      	bne.n	80036d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f839 	bl	8003742 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2202      	movs	r2, #2
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3304      	adds	r3, #4
 80036e0:	4619      	mov	r1, r3
 80036e2:	4610      	mov	r0, r2
 80036e4:	f000 f9c0 	bl	8003a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
	...

08003758 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b01      	cmp	r3, #1
 800376a:	d001      	beq.n	8003770 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e04e      	b.n	800380e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a23      	ldr	r2, [pc, #140]	; (800381c <HAL_TIM_Base_Start_IT+0xc4>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d022      	beq.n	80037d8 <HAL_TIM_Base_Start_IT+0x80>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800379a:	d01d      	beq.n	80037d8 <HAL_TIM_Base_Start_IT+0x80>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a1f      	ldr	r2, [pc, #124]	; (8003820 <HAL_TIM_Base_Start_IT+0xc8>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d018      	beq.n	80037d8 <HAL_TIM_Base_Start_IT+0x80>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a1e      	ldr	r2, [pc, #120]	; (8003824 <HAL_TIM_Base_Start_IT+0xcc>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d013      	beq.n	80037d8 <HAL_TIM_Base_Start_IT+0x80>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a1c      	ldr	r2, [pc, #112]	; (8003828 <HAL_TIM_Base_Start_IT+0xd0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d00e      	beq.n	80037d8 <HAL_TIM_Base_Start_IT+0x80>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a1b      	ldr	r2, [pc, #108]	; (800382c <HAL_TIM_Base_Start_IT+0xd4>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d009      	beq.n	80037d8 <HAL_TIM_Base_Start_IT+0x80>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a19      	ldr	r2, [pc, #100]	; (8003830 <HAL_TIM_Base_Start_IT+0xd8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d004      	beq.n	80037d8 <HAL_TIM_Base_Start_IT+0x80>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a18      	ldr	r2, [pc, #96]	; (8003834 <HAL_TIM_Base_Start_IT+0xdc>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d111      	bne.n	80037fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2b06      	cmp	r3, #6
 80037e8:	d010      	beq.n	800380c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f042 0201 	orr.w	r2, r2, #1
 80037f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037fa:	e007      	b.n	800380c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	40010000 	.word	0x40010000
 8003820:	40000400 	.word	0x40000400
 8003824:	40000800 	.word	0x40000800
 8003828:	40000c00 	.word	0x40000c00
 800382c:	40010400 	.word	0x40010400
 8003830:	40014000 	.word	0x40014000
 8003834:	40001800 	.word	0x40001800

08003838 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d020      	beq.n	800389c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d01b      	beq.n	800389c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f06f 0202 	mvn.w	r2, #2
 800386c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	f003 0303 	and.w	r3, r3, #3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f8d2 	bl	8003a2c <HAL_TIM_IC_CaptureCallback>
 8003888:	e005      	b.n	8003896 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f8c4 	bl	8003a18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 f8d5 	bl	8003a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	f003 0304 	and.w	r3, r3, #4
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d020      	beq.n	80038e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d01b      	beq.n	80038e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f06f 0204 	mvn.w	r2, #4
 80038b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2202      	movs	r2, #2
 80038be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f8ac 	bl	8003a2c <HAL_TIM_IC_CaptureCallback>
 80038d4:	e005      	b.n	80038e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f89e 	bl	8003a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 f8af 	bl	8003a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	f003 0308 	and.w	r3, r3, #8
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d020      	beq.n	8003934 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d01b      	beq.n	8003934 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0208 	mvn.w	r2, #8
 8003904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2204      	movs	r2, #4
 800390a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f886 	bl	8003a2c <HAL_TIM_IC_CaptureCallback>
 8003920:	e005      	b.n	800392e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f878 	bl	8003a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f889 	bl	8003a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f003 0310 	and.w	r3, r3, #16
 800393a:	2b00      	cmp	r3, #0
 800393c:	d020      	beq.n	8003980 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f003 0310 	and.w	r3, r3, #16
 8003944:	2b00      	cmp	r3, #0
 8003946:	d01b      	beq.n	8003980 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f06f 0210 	mvn.w	r2, #16
 8003950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2208      	movs	r2, #8
 8003956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f860 	bl	8003a2c <HAL_TIM_IC_CaptureCallback>
 800396c:	e005      	b.n	800397a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f852 	bl	8003a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f863 	bl	8003a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00c      	beq.n	80039a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b00      	cmp	r3, #0
 8003992:	d007      	beq.n	80039a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f06f 0201 	mvn.w	r2, #1
 800399c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7fd fafe 	bl	8000fa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00c      	beq.n	80039c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d007      	beq.n	80039c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f906 	bl	8003bd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00c      	beq.n	80039ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d007      	beq.n	80039ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f834 	bl	8003a54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f003 0320 	and.w	r3, r3, #32
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00c      	beq.n	8003a10 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f003 0320 	and.w	r3, r3, #32
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d007      	beq.n	8003a10 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f06f 0220 	mvn.w	r2, #32
 8003a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f8d8 	bl	8003bc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a10:	bf00      	nop
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a46      	ldr	r2, [pc, #280]	; (8003b94 <TIM_Base_SetConfig+0x12c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d013      	beq.n	8003aa8 <TIM_Base_SetConfig+0x40>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a86:	d00f      	beq.n	8003aa8 <TIM_Base_SetConfig+0x40>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a43      	ldr	r2, [pc, #268]	; (8003b98 <TIM_Base_SetConfig+0x130>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d00b      	beq.n	8003aa8 <TIM_Base_SetConfig+0x40>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a42      	ldr	r2, [pc, #264]	; (8003b9c <TIM_Base_SetConfig+0x134>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d007      	beq.n	8003aa8 <TIM_Base_SetConfig+0x40>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a41      	ldr	r2, [pc, #260]	; (8003ba0 <TIM_Base_SetConfig+0x138>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d003      	beq.n	8003aa8 <TIM_Base_SetConfig+0x40>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a40      	ldr	r2, [pc, #256]	; (8003ba4 <TIM_Base_SetConfig+0x13c>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d108      	bne.n	8003aba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a35      	ldr	r2, [pc, #212]	; (8003b94 <TIM_Base_SetConfig+0x12c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d02b      	beq.n	8003b1a <TIM_Base_SetConfig+0xb2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac8:	d027      	beq.n	8003b1a <TIM_Base_SetConfig+0xb2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a32      	ldr	r2, [pc, #200]	; (8003b98 <TIM_Base_SetConfig+0x130>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d023      	beq.n	8003b1a <TIM_Base_SetConfig+0xb2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a31      	ldr	r2, [pc, #196]	; (8003b9c <TIM_Base_SetConfig+0x134>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d01f      	beq.n	8003b1a <TIM_Base_SetConfig+0xb2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a30      	ldr	r2, [pc, #192]	; (8003ba0 <TIM_Base_SetConfig+0x138>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d01b      	beq.n	8003b1a <TIM_Base_SetConfig+0xb2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a2f      	ldr	r2, [pc, #188]	; (8003ba4 <TIM_Base_SetConfig+0x13c>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d017      	beq.n	8003b1a <TIM_Base_SetConfig+0xb2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a2e      	ldr	r2, [pc, #184]	; (8003ba8 <TIM_Base_SetConfig+0x140>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d013      	beq.n	8003b1a <TIM_Base_SetConfig+0xb2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a2d      	ldr	r2, [pc, #180]	; (8003bac <TIM_Base_SetConfig+0x144>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d00f      	beq.n	8003b1a <TIM_Base_SetConfig+0xb2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a2c      	ldr	r2, [pc, #176]	; (8003bb0 <TIM_Base_SetConfig+0x148>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d00b      	beq.n	8003b1a <TIM_Base_SetConfig+0xb2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a2b      	ldr	r2, [pc, #172]	; (8003bb4 <TIM_Base_SetConfig+0x14c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d007      	beq.n	8003b1a <TIM_Base_SetConfig+0xb2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a2a      	ldr	r2, [pc, #168]	; (8003bb8 <TIM_Base_SetConfig+0x150>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d003      	beq.n	8003b1a <TIM_Base_SetConfig+0xb2>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a29      	ldr	r2, [pc, #164]	; (8003bbc <TIM_Base_SetConfig+0x154>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d108      	bne.n	8003b2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a10      	ldr	r2, [pc, #64]	; (8003b94 <TIM_Base_SetConfig+0x12c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d003      	beq.n	8003b60 <TIM_Base_SetConfig+0xf8>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a12      	ldr	r2, [pc, #72]	; (8003ba4 <TIM_Base_SetConfig+0x13c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d103      	bne.n	8003b68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	691a      	ldr	r2, [r3, #16]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d105      	bne.n	8003b86 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	f023 0201 	bic.w	r2, r3, #1
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	611a      	str	r2, [r3, #16]
  }
}
 8003b86:	bf00      	nop
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	40010000 	.word	0x40010000
 8003b98:	40000400 	.word	0x40000400
 8003b9c:	40000800 	.word	0x40000800
 8003ba0:	40000c00 	.word	0x40000c00
 8003ba4:	40010400 	.word	0x40010400
 8003ba8:	40014000 	.word	0x40014000
 8003bac:	40014400 	.word	0x40014400
 8003bb0:	40014800 	.word	0x40014800
 8003bb4:	40001800 	.word	0x40001800
 8003bb8:	40001c00 	.word	0x40001c00
 8003bbc:	40002000 	.word	0x40002000

08003bc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e042      	b.n	8003c80 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d106      	bne.n	8003c14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7fd fd1a 	bl	8001648 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2224      	movs	r2, #36	; 0x24
 8003c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68da      	ldr	r2, [r3, #12]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 f82b 	bl	8003c88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	695a      	ldr	r2, [r3, #20]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68da      	ldr	r2, [r3, #12]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3708      	adds	r7, #8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c8c:	b0c0      	sub	sp, #256	; 0x100
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca4:	68d9      	ldr	r1, [r3, #12]
 8003ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	ea40 0301 	orr.w	r3, r0, r1
 8003cb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ce0:	f021 010c 	bic.w	r1, r1, #12
 8003ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cee:	430b      	orrs	r3, r1
 8003cf0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d02:	6999      	ldr	r1, [r3, #24]
 8003d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	ea40 0301 	orr.w	r3, r0, r1
 8003d0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	4b8f      	ldr	r3, [pc, #572]	; (8003f54 <UART_SetConfig+0x2cc>)
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d005      	beq.n	8003d28 <UART_SetConfig+0xa0>
 8003d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	4b8d      	ldr	r3, [pc, #564]	; (8003f58 <UART_SetConfig+0x2d0>)
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d104      	bne.n	8003d32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d28:	f7fe ffa8 	bl	8002c7c <HAL_RCC_GetPCLK2Freq>
 8003d2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003d30:	e003      	b.n	8003d3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d32:	f7fe ff8f 	bl	8002c54 <HAL_RCC_GetPCLK1Freq>
 8003d36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d44:	f040 810c 	bne.w	8003f60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d5a:	4622      	mov	r2, r4
 8003d5c:	462b      	mov	r3, r5
 8003d5e:	1891      	adds	r1, r2, r2
 8003d60:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d62:	415b      	adcs	r3, r3
 8003d64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d6a:	4621      	mov	r1, r4
 8003d6c:	eb12 0801 	adds.w	r8, r2, r1
 8003d70:	4629      	mov	r1, r5
 8003d72:	eb43 0901 	adc.w	r9, r3, r1
 8003d76:	f04f 0200 	mov.w	r2, #0
 8003d7a:	f04f 0300 	mov.w	r3, #0
 8003d7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d8a:	4690      	mov	r8, r2
 8003d8c:	4699      	mov	r9, r3
 8003d8e:	4623      	mov	r3, r4
 8003d90:	eb18 0303 	adds.w	r3, r8, r3
 8003d94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d98:	462b      	mov	r3, r5
 8003d9a:	eb49 0303 	adc.w	r3, r9, r3
 8003d9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003dae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003db2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003db6:	460b      	mov	r3, r1
 8003db8:	18db      	adds	r3, r3, r3
 8003dba:	653b      	str	r3, [r7, #80]	; 0x50
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	eb42 0303 	adc.w	r3, r2, r3
 8003dc2:	657b      	str	r3, [r7, #84]	; 0x54
 8003dc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003dc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003dcc:	f7fc fa2a 	bl	8000224 <__aeabi_uldivmod>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4b61      	ldr	r3, [pc, #388]	; (8003f5c <UART_SetConfig+0x2d4>)
 8003dd6:	fba3 2302 	umull	r2, r3, r3, r2
 8003dda:	095b      	lsrs	r3, r3, #5
 8003ddc:	011c      	lsls	r4, r3, #4
 8003dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003de2:	2200      	movs	r2, #0
 8003de4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003de8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003dec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003df0:	4642      	mov	r2, r8
 8003df2:	464b      	mov	r3, r9
 8003df4:	1891      	adds	r1, r2, r2
 8003df6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003df8:	415b      	adcs	r3, r3
 8003dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e00:	4641      	mov	r1, r8
 8003e02:	eb12 0a01 	adds.w	sl, r2, r1
 8003e06:	4649      	mov	r1, r9
 8003e08:	eb43 0b01 	adc.w	fp, r3, r1
 8003e0c:	f04f 0200 	mov.w	r2, #0
 8003e10:	f04f 0300 	mov.w	r3, #0
 8003e14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e20:	4692      	mov	sl, r2
 8003e22:	469b      	mov	fp, r3
 8003e24:	4643      	mov	r3, r8
 8003e26:	eb1a 0303 	adds.w	r3, sl, r3
 8003e2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e2e:	464b      	mov	r3, r9
 8003e30:	eb4b 0303 	adc.w	r3, fp, r3
 8003e34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	18db      	adds	r3, r3, r3
 8003e50:	643b      	str	r3, [r7, #64]	; 0x40
 8003e52:	4613      	mov	r3, r2
 8003e54:	eb42 0303 	adc.w	r3, r2, r3
 8003e58:	647b      	str	r3, [r7, #68]	; 0x44
 8003e5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e62:	f7fc f9df 	bl	8000224 <__aeabi_uldivmod>
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	4b3b      	ldr	r3, [pc, #236]	; (8003f5c <UART_SetConfig+0x2d4>)
 8003e6e:	fba3 2301 	umull	r2, r3, r3, r1
 8003e72:	095b      	lsrs	r3, r3, #5
 8003e74:	2264      	movs	r2, #100	; 0x64
 8003e76:	fb02 f303 	mul.w	r3, r2, r3
 8003e7a:	1acb      	subs	r3, r1, r3
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e82:	4b36      	ldr	r3, [pc, #216]	; (8003f5c <UART_SetConfig+0x2d4>)
 8003e84:	fba3 2302 	umull	r2, r3, r3, r2
 8003e88:	095b      	lsrs	r3, r3, #5
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e90:	441c      	add	r4, r3
 8003e92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e96:	2200      	movs	r2, #0
 8003e98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ea0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ea4:	4642      	mov	r2, r8
 8003ea6:	464b      	mov	r3, r9
 8003ea8:	1891      	adds	r1, r2, r2
 8003eaa:	63b9      	str	r1, [r7, #56]	; 0x38
 8003eac:	415b      	adcs	r3, r3
 8003eae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003eb4:	4641      	mov	r1, r8
 8003eb6:	1851      	adds	r1, r2, r1
 8003eb8:	6339      	str	r1, [r7, #48]	; 0x30
 8003eba:	4649      	mov	r1, r9
 8003ebc:	414b      	adcs	r3, r1
 8003ebe:	637b      	str	r3, [r7, #52]	; 0x34
 8003ec0:	f04f 0200 	mov.w	r2, #0
 8003ec4:	f04f 0300 	mov.w	r3, #0
 8003ec8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ecc:	4659      	mov	r1, fp
 8003ece:	00cb      	lsls	r3, r1, #3
 8003ed0:	4651      	mov	r1, sl
 8003ed2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ed6:	4651      	mov	r1, sl
 8003ed8:	00ca      	lsls	r2, r1, #3
 8003eda:	4610      	mov	r0, r2
 8003edc:	4619      	mov	r1, r3
 8003ede:	4603      	mov	r3, r0
 8003ee0:	4642      	mov	r2, r8
 8003ee2:	189b      	adds	r3, r3, r2
 8003ee4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ee8:	464b      	mov	r3, r9
 8003eea:	460a      	mov	r2, r1
 8003eec:	eb42 0303 	adc.w	r3, r2, r3
 8003ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f08:	460b      	mov	r3, r1
 8003f0a:	18db      	adds	r3, r3, r3
 8003f0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f0e:	4613      	mov	r3, r2
 8003f10:	eb42 0303 	adc.w	r3, r2, r3
 8003f14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f1e:	f7fc f981 	bl	8000224 <__aeabi_uldivmod>
 8003f22:	4602      	mov	r2, r0
 8003f24:	460b      	mov	r3, r1
 8003f26:	4b0d      	ldr	r3, [pc, #52]	; (8003f5c <UART_SetConfig+0x2d4>)
 8003f28:	fba3 1302 	umull	r1, r3, r3, r2
 8003f2c:	095b      	lsrs	r3, r3, #5
 8003f2e:	2164      	movs	r1, #100	; 0x64
 8003f30:	fb01 f303 	mul.w	r3, r1, r3
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	3332      	adds	r3, #50	; 0x32
 8003f3a:	4a08      	ldr	r2, [pc, #32]	; (8003f5c <UART_SetConfig+0x2d4>)
 8003f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f40:	095b      	lsrs	r3, r3, #5
 8003f42:	f003 0207 	and.w	r2, r3, #7
 8003f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4422      	add	r2, r4
 8003f4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f50:	e106      	b.n	8004160 <UART_SetConfig+0x4d8>
 8003f52:	bf00      	nop
 8003f54:	40011000 	.word	0x40011000
 8003f58:	40011400 	.word	0x40011400
 8003f5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f64:	2200      	movs	r2, #0
 8003f66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f72:	4642      	mov	r2, r8
 8003f74:	464b      	mov	r3, r9
 8003f76:	1891      	adds	r1, r2, r2
 8003f78:	6239      	str	r1, [r7, #32]
 8003f7a:	415b      	adcs	r3, r3
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f82:	4641      	mov	r1, r8
 8003f84:	1854      	adds	r4, r2, r1
 8003f86:	4649      	mov	r1, r9
 8003f88:	eb43 0501 	adc.w	r5, r3, r1
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	f04f 0300 	mov.w	r3, #0
 8003f94:	00eb      	lsls	r3, r5, #3
 8003f96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f9a:	00e2      	lsls	r2, r4, #3
 8003f9c:	4614      	mov	r4, r2
 8003f9e:	461d      	mov	r5, r3
 8003fa0:	4643      	mov	r3, r8
 8003fa2:	18e3      	adds	r3, r4, r3
 8003fa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003fa8:	464b      	mov	r3, r9
 8003faa:	eb45 0303 	adc.w	r3, r5, r3
 8003fae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003fbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003fc2:	f04f 0200 	mov.w	r2, #0
 8003fc6:	f04f 0300 	mov.w	r3, #0
 8003fca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003fce:	4629      	mov	r1, r5
 8003fd0:	008b      	lsls	r3, r1, #2
 8003fd2:	4621      	mov	r1, r4
 8003fd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fd8:	4621      	mov	r1, r4
 8003fda:	008a      	lsls	r2, r1, #2
 8003fdc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003fe0:	f7fc f920 	bl	8000224 <__aeabi_uldivmod>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4b60      	ldr	r3, [pc, #384]	; (800416c <UART_SetConfig+0x4e4>)
 8003fea:	fba3 2302 	umull	r2, r3, r3, r2
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	011c      	lsls	r4, r3, #4
 8003ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ffc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004000:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004004:	4642      	mov	r2, r8
 8004006:	464b      	mov	r3, r9
 8004008:	1891      	adds	r1, r2, r2
 800400a:	61b9      	str	r1, [r7, #24]
 800400c:	415b      	adcs	r3, r3
 800400e:	61fb      	str	r3, [r7, #28]
 8004010:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004014:	4641      	mov	r1, r8
 8004016:	1851      	adds	r1, r2, r1
 8004018:	6139      	str	r1, [r7, #16]
 800401a:	4649      	mov	r1, r9
 800401c:	414b      	adcs	r3, r1
 800401e:	617b      	str	r3, [r7, #20]
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	f04f 0300 	mov.w	r3, #0
 8004028:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800402c:	4659      	mov	r1, fp
 800402e:	00cb      	lsls	r3, r1, #3
 8004030:	4651      	mov	r1, sl
 8004032:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004036:	4651      	mov	r1, sl
 8004038:	00ca      	lsls	r2, r1, #3
 800403a:	4610      	mov	r0, r2
 800403c:	4619      	mov	r1, r3
 800403e:	4603      	mov	r3, r0
 8004040:	4642      	mov	r2, r8
 8004042:	189b      	adds	r3, r3, r2
 8004044:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004048:	464b      	mov	r3, r9
 800404a:	460a      	mov	r2, r1
 800404c:	eb42 0303 	adc.w	r3, r2, r3
 8004050:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	67bb      	str	r3, [r7, #120]	; 0x78
 800405e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	f04f 0300 	mov.w	r3, #0
 8004068:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800406c:	4649      	mov	r1, r9
 800406e:	008b      	lsls	r3, r1, #2
 8004070:	4641      	mov	r1, r8
 8004072:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004076:	4641      	mov	r1, r8
 8004078:	008a      	lsls	r2, r1, #2
 800407a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800407e:	f7fc f8d1 	bl	8000224 <__aeabi_uldivmod>
 8004082:	4602      	mov	r2, r0
 8004084:	460b      	mov	r3, r1
 8004086:	4611      	mov	r1, r2
 8004088:	4b38      	ldr	r3, [pc, #224]	; (800416c <UART_SetConfig+0x4e4>)
 800408a:	fba3 2301 	umull	r2, r3, r3, r1
 800408e:	095b      	lsrs	r3, r3, #5
 8004090:	2264      	movs	r2, #100	; 0x64
 8004092:	fb02 f303 	mul.w	r3, r2, r3
 8004096:	1acb      	subs	r3, r1, r3
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	3332      	adds	r3, #50	; 0x32
 800409c:	4a33      	ldr	r2, [pc, #204]	; (800416c <UART_SetConfig+0x4e4>)
 800409e:	fba2 2303 	umull	r2, r3, r2, r3
 80040a2:	095b      	lsrs	r3, r3, #5
 80040a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040a8:	441c      	add	r4, r3
 80040aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040ae:	2200      	movs	r2, #0
 80040b0:	673b      	str	r3, [r7, #112]	; 0x70
 80040b2:	677a      	str	r2, [r7, #116]	; 0x74
 80040b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80040b8:	4642      	mov	r2, r8
 80040ba:	464b      	mov	r3, r9
 80040bc:	1891      	adds	r1, r2, r2
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	415b      	adcs	r3, r3
 80040c2:	60fb      	str	r3, [r7, #12]
 80040c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040c8:	4641      	mov	r1, r8
 80040ca:	1851      	adds	r1, r2, r1
 80040cc:	6039      	str	r1, [r7, #0]
 80040ce:	4649      	mov	r1, r9
 80040d0:	414b      	adcs	r3, r1
 80040d2:	607b      	str	r3, [r7, #4]
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	f04f 0300 	mov.w	r3, #0
 80040dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040e0:	4659      	mov	r1, fp
 80040e2:	00cb      	lsls	r3, r1, #3
 80040e4:	4651      	mov	r1, sl
 80040e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040ea:	4651      	mov	r1, sl
 80040ec:	00ca      	lsls	r2, r1, #3
 80040ee:	4610      	mov	r0, r2
 80040f0:	4619      	mov	r1, r3
 80040f2:	4603      	mov	r3, r0
 80040f4:	4642      	mov	r2, r8
 80040f6:	189b      	adds	r3, r3, r2
 80040f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80040fa:	464b      	mov	r3, r9
 80040fc:	460a      	mov	r2, r1
 80040fe:	eb42 0303 	adc.w	r3, r2, r3
 8004102:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	663b      	str	r3, [r7, #96]	; 0x60
 800410e:	667a      	str	r2, [r7, #100]	; 0x64
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800411c:	4649      	mov	r1, r9
 800411e:	008b      	lsls	r3, r1, #2
 8004120:	4641      	mov	r1, r8
 8004122:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004126:	4641      	mov	r1, r8
 8004128:	008a      	lsls	r2, r1, #2
 800412a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800412e:	f7fc f879 	bl	8000224 <__aeabi_uldivmod>
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	4b0d      	ldr	r3, [pc, #52]	; (800416c <UART_SetConfig+0x4e4>)
 8004138:	fba3 1302 	umull	r1, r3, r3, r2
 800413c:	095b      	lsrs	r3, r3, #5
 800413e:	2164      	movs	r1, #100	; 0x64
 8004140:	fb01 f303 	mul.w	r3, r1, r3
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	3332      	adds	r3, #50	; 0x32
 800414a:	4a08      	ldr	r2, [pc, #32]	; (800416c <UART_SetConfig+0x4e4>)
 800414c:	fba2 2303 	umull	r2, r3, r2, r3
 8004150:	095b      	lsrs	r3, r3, #5
 8004152:	f003 020f 	and.w	r2, r3, #15
 8004156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4422      	add	r2, r4
 800415e:	609a      	str	r2, [r3, #8]
}
 8004160:	bf00      	nop
 8004162:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004166:	46bd      	mov	sp, r7
 8004168:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800416c:	51eb851f 	.word	0x51eb851f

08004170 <__NVIC_SetPriority>:
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	4603      	mov	r3, r0
 8004178:	6039      	str	r1, [r7, #0]
 800417a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800417c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004180:	2b00      	cmp	r3, #0
 8004182:	db0a      	blt.n	800419a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	b2da      	uxtb	r2, r3
 8004188:	490c      	ldr	r1, [pc, #48]	; (80041bc <__NVIC_SetPriority+0x4c>)
 800418a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800418e:	0112      	lsls	r2, r2, #4
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	440b      	add	r3, r1
 8004194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004198:	e00a      	b.n	80041b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	b2da      	uxtb	r2, r3
 800419e:	4908      	ldr	r1, [pc, #32]	; (80041c0 <__NVIC_SetPriority+0x50>)
 80041a0:	79fb      	ldrb	r3, [r7, #7]
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	3b04      	subs	r3, #4
 80041a8:	0112      	lsls	r2, r2, #4
 80041aa:	b2d2      	uxtb	r2, r2
 80041ac:	440b      	add	r3, r1
 80041ae:	761a      	strb	r2, [r3, #24]
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	e000e100 	.word	0xe000e100
 80041c0:	e000ed00 	.word	0xe000ed00

080041c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80041c8:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <SysTick_Handler+0x1c>)
 80041ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80041cc:	f001 fdd2 	bl	8005d74 <xTaskGetSchedulerState>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d001      	beq.n	80041da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80041d6:	f002 fbb7 	bl	8006948 <xPortSysTickHandler>
  }
}
 80041da:	bf00      	nop
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	e000e010 	.word	0xe000e010

080041e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80041e8:	2100      	movs	r1, #0
 80041ea:	f06f 0004 	mvn.w	r0, #4
 80041ee:	f7ff ffbf 	bl	8004170 <__NVIC_SetPriority>
#endif
}
 80041f2:	bf00      	nop
 80041f4:	bd80      	pop	{r7, pc}
	...

080041f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041fe:	f3ef 8305 	mrs	r3, IPSR
 8004202:	603b      	str	r3, [r7, #0]
  return(result);
 8004204:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800420a:	f06f 0305 	mvn.w	r3, #5
 800420e:	607b      	str	r3, [r7, #4]
 8004210:	e00c      	b.n	800422c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004212:	4b0a      	ldr	r3, [pc, #40]	; (800423c <osKernelInitialize+0x44>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d105      	bne.n	8004226 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800421a:	4b08      	ldr	r3, [pc, #32]	; (800423c <osKernelInitialize+0x44>)
 800421c:	2201      	movs	r2, #1
 800421e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004220:	2300      	movs	r3, #0
 8004222:	607b      	str	r3, [r7, #4]
 8004224:	e002      	b.n	800422c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004226:	f04f 33ff 	mov.w	r3, #4294967295
 800422a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800422c:	687b      	ldr	r3, [r7, #4]
}
 800422e:	4618      	mov	r0, r3
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	20000560 	.word	0x20000560

08004240 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004246:	f3ef 8305 	mrs	r3, IPSR
 800424a:	603b      	str	r3, [r7, #0]
  return(result);
 800424c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004252:	f06f 0305 	mvn.w	r3, #5
 8004256:	607b      	str	r3, [r7, #4]
 8004258:	e010      	b.n	800427c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800425a:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <osKernelStart+0x48>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d109      	bne.n	8004276 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004262:	f7ff ffbf 	bl	80041e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004266:	4b08      	ldr	r3, [pc, #32]	; (8004288 <osKernelStart+0x48>)
 8004268:	2202      	movs	r2, #2
 800426a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800426c:	f001 f928 	bl	80054c0 <vTaskStartScheduler>
      stat = osOK;
 8004270:	2300      	movs	r3, #0
 8004272:	607b      	str	r3, [r7, #4]
 8004274:	e002      	b.n	800427c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004276:	f04f 33ff 	mov.w	r3, #4294967295
 800427a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800427c:	687b      	ldr	r3, [r7, #4]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3708      	adds	r7, #8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	20000560 	.word	0x20000560

0800428c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004292:	f3ef 8305 	mrs	r3, IPSR
 8004296:	603b      	str	r3, [r7, #0]
  return(result);
 8004298:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800429e:	f001 fa31 	bl	8005704 <xTaskGetTickCountFromISR>
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	e002      	b.n	80042ac <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80042a6:	f001 fa1d 	bl	80056e4 <xTaskGetTickCount>
 80042aa:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80042ac:	687b      	ldr	r3, [r7, #4]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b08e      	sub	sp, #56	; 0x38
 80042ba:	af04      	add	r7, sp, #16
 80042bc:	60f8      	str	r0, [r7, #12]
 80042be:	60b9      	str	r1, [r7, #8]
 80042c0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042c6:	f3ef 8305 	mrs	r3, IPSR
 80042ca:	617b      	str	r3, [r7, #20]
  return(result);
 80042cc:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d17e      	bne.n	80043d0 <osThreadNew+0x11a>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d07b      	beq.n	80043d0 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80042d8:	2380      	movs	r3, #128	; 0x80
 80042da:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80042dc:	2318      	movs	r3, #24
 80042de:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80042e0:	2300      	movs	r3, #0
 80042e2:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80042e4:	f04f 33ff 	mov.w	r3, #4294967295
 80042e8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d045      	beq.n	800437c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d002      	beq.n	80042fe <osThreadNew+0x48>
        name = attr->name;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d008      	beq.n	8004324 <osThreadNew+0x6e>
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	2b38      	cmp	r3, #56	; 0x38
 8004316:	d805      	bhi.n	8004324 <osThreadNew+0x6e>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <osThreadNew+0x72>
        return (NULL);
 8004324:	2300      	movs	r3, #0
 8004326:	e054      	b.n	80043d2 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	089b      	lsrs	r3, r3, #2
 8004336:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00e      	beq.n	800435e <osThreadNew+0xa8>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	2b5b      	cmp	r3, #91	; 0x5b
 8004346:	d90a      	bls.n	800435e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800434c:	2b00      	cmp	r3, #0
 800434e:	d006      	beq.n	800435e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d002      	beq.n	800435e <osThreadNew+0xa8>
        mem = 1;
 8004358:	2301      	movs	r3, #1
 800435a:	61bb      	str	r3, [r7, #24]
 800435c:	e010      	b.n	8004380 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10c      	bne.n	8004380 <osThreadNew+0xca>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d108      	bne.n	8004380 <osThreadNew+0xca>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d104      	bne.n	8004380 <osThreadNew+0xca>
          mem = 0;
 8004376:	2300      	movs	r3, #0
 8004378:	61bb      	str	r3, [r7, #24]
 800437a:	e001      	b.n	8004380 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800437c:	2300      	movs	r3, #0
 800437e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d110      	bne.n	80043a8 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800438e:	9202      	str	r2, [sp, #8]
 8004390:	9301      	str	r3, [sp, #4]
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	6a3a      	ldr	r2, [r7, #32]
 800439a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f000 feb9 	bl	8005114 <xTaskCreateStatic>
 80043a2:	4603      	mov	r3, r0
 80043a4:	613b      	str	r3, [r7, #16]
 80043a6:	e013      	b.n	80043d0 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d110      	bne.n	80043d0 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	f107 0310 	add.w	r3, r7, #16
 80043b6:	9301      	str	r3, [sp, #4]
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 ff04 	bl	80051ce <xTaskCreate>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d001      	beq.n	80043d0 <osThreadNew+0x11a>
            hTask = NULL;
 80043cc:	2300      	movs	r3, #0
 80043ce:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80043d0:	693b      	ldr	r3, [r7, #16]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3728      	adds	r7, #40	; 0x28
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80043da:	b580      	push	{r7, lr}
 80043dc:	b084      	sub	sp, #16
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043e2:	f3ef 8305 	mrs	r3, IPSR
 80043e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80043e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <osDelay+0x1c>
    stat = osErrorISR;
 80043ee:	f06f 0305 	mvn.w	r3, #5
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	e007      	b.n	8004406 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d002      	beq.n	8004406 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f001 f829 	bl	8005458 <vTaskDelay>
    }
  }

  return (stat);
 8004406:	68fb      	ldr	r3, [r7, #12]
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004410:	b580      	push	{r7, lr}
 8004412:	b08a      	sub	sp, #40	; 0x28
 8004414:	af02      	add	r7, sp, #8
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800441c:	2300      	movs	r3, #0
 800441e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004420:	f3ef 8305 	mrs	r3, IPSR
 8004424:	613b      	str	r3, [r7, #16]
  return(result);
 8004426:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004428:	2b00      	cmp	r3, #0
 800442a:	d15f      	bne.n	80044ec <osMessageQueueNew+0xdc>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d05c      	beq.n	80044ec <osMessageQueueNew+0xdc>
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d059      	beq.n	80044ec <osMessageQueueNew+0xdc>
    mem = -1;
 8004438:	f04f 33ff 	mov.w	r3, #4294967295
 800443c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d029      	beq.n	8004498 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d012      	beq.n	8004472 <osMessageQueueNew+0x62>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	2b4f      	cmp	r3, #79	; 0x4f
 8004452:	d90e      	bls.n	8004472 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	695a      	ldr	r2, [r3, #20]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	68b9      	ldr	r1, [r7, #8]
 8004464:	fb01 f303 	mul.w	r3, r1, r3
 8004468:	429a      	cmp	r2, r3
 800446a:	d302      	bcc.n	8004472 <osMessageQueueNew+0x62>
        mem = 1;
 800446c:	2301      	movs	r3, #1
 800446e:	61bb      	str	r3, [r7, #24]
 8004470:	e014      	b.n	800449c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d110      	bne.n	800449c <osMessageQueueNew+0x8c>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10c      	bne.n	800449c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004486:	2b00      	cmp	r3, #0
 8004488:	d108      	bne.n	800449c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d104      	bne.n	800449c <osMessageQueueNew+0x8c>
          mem = 0;
 8004492:	2300      	movs	r3, #0
 8004494:	61bb      	str	r3, [r7, #24]
 8004496:	e001      	b.n	800449c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004498:	2300      	movs	r3, #0
 800449a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d10b      	bne.n	80044ba <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691a      	ldr	r2, [r3, #16]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	2100      	movs	r1, #0
 80044ac:	9100      	str	r1, [sp, #0]
 80044ae:	68b9      	ldr	r1, [r7, #8]
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 f971 	bl	8004798 <xQueueGenericCreateStatic>
 80044b6:	61f8      	str	r0, [r7, #28]
 80044b8:	e008      	b.n	80044cc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d105      	bne.n	80044cc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80044c0:	2200      	movs	r2, #0
 80044c2:	68b9      	ldr	r1, [r7, #8]
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 f9df 	bl	8004888 <xQueueGenericCreate>
 80044ca:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00c      	beq.n	80044ec <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d003      	beq.n	80044e0 <osMessageQueueNew+0xd0>
        name = attr->name;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	e001      	b.n	80044e4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80044e0:	2300      	movs	r3, #0
 80044e2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80044e4:	6979      	ldr	r1, [r7, #20]
 80044e6:	69f8      	ldr	r0, [r7, #28]
 80044e8:	f000 fdb6 	bl	8005058 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80044ec:	69fb      	ldr	r3, [r7, #28]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3720      	adds	r7, #32
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
	...

080044f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4a07      	ldr	r2, [pc, #28]	; (8004524 <vApplicationGetIdleTaskMemory+0x2c>)
 8004508:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	4a06      	ldr	r2, [pc, #24]	; (8004528 <vApplicationGetIdleTaskMemory+0x30>)
 800450e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2280      	movs	r2, #128	; 0x80
 8004514:	601a      	str	r2, [r3, #0]
}
 8004516:	bf00      	nop
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	20000564 	.word	0x20000564
 8004528:	200005c0 	.word	0x200005c0

0800452c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4a07      	ldr	r2, [pc, #28]	; (8004558 <vApplicationGetTimerTaskMemory+0x2c>)
 800453c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	4a06      	ldr	r2, [pc, #24]	; (800455c <vApplicationGetTimerTaskMemory+0x30>)
 8004542:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f44f 7280 	mov.w	r2, #256	; 0x100
 800454a:	601a      	str	r2, [r3, #0]
}
 800454c:	bf00      	nop
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	200007c0 	.word	0x200007c0
 800455c:	2000081c 	.word	0x2000081c

08004560 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f103 0208 	add.w	r2, r3, #8
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f04f 32ff 	mov.w	r2, #4294967295
 8004578:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f103 0208 	add.w	r2, r3, #8
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f103 0208 	add.w	r2, r3, #8
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80045ae:	bf00      	nop
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr

080045ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045ba:	b480      	push	{r7}
 80045bc:	b085      	sub	sp, #20
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
 80045c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	1c5a      	adds	r2, r3, #1
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	601a      	str	r2, [r3, #0]
}
 80045f6:	bf00      	nop
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004602:	b480      	push	{r7}
 8004604:	b085      	sub	sp, #20
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
 800460a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004618:	d103      	bne.n	8004622 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	e00c      	b.n	800463c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	3308      	adds	r3, #8
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	e002      	b.n	8004630 <vListInsert+0x2e>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	429a      	cmp	r2, r3
 800463a:	d2f6      	bcs.n	800462a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	601a      	str	r2, [r3, #0]
}
 8004668:	bf00      	nop
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6892      	ldr	r2, [r2, #8]
 800468a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6852      	ldr	r2, [r2, #4]
 8004694:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	429a      	cmp	r2, r3
 800469e:	d103      	bne.n	80046a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689a      	ldr	r2, [r3, #8]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	1e5a      	subs	r2, r3, #1
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10a      	bne.n	80046f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80046dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e0:	f383 8811 	msr	BASEPRI, r3
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80046ee:	bf00      	nop
 80046f0:	e7fe      	b.n	80046f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80046f2:	f002 f897 	bl	8006824 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046fe:	68f9      	ldr	r1, [r7, #12]
 8004700:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004702:	fb01 f303 	mul.w	r3, r1, r3
 8004706:	441a      	add	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004722:	3b01      	subs	r3, #1
 8004724:	68f9      	ldr	r1, [r7, #12]
 8004726:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004728:	fb01 f303 	mul.w	r3, r1, r3
 800472c:	441a      	add	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	22ff      	movs	r2, #255	; 0xff
 8004736:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	22ff      	movs	r2, #255	; 0xff
 800473e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d114      	bne.n	8004772 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d01a      	beq.n	8004786 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3310      	adds	r3, #16
 8004754:	4618      	mov	r0, r3
 8004756:	f001 f94f 	bl	80059f8 <xTaskRemoveFromEventList>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d012      	beq.n	8004786 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004760:	4b0c      	ldr	r3, [pc, #48]	; (8004794 <xQueueGenericReset+0xcc>)
 8004762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	f3bf 8f6f 	isb	sy
 8004770:	e009      	b.n	8004786 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	3310      	adds	r3, #16
 8004776:	4618      	mov	r0, r3
 8004778:	f7ff fef2 	bl	8004560 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	3324      	adds	r3, #36	; 0x24
 8004780:	4618      	mov	r0, r3
 8004782:	f7ff feed 	bl	8004560 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004786:	f002 f87d 	bl	8006884 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800478a:	2301      	movs	r3, #1
}
 800478c:	4618      	mov	r0, r3
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	e000ed04 	.word	0xe000ed04

08004798 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004798:	b580      	push	{r7, lr}
 800479a:	b08e      	sub	sp, #56	; 0x38
 800479c:	af02      	add	r7, sp, #8
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
 80047a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10a      	bne.n	80047c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80047ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80047be:	bf00      	nop
 80047c0:	e7fe      	b.n	80047c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10a      	bne.n	80047de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80047c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047cc:	f383 8811 	msr	BASEPRI, r3
 80047d0:	f3bf 8f6f 	isb	sy
 80047d4:	f3bf 8f4f 	dsb	sy
 80047d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80047da:	bf00      	nop
 80047dc:	e7fe      	b.n	80047dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d002      	beq.n	80047ea <xQueueGenericCreateStatic+0x52>
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <xQueueGenericCreateStatic+0x56>
 80047ea:	2301      	movs	r3, #1
 80047ec:	e000      	b.n	80047f0 <xQueueGenericCreateStatic+0x58>
 80047ee:	2300      	movs	r3, #0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10a      	bne.n	800480a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80047f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f8:	f383 8811 	msr	BASEPRI, r3
 80047fc:	f3bf 8f6f 	isb	sy
 8004800:	f3bf 8f4f 	dsb	sy
 8004804:	623b      	str	r3, [r7, #32]
}
 8004806:	bf00      	nop
 8004808:	e7fe      	b.n	8004808 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d102      	bne.n	8004816 <xQueueGenericCreateStatic+0x7e>
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <xQueueGenericCreateStatic+0x82>
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <xQueueGenericCreateStatic+0x84>
 800481a:	2300      	movs	r3, #0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10a      	bne.n	8004836 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	61fb      	str	r3, [r7, #28]
}
 8004832:	bf00      	nop
 8004834:	e7fe      	b.n	8004834 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004836:	2350      	movs	r3, #80	; 0x50
 8004838:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	2b50      	cmp	r3, #80	; 0x50
 800483e:	d00a      	beq.n	8004856 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004844:	f383 8811 	msr	BASEPRI, r3
 8004848:	f3bf 8f6f 	isb	sy
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	61bb      	str	r3, [r7, #24]
}
 8004852:	bf00      	nop
 8004854:	e7fe      	b.n	8004854 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004856:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800485c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00d      	beq.n	800487e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800486a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800486e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	4613      	mov	r3, r2
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	68b9      	ldr	r1, [r7, #8]
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 f83f 	bl	80048fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800487e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004880:	4618      	mov	r0, r3
 8004882:	3730      	adds	r7, #48	; 0x30
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004888:	b580      	push	{r7, lr}
 800488a:	b08a      	sub	sp, #40	; 0x28
 800488c:	af02      	add	r7, sp, #8
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	4613      	mov	r3, r2
 8004894:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10a      	bne.n	80048b2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800489c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a0:	f383 8811 	msr	BASEPRI, r3
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	f3bf 8f4f 	dsb	sy
 80048ac:	613b      	str	r3, [r7, #16]
}
 80048ae:	bf00      	nop
 80048b0:	e7fe      	b.n	80048b0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	fb02 f303 	mul.w	r3, r2, r3
 80048ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	3350      	adds	r3, #80	; 0x50
 80048c0:	4618      	mov	r0, r3
 80048c2:	f002 f8d1 	bl	8006a68 <pvPortMalloc>
 80048c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d011      	beq.n	80048f2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	3350      	adds	r3, #80	; 0x50
 80048d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80048e0:	79fa      	ldrb	r2, [r7, #7]
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	4613      	mov	r3, r2
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	68b9      	ldr	r1, [r7, #8]
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 f805 	bl	80048fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80048f2:	69bb      	ldr	r3, [r7, #24]
	}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3720      	adds	r7, #32
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d103      	bne.n	8004918 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	601a      	str	r2, [r3, #0]
 8004916:	e002      	b.n	800491e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800492a:	2101      	movs	r1, #1
 800492c:	69b8      	ldr	r0, [r7, #24]
 800492e:	f7ff fecb 	bl	80046c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	78fa      	ldrb	r2, [r7, #3]
 8004936:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800493a:	bf00      	nop
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
	...

08004944 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b08e      	sub	sp, #56	; 0x38
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
 8004950:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004952:	2300      	movs	r3, #0
 8004954:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800495a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10a      	bne.n	8004976 <xQueueGenericSend+0x32>
	__asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004972:	bf00      	nop
 8004974:	e7fe      	b.n	8004974 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d103      	bne.n	8004984 <xQueueGenericSend+0x40>
 800497c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <xQueueGenericSend+0x44>
 8004984:	2301      	movs	r3, #1
 8004986:	e000      	b.n	800498a <xQueueGenericSend+0x46>
 8004988:	2300      	movs	r3, #0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10a      	bne.n	80049a4 <xQueueGenericSend+0x60>
	__asm volatile
 800498e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004992:	f383 8811 	msr	BASEPRI, r3
 8004996:	f3bf 8f6f 	isb	sy
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80049a0:	bf00      	nop
 80049a2:	e7fe      	b.n	80049a2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d103      	bne.n	80049b2 <xQueueGenericSend+0x6e>
 80049aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d101      	bne.n	80049b6 <xQueueGenericSend+0x72>
 80049b2:	2301      	movs	r3, #1
 80049b4:	e000      	b.n	80049b8 <xQueueGenericSend+0x74>
 80049b6:	2300      	movs	r3, #0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10a      	bne.n	80049d2 <xQueueGenericSend+0x8e>
	__asm volatile
 80049bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c0:	f383 8811 	msr	BASEPRI, r3
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	f3bf 8f4f 	dsb	sy
 80049cc:	623b      	str	r3, [r7, #32]
}
 80049ce:	bf00      	nop
 80049d0:	e7fe      	b.n	80049d0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049d2:	f001 f9cf 	bl	8005d74 <xTaskGetSchedulerState>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d102      	bne.n	80049e2 <xQueueGenericSend+0x9e>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <xQueueGenericSend+0xa2>
 80049e2:	2301      	movs	r3, #1
 80049e4:	e000      	b.n	80049e8 <xQueueGenericSend+0xa4>
 80049e6:	2300      	movs	r3, #0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10a      	bne.n	8004a02 <xQueueGenericSend+0xbe>
	__asm volatile
 80049ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f0:	f383 8811 	msr	BASEPRI, r3
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	61fb      	str	r3, [r7, #28]
}
 80049fe:	bf00      	nop
 8004a00:	e7fe      	b.n	8004a00 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a02:	f001 ff0f 	bl	8006824 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d302      	bcc.n	8004a18 <xQueueGenericSend+0xd4>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d129      	bne.n	8004a6c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	68b9      	ldr	r1, [r7, #8]
 8004a1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a1e:	f000 fa0b 	bl	8004e38 <prvCopyDataToQueue>
 8004a22:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d010      	beq.n	8004a4e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2e:	3324      	adds	r3, #36	; 0x24
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 ffe1 	bl	80059f8 <xTaskRemoveFromEventList>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d013      	beq.n	8004a64 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004a3c:	4b3f      	ldr	r3, [pc, #252]	; (8004b3c <xQueueGenericSend+0x1f8>)
 8004a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	e00a      	b.n	8004a64 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d007      	beq.n	8004a64 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004a54:	4b39      	ldr	r3, [pc, #228]	; (8004b3c <xQueueGenericSend+0x1f8>)
 8004a56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004a64:	f001 ff0e 	bl	8006884 <vPortExitCritical>
				return pdPASS;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e063      	b.n	8004b34 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d103      	bne.n	8004a7a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a72:	f001 ff07 	bl	8006884 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004a76:	2300      	movs	r3, #0
 8004a78:	e05c      	b.n	8004b34 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d106      	bne.n	8004a8e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a80:	f107 0314 	add.w	r3, r7, #20
 8004a84:	4618      	mov	r0, r3
 8004a86:	f001 f81b 	bl	8005ac0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a8e:	f001 fef9 	bl	8006884 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a92:	f000 fd7b 	bl	800558c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a96:	f001 fec5 	bl	8006824 <vPortEnterCritical>
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004aa0:	b25b      	sxtb	r3, r3
 8004aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa6:	d103      	bne.n	8004ab0 <xQueueGenericSend+0x16c>
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ab6:	b25b      	sxtb	r3, r3
 8004ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004abc:	d103      	bne.n	8004ac6 <xQueueGenericSend+0x182>
 8004abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ac6:	f001 fedd 	bl	8006884 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004aca:	1d3a      	adds	r2, r7, #4
 8004acc:	f107 0314 	add.w	r3, r7, #20
 8004ad0:	4611      	mov	r1, r2
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f001 f80a 	bl	8005aec <xTaskCheckForTimeOut>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d124      	bne.n	8004b28 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004ade:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ae0:	f000 faa2 	bl	8005028 <prvIsQueueFull>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d018      	beq.n	8004b1c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aec:	3310      	adds	r3, #16
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	4611      	mov	r1, r2
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 ff30 	bl	8005958 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004af8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004afa:	f000 fa2d 	bl	8004f58 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004afe:	f000 fd53 	bl	80055a8 <xTaskResumeAll>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f47f af7c 	bne.w	8004a02 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004b0a:	4b0c      	ldr	r3, [pc, #48]	; (8004b3c <xQueueGenericSend+0x1f8>)
 8004b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	f3bf 8f4f 	dsb	sy
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	e772      	b.n	8004a02 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b1e:	f000 fa1b 	bl	8004f58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b22:	f000 fd41 	bl	80055a8 <xTaskResumeAll>
 8004b26:	e76c      	b.n	8004a02 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004b28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b2a:	f000 fa15 	bl	8004f58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b2e:	f000 fd3b 	bl	80055a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004b32:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3738      	adds	r7, #56	; 0x38
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	e000ed04 	.word	0xe000ed04

08004b40 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b090      	sub	sp, #64	; 0x40
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10a      	bne.n	8004b6e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5c:	f383 8811 	msr	BASEPRI, r3
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b6a:	bf00      	nop
 8004b6c:	e7fe      	b.n	8004b6c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d103      	bne.n	8004b7c <xQueueGenericSendFromISR+0x3c>
 8004b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d101      	bne.n	8004b80 <xQueueGenericSendFromISR+0x40>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e000      	b.n	8004b82 <xQueueGenericSendFromISR+0x42>
 8004b80:	2300      	movs	r3, #0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10a      	bne.n	8004b9c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8a:	f383 8811 	msr	BASEPRI, r3
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b98:	bf00      	nop
 8004b9a:	e7fe      	b.n	8004b9a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d103      	bne.n	8004baa <xQueueGenericSendFromISR+0x6a>
 8004ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d101      	bne.n	8004bae <xQueueGenericSendFromISR+0x6e>
 8004baa:	2301      	movs	r3, #1
 8004bac:	e000      	b.n	8004bb0 <xQueueGenericSendFromISR+0x70>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10a      	bne.n	8004bca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb8:	f383 8811 	msr	BASEPRI, r3
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	623b      	str	r3, [r7, #32]
}
 8004bc6:	bf00      	nop
 8004bc8:	e7fe      	b.n	8004bc8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004bca:	f001 ff0d 	bl	80069e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004bce:	f3ef 8211 	mrs	r2, BASEPRI
 8004bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd6:	f383 8811 	msr	BASEPRI, r3
 8004bda:	f3bf 8f6f 	isb	sy
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	61fa      	str	r2, [r7, #28]
 8004be4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004be6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004be8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d302      	bcc.n	8004bfc <xQueueGenericSendFromISR+0xbc>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d12f      	bne.n	8004c5c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	68b9      	ldr	r1, [r7, #8]
 8004c10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004c12:	f000 f911 	bl	8004e38 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c16:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1e:	d112      	bne.n	8004c46 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d016      	beq.n	8004c56 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2a:	3324      	adds	r3, #36	; 0x24
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 fee3 	bl	80059f8 <xTaskRemoveFromEventList>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00e      	beq.n	8004c56 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00b      	beq.n	8004c56 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	e007      	b.n	8004c56 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	b25a      	sxtb	r2, r3
 8004c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004c56:	2301      	movs	r3, #1
 8004c58:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004c5a:	e001      	b.n	8004c60 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c62:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004c6a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3740      	adds	r7, #64	; 0x40
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
	...

08004c78 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b08c      	sub	sp, #48	; 0x30
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c84:	2300      	movs	r3, #0
 8004c86:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10a      	bne.n	8004ca8 <xQueueReceive+0x30>
	__asm volatile
 8004c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c96:	f383 8811 	msr	BASEPRI, r3
 8004c9a:	f3bf 8f6f 	isb	sy
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	623b      	str	r3, [r7, #32]
}
 8004ca4:	bf00      	nop
 8004ca6:	e7fe      	b.n	8004ca6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d103      	bne.n	8004cb6 <xQueueReceive+0x3e>
 8004cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <xQueueReceive+0x42>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e000      	b.n	8004cbc <xQueueReceive+0x44>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10a      	bne.n	8004cd6 <xQueueReceive+0x5e>
	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	61fb      	str	r3, [r7, #28]
}
 8004cd2:	bf00      	nop
 8004cd4:	e7fe      	b.n	8004cd4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cd6:	f001 f84d 	bl	8005d74 <xTaskGetSchedulerState>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d102      	bne.n	8004ce6 <xQueueReceive+0x6e>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <xQueueReceive+0x72>
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e000      	b.n	8004cec <xQueueReceive+0x74>
 8004cea:	2300      	movs	r3, #0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10a      	bne.n	8004d06 <xQueueReceive+0x8e>
	__asm volatile
 8004cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	61bb      	str	r3, [r7, #24]
}
 8004d02:	bf00      	nop
 8004d04:	e7fe      	b.n	8004d04 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d06:	f001 fd8d 	bl	8006824 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d01f      	beq.n	8004d56 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d16:	68b9      	ldr	r1, [r7, #8]
 8004d18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d1a:	f000 f8f7 	bl	8004f0c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	1e5a      	subs	r2, r3, #1
 8004d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d24:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00f      	beq.n	8004d4e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d30:	3310      	adds	r3, #16
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 fe60 	bl	80059f8 <xTaskRemoveFromEventList>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d007      	beq.n	8004d4e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d3e:	4b3d      	ldr	r3, [pc, #244]	; (8004e34 <xQueueReceive+0x1bc>)
 8004d40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d4e:	f001 fd99 	bl	8006884 <vPortExitCritical>
				return pdPASS;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e069      	b.n	8004e2a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d103      	bne.n	8004d64 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d5c:	f001 fd92 	bl	8006884 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d60:	2300      	movs	r3, #0
 8004d62:	e062      	b.n	8004e2a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d106      	bne.n	8004d78 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d6a:	f107 0310 	add.w	r3, r7, #16
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 fea6 	bl	8005ac0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d74:	2301      	movs	r3, #1
 8004d76:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d78:	f001 fd84 	bl	8006884 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d7c:	f000 fc06 	bl	800558c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d80:	f001 fd50 	bl	8006824 <vPortEnterCritical>
 8004d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d8a:	b25b      	sxtb	r3, r3
 8004d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d90:	d103      	bne.n	8004d9a <xQueueReceive+0x122>
 8004d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004da0:	b25b      	sxtb	r3, r3
 8004da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da6:	d103      	bne.n	8004db0 <xQueueReceive+0x138>
 8004da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004db0:	f001 fd68 	bl	8006884 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004db4:	1d3a      	adds	r2, r7, #4
 8004db6:	f107 0310 	add.w	r3, r7, #16
 8004dba:	4611      	mov	r1, r2
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 fe95 	bl	8005aec <xTaskCheckForTimeOut>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d123      	bne.n	8004e10 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004dc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dca:	f000 f917 	bl	8004ffc <prvIsQueueEmpty>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d017      	beq.n	8004e04 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd6:	3324      	adds	r3, #36	; 0x24
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	4611      	mov	r1, r2
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f000 fdbb 	bl	8005958 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004de2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004de4:	f000 f8b8 	bl	8004f58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004de8:	f000 fbde 	bl	80055a8 <xTaskResumeAll>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d189      	bne.n	8004d06 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004df2:	4b10      	ldr	r3, [pc, #64]	; (8004e34 <xQueueReceive+0x1bc>)
 8004df4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	f3bf 8f6f 	isb	sy
 8004e02:	e780      	b.n	8004d06 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004e04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e06:	f000 f8a7 	bl	8004f58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e0a:	f000 fbcd 	bl	80055a8 <xTaskResumeAll>
 8004e0e:	e77a      	b.n	8004d06 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004e10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e12:	f000 f8a1 	bl	8004f58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e16:	f000 fbc7 	bl	80055a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e1c:	f000 f8ee 	bl	8004ffc <prvIsQueueEmpty>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f43f af6f 	beq.w	8004d06 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e28:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3730      	adds	r7, #48	; 0x30
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	e000ed04 	.word	0xe000ed04

08004e38 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e44:	2300      	movs	r3, #0
 8004e46:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10d      	bne.n	8004e72 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d14d      	bne.n	8004efa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 ffa4 	bl	8005db0 <xTaskPriorityDisinherit>
 8004e68:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	609a      	str	r2, [r3, #8]
 8004e70:	e043      	b.n	8004efa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d119      	bne.n	8004eac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6858      	ldr	r0, [r3, #4]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e80:	461a      	mov	r2, r3
 8004e82:	68b9      	ldr	r1, [r7, #8]
 8004e84:	f002 f80e 	bl	8006ea4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e90:	441a      	add	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d32b      	bcc.n	8004efa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	605a      	str	r2, [r3, #4]
 8004eaa:	e026      	b.n	8004efa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	68d8      	ldr	r0, [r3, #12]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	68b9      	ldr	r1, [r7, #8]
 8004eb8:	f001 fff4 	bl	8006ea4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	68da      	ldr	r2, [r3, #12]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec4:	425b      	negs	r3, r3
 8004ec6:	441a      	add	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	68da      	ldr	r2, [r3, #12]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d207      	bcs.n	8004ee8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	689a      	ldr	r2, [r3, #8]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee0:	425b      	negs	r3, r3
 8004ee2:	441a      	add	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d105      	bne.n	8004efa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d002      	beq.n	8004efa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004f02:	697b      	ldr	r3, [r7, #20]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3718      	adds	r7, #24
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d018      	beq.n	8004f50 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f26:	441a      	add	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68da      	ldr	r2, [r3, #12]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d303      	bcc.n	8004f40 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68d9      	ldr	r1, [r3, #12]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f48:	461a      	mov	r2, r3
 8004f4a:	6838      	ldr	r0, [r7, #0]
 8004f4c:	f001 ffaa 	bl	8006ea4 <memcpy>
	}
}
 8004f50:	bf00      	nop
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f60:	f001 fc60 	bl	8006824 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f6a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f6c:	e011      	b.n	8004f92 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d012      	beq.n	8004f9c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	3324      	adds	r3, #36	; 0x24
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 fd3c 	bl	80059f8 <xTaskRemoveFromEventList>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f86:	f000 fe13 	bl	8005bb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f8a:	7bfb      	ldrb	r3, [r7, #15]
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	dce9      	bgt.n	8004f6e <prvUnlockQueue+0x16>
 8004f9a:	e000      	b.n	8004f9e <prvUnlockQueue+0x46>
					break;
 8004f9c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	22ff      	movs	r2, #255	; 0xff
 8004fa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004fa6:	f001 fc6d 	bl	8006884 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004faa:	f001 fc3b 	bl	8006824 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fb4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fb6:	e011      	b.n	8004fdc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d012      	beq.n	8004fe6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	3310      	adds	r3, #16
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f000 fd17 	bl	80059f8 <xTaskRemoveFromEventList>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004fd0:	f000 fdee 	bl	8005bb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004fd4:	7bbb      	ldrb	r3, [r7, #14]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	dce9      	bgt.n	8004fb8 <prvUnlockQueue+0x60>
 8004fe4:	e000      	b.n	8004fe8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004fe6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	22ff      	movs	r2, #255	; 0xff
 8004fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004ff0:	f001 fc48 	bl	8006884 <vPortExitCritical>
}
 8004ff4:	bf00      	nop
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005004:	f001 fc0e 	bl	8006824 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500c:	2b00      	cmp	r3, #0
 800500e:	d102      	bne.n	8005016 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005010:	2301      	movs	r3, #1
 8005012:	60fb      	str	r3, [r7, #12]
 8005014:	e001      	b.n	800501a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005016:	2300      	movs	r3, #0
 8005018:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800501a:	f001 fc33 	bl	8006884 <vPortExitCritical>

	return xReturn;
 800501e:	68fb      	ldr	r3, [r7, #12]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005030:	f001 fbf8 	bl	8006824 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800503c:	429a      	cmp	r2, r3
 800503e:	d102      	bne.n	8005046 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005040:	2301      	movs	r3, #1
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	e001      	b.n	800504a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005046:	2300      	movs	r3, #0
 8005048:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800504a:	f001 fc1b 	bl	8006884 <vPortExitCritical>

	return xReturn;
 800504e:	68fb      	ldr	r3, [r7, #12]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005062:	2300      	movs	r3, #0
 8005064:	60fb      	str	r3, [r7, #12]
 8005066:	e014      	b.n	8005092 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005068:	4a0f      	ldr	r2, [pc, #60]	; (80050a8 <vQueueAddToRegistry+0x50>)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10b      	bne.n	800508c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005074:	490c      	ldr	r1, [pc, #48]	; (80050a8 <vQueueAddToRegistry+0x50>)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800507e:	4a0a      	ldr	r2, [pc, #40]	; (80050a8 <vQueueAddToRegistry+0x50>)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	4413      	add	r3, r2
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800508a:	e006      	b.n	800509a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	3301      	adds	r3, #1
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2b07      	cmp	r3, #7
 8005096:	d9e7      	bls.n	8005068 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005098:	bf00      	nop
 800509a:	bf00      	nop
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	20000c1c 	.word	0x20000c1c

080050ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80050bc:	f001 fbb2 	bl	8006824 <vPortEnterCritical>
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050c6:	b25b      	sxtb	r3, r3
 80050c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050cc:	d103      	bne.n	80050d6 <vQueueWaitForMessageRestricted+0x2a>
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050dc:	b25b      	sxtb	r3, r3
 80050de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e2:	d103      	bne.n	80050ec <vQueueWaitForMessageRestricted+0x40>
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050ec:	f001 fbca 	bl	8006884 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d106      	bne.n	8005106 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	3324      	adds	r3, #36	; 0x24
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	68b9      	ldr	r1, [r7, #8]
 8005100:	4618      	mov	r0, r3
 8005102:	f000 fc4d 	bl	80059a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005106:	6978      	ldr	r0, [r7, #20]
 8005108:	f7ff ff26 	bl	8004f58 <prvUnlockQueue>
	}
 800510c:	bf00      	nop
 800510e:	3718      	adds	r7, #24
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005114:	b580      	push	{r7, lr}
 8005116:	b08e      	sub	sp, #56	; 0x38
 8005118:	af04      	add	r7, sp, #16
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
 8005120:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10a      	bne.n	800513e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512c:	f383 8811 	msr	BASEPRI, r3
 8005130:	f3bf 8f6f 	isb	sy
 8005134:	f3bf 8f4f 	dsb	sy
 8005138:	623b      	str	r3, [r7, #32]
}
 800513a:	bf00      	nop
 800513c:	e7fe      	b.n	800513c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800513e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005140:	2b00      	cmp	r3, #0
 8005142:	d10a      	bne.n	800515a <xTaskCreateStatic+0x46>
	__asm volatile
 8005144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005148:	f383 8811 	msr	BASEPRI, r3
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	f3bf 8f4f 	dsb	sy
 8005154:	61fb      	str	r3, [r7, #28]
}
 8005156:	bf00      	nop
 8005158:	e7fe      	b.n	8005158 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800515a:	235c      	movs	r3, #92	; 0x5c
 800515c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	2b5c      	cmp	r3, #92	; 0x5c
 8005162:	d00a      	beq.n	800517a <xTaskCreateStatic+0x66>
	__asm volatile
 8005164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	61bb      	str	r3, [r7, #24]
}
 8005176:	bf00      	nop
 8005178:	e7fe      	b.n	8005178 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800517a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800517c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517e:	2b00      	cmp	r3, #0
 8005180:	d01e      	beq.n	80051c0 <xTaskCreateStatic+0xac>
 8005182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005184:	2b00      	cmp	r3, #0
 8005186:	d01b      	beq.n	80051c0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005190:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	2202      	movs	r2, #2
 8005196:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800519a:	2300      	movs	r3, #0
 800519c:	9303      	str	r3, [sp, #12]
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	9302      	str	r3, [sp, #8]
 80051a2:	f107 0314 	add.w	r3, r7, #20
 80051a6:	9301      	str	r3, [sp, #4]
 80051a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	68b9      	ldr	r1, [r7, #8]
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 f850 	bl	8005258 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051ba:	f000 f8dd 	bl	8005378 <prvAddNewTaskToReadyList>
 80051be:	e001      	b.n	80051c4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80051c0:	2300      	movs	r3, #0
 80051c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80051c4:	697b      	ldr	r3, [r7, #20]
	}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3728      	adds	r7, #40	; 0x28
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b08c      	sub	sp, #48	; 0x30
 80051d2:	af04      	add	r7, sp, #16
 80051d4:	60f8      	str	r0, [r7, #12]
 80051d6:	60b9      	str	r1, [r7, #8]
 80051d8:	603b      	str	r3, [r7, #0]
 80051da:	4613      	mov	r3, r2
 80051dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80051de:	88fb      	ldrh	r3, [r7, #6]
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	4618      	mov	r0, r3
 80051e4:	f001 fc40 	bl	8006a68 <pvPortMalloc>
 80051e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00e      	beq.n	800520e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80051f0:	205c      	movs	r0, #92	; 0x5c
 80051f2:	f001 fc39 	bl	8006a68 <pvPortMalloc>
 80051f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	631a      	str	r2, [r3, #48]	; 0x30
 8005204:	e005      	b.n	8005212 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005206:	6978      	ldr	r0, [r7, #20]
 8005208:	f001 fcfa 	bl	8006c00 <vPortFree>
 800520c:	e001      	b.n	8005212 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800520e:	2300      	movs	r3, #0
 8005210:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d017      	beq.n	8005248 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005220:	88fa      	ldrh	r2, [r7, #6]
 8005222:	2300      	movs	r3, #0
 8005224:	9303      	str	r3, [sp, #12]
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	9302      	str	r3, [sp, #8]
 800522a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522c:	9301      	str	r3, [sp, #4]
 800522e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	68b9      	ldr	r1, [r7, #8]
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f000 f80e 	bl	8005258 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800523c:	69f8      	ldr	r0, [r7, #28]
 800523e:	f000 f89b 	bl	8005378 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005242:	2301      	movs	r3, #1
 8005244:	61bb      	str	r3, [r7, #24]
 8005246:	e002      	b.n	800524e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005248:	f04f 33ff 	mov.w	r3, #4294967295
 800524c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800524e:	69bb      	ldr	r3, [r7, #24]
	}
 8005250:	4618      	mov	r0, r3
 8005252:	3720      	adds	r7, #32
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b088      	sub	sp, #32
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005268:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	461a      	mov	r2, r3
 8005270:	21a5      	movs	r1, #165	; 0xa5
 8005272:	f001 fde3 	bl	8006e3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005278:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005280:	3b01      	subs	r3, #1
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	f023 0307 	bic.w	r3, r3, #7
 800528e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	f003 0307 	and.w	r3, r3, #7
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00a      	beq.n	80052b0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800529a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529e:	f383 8811 	msr	BASEPRI, r3
 80052a2:	f3bf 8f6f 	isb	sy
 80052a6:	f3bf 8f4f 	dsb	sy
 80052aa:	617b      	str	r3, [r7, #20]
}
 80052ac:	bf00      	nop
 80052ae:	e7fe      	b.n	80052ae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d01f      	beq.n	80052f6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052b6:	2300      	movs	r3, #0
 80052b8:	61fb      	str	r3, [r7, #28]
 80052ba:	e012      	b.n	80052e2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	4413      	add	r3, r2
 80052c2:	7819      	ldrb	r1, [r3, #0]
 80052c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	4413      	add	r3, r2
 80052ca:	3334      	adds	r3, #52	; 0x34
 80052cc:	460a      	mov	r2, r1
 80052ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	4413      	add	r3, r2
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d006      	beq.n	80052ea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	3301      	adds	r3, #1
 80052e0:	61fb      	str	r3, [r7, #28]
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	2b0f      	cmp	r3, #15
 80052e6:	d9e9      	bls.n	80052bc <prvInitialiseNewTask+0x64>
 80052e8:	e000      	b.n	80052ec <prvInitialiseNewTask+0x94>
			{
				break;
 80052ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052f4:	e003      	b.n	80052fe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80052f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80052fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005300:	2b37      	cmp	r3, #55	; 0x37
 8005302:	d901      	bls.n	8005308 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005304:	2337      	movs	r3, #55	; 0x37
 8005306:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800530c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800530e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005310:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005312:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005316:	2200      	movs	r2, #0
 8005318:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800531a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531c:	3304      	adds	r3, #4
 800531e:	4618      	mov	r0, r3
 8005320:	f7ff f93e 	bl	80045a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005326:	3318      	adds	r3, #24
 8005328:	4618      	mov	r0, r3
 800532a:	f7ff f939 	bl	80045a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800532e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005332:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005336:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800533a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800533e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005342:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005346:	2200      	movs	r2, #0
 8005348:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800534a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	68f9      	ldr	r1, [r7, #12]
 8005356:	69b8      	ldr	r0, [r7, #24]
 8005358:	f001 f93a 	bl	80065d0 <pxPortInitialiseStack>
 800535c:	4602      	mov	r2, r0
 800535e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005360:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005364:	2b00      	cmp	r3, #0
 8005366:	d002      	beq.n	800536e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800536c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800536e:	bf00      	nop
 8005370:	3720      	adds	r7, #32
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
	...

08005378 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005380:	f001 fa50 	bl	8006824 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005384:	4b2d      	ldr	r3, [pc, #180]	; (800543c <prvAddNewTaskToReadyList+0xc4>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	3301      	adds	r3, #1
 800538a:	4a2c      	ldr	r2, [pc, #176]	; (800543c <prvAddNewTaskToReadyList+0xc4>)
 800538c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800538e:	4b2c      	ldr	r3, [pc, #176]	; (8005440 <prvAddNewTaskToReadyList+0xc8>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d109      	bne.n	80053aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005396:	4a2a      	ldr	r2, [pc, #168]	; (8005440 <prvAddNewTaskToReadyList+0xc8>)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800539c:	4b27      	ldr	r3, [pc, #156]	; (800543c <prvAddNewTaskToReadyList+0xc4>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d110      	bne.n	80053c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80053a4:	f000 fc28 	bl	8005bf8 <prvInitialiseTaskLists>
 80053a8:	e00d      	b.n	80053c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80053aa:	4b26      	ldr	r3, [pc, #152]	; (8005444 <prvAddNewTaskToReadyList+0xcc>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d109      	bne.n	80053c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053b2:	4b23      	ldr	r3, [pc, #140]	; (8005440 <prvAddNewTaskToReadyList+0xc8>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053bc:	429a      	cmp	r2, r3
 80053be:	d802      	bhi.n	80053c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80053c0:	4a1f      	ldr	r2, [pc, #124]	; (8005440 <prvAddNewTaskToReadyList+0xc8>)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80053c6:	4b20      	ldr	r3, [pc, #128]	; (8005448 <prvAddNewTaskToReadyList+0xd0>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3301      	adds	r3, #1
 80053cc:	4a1e      	ldr	r2, [pc, #120]	; (8005448 <prvAddNewTaskToReadyList+0xd0>)
 80053ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80053d0:	4b1d      	ldr	r3, [pc, #116]	; (8005448 <prvAddNewTaskToReadyList+0xd0>)
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053dc:	4b1b      	ldr	r3, [pc, #108]	; (800544c <prvAddNewTaskToReadyList+0xd4>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d903      	bls.n	80053ec <prvAddNewTaskToReadyList+0x74>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e8:	4a18      	ldr	r2, [pc, #96]	; (800544c <prvAddNewTaskToReadyList+0xd4>)
 80053ea:	6013      	str	r3, [r2, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f0:	4613      	mov	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4a15      	ldr	r2, [pc, #84]	; (8005450 <prvAddNewTaskToReadyList+0xd8>)
 80053fa:	441a      	add	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	3304      	adds	r3, #4
 8005400:	4619      	mov	r1, r3
 8005402:	4610      	mov	r0, r2
 8005404:	f7ff f8d9 	bl	80045ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005408:	f001 fa3c 	bl	8006884 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800540c:	4b0d      	ldr	r3, [pc, #52]	; (8005444 <prvAddNewTaskToReadyList+0xcc>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00e      	beq.n	8005432 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005414:	4b0a      	ldr	r3, [pc, #40]	; (8005440 <prvAddNewTaskToReadyList+0xc8>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541e:	429a      	cmp	r2, r3
 8005420:	d207      	bcs.n	8005432 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005422:	4b0c      	ldr	r3, [pc, #48]	; (8005454 <prvAddNewTaskToReadyList+0xdc>)
 8005424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005428:	601a      	str	r2, [r3, #0]
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005432:	bf00      	nop
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	20001130 	.word	0x20001130
 8005440:	20000c5c 	.word	0x20000c5c
 8005444:	2000113c 	.word	0x2000113c
 8005448:	2000114c 	.word	0x2000114c
 800544c:	20001138 	.word	0x20001138
 8005450:	20000c60 	.word	0x20000c60
 8005454:	e000ed04 	.word	0xe000ed04

08005458 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005460:	2300      	movs	r3, #0
 8005462:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d017      	beq.n	800549a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800546a:	4b13      	ldr	r3, [pc, #76]	; (80054b8 <vTaskDelay+0x60>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00a      	beq.n	8005488 <vTaskDelay+0x30>
	__asm volatile
 8005472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005476:	f383 8811 	msr	BASEPRI, r3
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	60bb      	str	r3, [r7, #8]
}
 8005484:	bf00      	nop
 8005486:	e7fe      	b.n	8005486 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005488:	f000 f880 	bl	800558c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800548c:	2100      	movs	r1, #0
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 fcfc 	bl	8005e8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005494:	f000 f888 	bl	80055a8 <xTaskResumeAll>
 8005498:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d107      	bne.n	80054b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80054a0:	4b06      	ldr	r3, [pc, #24]	; (80054bc <vTaskDelay+0x64>)
 80054a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054b0:	bf00      	nop
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	20001158 	.word	0x20001158
 80054bc:	e000ed04 	.word	0xe000ed04

080054c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b08a      	sub	sp, #40	; 0x28
 80054c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80054c6:	2300      	movs	r3, #0
 80054c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80054ca:	2300      	movs	r3, #0
 80054cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80054ce:	463a      	mov	r2, r7
 80054d0:	1d39      	adds	r1, r7, #4
 80054d2:	f107 0308 	add.w	r3, r7, #8
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7ff f80e 	bl	80044f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80054dc:	6839      	ldr	r1, [r7, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	9202      	str	r2, [sp, #8]
 80054e4:	9301      	str	r3, [sp, #4]
 80054e6:	2300      	movs	r3, #0
 80054e8:	9300      	str	r3, [sp, #0]
 80054ea:	2300      	movs	r3, #0
 80054ec:	460a      	mov	r2, r1
 80054ee:	4921      	ldr	r1, [pc, #132]	; (8005574 <vTaskStartScheduler+0xb4>)
 80054f0:	4821      	ldr	r0, [pc, #132]	; (8005578 <vTaskStartScheduler+0xb8>)
 80054f2:	f7ff fe0f 	bl	8005114 <xTaskCreateStatic>
 80054f6:	4603      	mov	r3, r0
 80054f8:	4a20      	ldr	r2, [pc, #128]	; (800557c <vTaskStartScheduler+0xbc>)
 80054fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80054fc:	4b1f      	ldr	r3, [pc, #124]	; (800557c <vTaskStartScheduler+0xbc>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005504:	2301      	movs	r3, #1
 8005506:	617b      	str	r3, [r7, #20]
 8005508:	e001      	b.n	800550e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800550a:	2300      	movs	r3, #0
 800550c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d102      	bne.n	800551a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005514:	f000 fd0e 	bl	8005f34 <xTimerCreateTimerTask>
 8005518:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d116      	bne.n	800554e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005524:	f383 8811 	msr	BASEPRI, r3
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	613b      	str	r3, [r7, #16]
}
 8005532:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005534:	4b12      	ldr	r3, [pc, #72]	; (8005580 <vTaskStartScheduler+0xc0>)
 8005536:	f04f 32ff 	mov.w	r2, #4294967295
 800553a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800553c:	4b11      	ldr	r3, [pc, #68]	; (8005584 <vTaskStartScheduler+0xc4>)
 800553e:	2201      	movs	r2, #1
 8005540:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005542:	4b11      	ldr	r3, [pc, #68]	; (8005588 <vTaskStartScheduler+0xc8>)
 8005544:	2200      	movs	r2, #0
 8005546:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005548:	f001 f8ca 	bl	80066e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800554c:	e00e      	b.n	800556c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005554:	d10a      	bne.n	800556c <vTaskStartScheduler+0xac>
	__asm volatile
 8005556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555a:	f383 8811 	msr	BASEPRI, r3
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f3bf 8f4f 	dsb	sy
 8005566:	60fb      	str	r3, [r7, #12]
}
 8005568:	bf00      	nop
 800556a:	e7fe      	b.n	800556a <vTaskStartScheduler+0xaa>
}
 800556c:	bf00      	nop
 800556e:	3718      	adds	r7, #24
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	08006f38 	.word	0x08006f38
 8005578:	08005bc9 	.word	0x08005bc9
 800557c:	20001154 	.word	0x20001154
 8005580:	20001150 	.word	0x20001150
 8005584:	2000113c 	.word	0x2000113c
 8005588:	20001134 	.word	0x20001134

0800558c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005590:	4b04      	ldr	r3, [pc, #16]	; (80055a4 <vTaskSuspendAll+0x18>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3301      	adds	r3, #1
 8005596:	4a03      	ldr	r2, [pc, #12]	; (80055a4 <vTaskSuspendAll+0x18>)
 8005598:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800559a:	bf00      	nop
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr
 80055a4:	20001158 	.word	0x20001158

080055a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80055ae:	2300      	movs	r3, #0
 80055b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80055b2:	2300      	movs	r3, #0
 80055b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80055b6:	4b42      	ldr	r3, [pc, #264]	; (80056c0 <xTaskResumeAll+0x118>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10a      	bne.n	80055d4 <xTaskResumeAll+0x2c>
	__asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	603b      	str	r3, [r7, #0]
}
 80055d0:	bf00      	nop
 80055d2:	e7fe      	b.n	80055d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80055d4:	f001 f926 	bl	8006824 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80055d8:	4b39      	ldr	r3, [pc, #228]	; (80056c0 <xTaskResumeAll+0x118>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3b01      	subs	r3, #1
 80055de:	4a38      	ldr	r2, [pc, #224]	; (80056c0 <xTaskResumeAll+0x118>)
 80055e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055e2:	4b37      	ldr	r3, [pc, #220]	; (80056c0 <xTaskResumeAll+0x118>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d162      	bne.n	80056b0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80055ea:	4b36      	ldr	r3, [pc, #216]	; (80056c4 <xTaskResumeAll+0x11c>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d05e      	beq.n	80056b0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055f2:	e02f      	b.n	8005654 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055f4:	4b34      	ldr	r3, [pc, #208]	; (80056c8 <xTaskResumeAll+0x120>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	3318      	adds	r3, #24
 8005600:	4618      	mov	r0, r3
 8005602:	f7ff f837 	bl	8004674 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	3304      	adds	r3, #4
 800560a:	4618      	mov	r0, r3
 800560c:	f7ff f832 	bl	8004674 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005614:	4b2d      	ldr	r3, [pc, #180]	; (80056cc <xTaskResumeAll+0x124>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	429a      	cmp	r2, r3
 800561a:	d903      	bls.n	8005624 <xTaskResumeAll+0x7c>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005620:	4a2a      	ldr	r2, [pc, #168]	; (80056cc <xTaskResumeAll+0x124>)
 8005622:	6013      	str	r3, [r2, #0]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005628:	4613      	mov	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4a27      	ldr	r2, [pc, #156]	; (80056d0 <xTaskResumeAll+0x128>)
 8005632:	441a      	add	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	3304      	adds	r3, #4
 8005638:	4619      	mov	r1, r3
 800563a:	4610      	mov	r0, r2
 800563c:	f7fe ffbd 	bl	80045ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005644:	4b23      	ldr	r3, [pc, #140]	; (80056d4 <xTaskResumeAll+0x12c>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564a:	429a      	cmp	r2, r3
 800564c:	d302      	bcc.n	8005654 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800564e:	4b22      	ldr	r3, [pc, #136]	; (80056d8 <xTaskResumeAll+0x130>)
 8005650:	2201      	movs	r2, #1
 8005652:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005654:	4b1c      	ldr	r3, [pc, #112]	; (80056c8 <xTaskResumeAll+0x120>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1cb      	bne.n	80055f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005662:	f000 fb67 	bl	8005d34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005666:	4b1d      	ldr	r3, [pc, #116]	; (80056dc <xTaskResumeAll+0x134>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d010      	beq.n	8005694 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005672:	f000 f859 	bl	8005728 <xTaskIncrementTick>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d002      	beq.n	8005682 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800567c:	4b16      	ldr	r3, [pc, #88]	; (80056d8 <xTaskResumeAll+0x130>)
 800567e:	2201      	movs	r2, #1
 8005680:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	3b01      	subs	r3, #1
 8005686:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1f1      	bne.n	8005672 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800568e:	4b13      	ldr	r3, [pc, #76]	; (80056dc <xTaskResumeAll+0x134>)
 8005690:	2200      	movs	r2, #0
 8005692:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005694:	4b10      	ldr	r3, [pc, #64]	; (80056d8 <xTaskResumeAll+0x130>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d009      	beq.n	80056b0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800569c:	2301      	movs	r3, #1
 800569e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80056a0:	4b0f      	ldr	r3, [pc, #60]	; (80056e0 <xTaskResumeAll+0x138>)
 80056a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	f3bf 8f4f 	dsb	sy
 80056ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056b0:	f001 f8e8 	bl	8006884 <vPortExitCritical>

	return xAlreadyYielded;
 80056b4:	68bb      	ldr	r3, [r7, #8]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	20001158 	.word	0x20001158
 80056c4:	20001130 	.word	0x20001130
 80056c8:	200010f0 	.word	0x200010f0
 80056cc:	20001138 	.word	0x20001138
 80056d0:	20000c60 	.word	0x20000c60
 80056d4:	20000c5c 	.word	0x20000c5c
 80056d8:	20001144 	.word	0x20001144
 80056dc:	20001140 	.word	0x20001140
 80056e0:	e000ed04 	.word	0xe000ed04

080056e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80056ea:	4b05      	ldr	r3, [pc, #20]	; (8005700 <xTaskGetTickCount+0x1c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80056f0:	687b      	ldr	r3, [r7, #4]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	20001134 	.word	0x20001134

08005704 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800570a:	f001 f96d 	bl	80069e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800570e:	2300      	movs	r3, #0
 8005710:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005712:	4b04      	ldr	r3, [pc, #16]	; (8005724 <xTaskGetTickCountFromISR+0x20>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005718:	683b      	ldr	r3, [r7, #0]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	20001134 	.word	0x20001134

08005728 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800572e:	2300      	movs	r3, #0
 8005730:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005732:	4b4f      	ldr	r3, [pc, #316]	; (8005870 <xTaskIncrementTick+0x148>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	f040 808f 	bne.w	800585a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800573c:	4b4d      	ldr	r3, [pc, #308]	; (8005874 <xTaskIncrementTick+0x14c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	3301      	adds	r3, #1
 8005742:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005744:	4a4b      	ldr	r2, [pc, #300]	; (8005874 <xTaskIncrementTick+0x14c>)
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d120      	bne.n	8005792 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005750:	4b49      	ldr	r3, [pc, #292]	; (8005878 <xTaskIncrementTick+0x150>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00a      	beq.n	8005770 <xTaskIncrementTick+0x48>
	__asm volatile
 800575a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	603b      	str	r3, [r7, #0]
}
 800576c:	bf00      	nop
 800576e:	e7fe      	b.n	800576e <xTaskIncrementTick+0x46>
 8005770:	4b41      	ldr	r3, [pc, #260]	; (8005878 <xTaskIncrementTick+0x150>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	4b41      	ldr	r3, [pc, #260]	; (800587c <xTaskIncrementTick+0x154>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a3f      	ldr	r2, [pc, #252]	; (8005878 <xTaskIncrementTick+0x150>)
 800577c:	6013      	str	r3, [r2, #0]
 800577e:	4a3f      	ldr	r2, [pc, #252]	; (800587c <xTaskIncrementTick+0x154>)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6013      	str	r3, [r2, #0]
 8005784:	4b3e      	ldr	r3, [pc, #248]	; (8005880 <xTaskIncrementTick+0x158>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	3301      	adds	r3, #1
 800578a:	4a3d      	ldr	r2, [pc, #244]	; (8005880 <xTaskIncrementTick+0x158>)
 800578c:	6013      	str	r3, [r2, #0]
 800578e:	f000 fad1 	bl	8005d34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005792:	4b3c      	ldr	r3, [pc, #240]	; (8005884 <xTaskIncrementTick+0x15c>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	429a      	cmp	r2, r3
 800579a:	d349      	bcc.n	8005830 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800579c:	4b36      	ldr	r3, [pc, #216]	; (8005878 <xTaskIncrementTick+0x150>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d104      	bne.n	80057b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057a6:	4b37      	ldr	r3, [pc, #220]	; (8005884 <xTaskIncrementTick+0x15c>)
 80057a8:	f04f 32ff 	mov.w	r2, #4294967295
 80057ac:	601a      	str	r2, [r3, #0]
					break;
 80057ae:	e03f      	b.n	8005830 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057b0:	4b31      	ldr	r3, [pc, #196]	; (8005878 <xTaskIncrementTick+0x150>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d203      	bcs.n	80057d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80057c8:	4a2e      	ldr	r2, [pc, #184]	; (8005884 <xTaskIncrementTick+0x15c>)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80057ce:	e02f      	b.n	8005830 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	3304      	adds	r3, #4
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7fe ff4d 	bl	8004674 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d004      	beq.n	80057ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	3318      	adds	r3, #24
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fe ff44 	bl	8004674 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f0:	4b25      	ldr	r3, [pc, #148]	; (8005888 <xTaskIncrementTick+0x160>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d903      	bls.n	8005800 <xTaskIncrementTick+0xd8>
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fc:	4a22      	ldr	r2, [pc, #136]	; (8005888 <xTaskIncrementTick+0x160>)
 80057fe:	6013      	str	r3, [r2, #0]
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005804:	4613      	mov	r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	4413      	add	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4a1f      	ldr	r2, [pc, #124]	; (800588c <xTaskIncrementTick+0x164>)
 800580e:	441a      	add	r2, r3
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	3304      	adds	r3, #4
 8005814:	4619      	mov	r1, r3
 8005816:	4610      	mov	r0, r2
 8005818:	f7fe fecf 	bl	80045ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005820:	4b1b      	ldr	r3, [pc, #108]	; (8005890 <xTaskIncrementTick+0x168>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005826:	429a      	cmp	r2, r3
 8005828:	d3b8      	bcc.n	800579c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800582a:	2301      	movs	r3, #1
 800582c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800582e:	e7b5      	b.n	800579c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005830:	4b17      	ldr	r3, [pc, #92]	; (8005890 <xTaskIncrementTick+0x168>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005836:	4915      	ldr	r1, [pc, #84]	; (800588c <xTaskIncrementTick+0x164>)
 8005838:	4613      	mov	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	440b      	add	r3, r1
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d901      	bls.n	800584c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005848:	2301      	movs	r3, #1
 800584a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800584c:	4b11      	ldr	r3, [pc, #68]	; (8005894 <xTaskIncrementTick+0x16c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d007      	beq.n	8005864 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005854:	2301      	movs	r3, #1
 8005856:	617b      	str	r3, [r7, #20]
 8005858:	e004      	b.n	8005864 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800585a:	4b0f      	ldr	r3, [pc, #60]	; (8005898 <xTaskIncrementTick+0x170>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	3301      	adds	r3, #1
 8005860:	4a0d      	ldr	r2, [pc, #52]	; (8005898 <xTaskIncrementTick+0x170>)
 8005862:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005864:	697b      	ldr	r3, [r7, #20]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3718      	adds	r7, #24
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	20001158 	.word	0x20001158
 8005874:	20001134 	.word	0x20001134
 8005878:	200010e8 	.word	0x200010e8
 800587c:	200010ec 	.word	0x200010ec
 8005880:	20001148 	.word	0x20001148
 8005884:	20001150 	.word	0x20001150
 8005888:	20001138 	.word	0x20001138
 800588c:	20000c60 	.word	0x20000c60
 8005890:	20000c5c 	.word	0x20000c5c
 8005894:	20001144 	.word	0x20001144
 8005898:	20001140 	.word	0x20001140

0800589c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058a2:	4b28      	ldr	r3, [pc, #160]	; (8005944 <vTaskSwitchContext+0xa8>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058aa:	4b27      	ldr	r3, [pc, #156]	; (8005948 <vTaskSwitchContext+0xac>)
 80058ac:	2201      	movs	r2, #1
 80058ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058b0:	e041      	b.n	8005936 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80058b2:	4b25      	ldr	r3, [pc, #148]	; (8005948 <vTaskSwitchContext+0xac>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058b8:	4b24      	ldr	r3, [pc, #144]	; (800594c <vTaskSwitchContext+0xb0>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	60fb      	str	r3, [r7, #12]
 80058be:	e010      	b.n	80058e2 <vTaskSwitchContext+0x46>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10a      	bne.n	80058dc <vTaskSwitchContext+0x40>
	__asm volatile
 80058c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ca:	f383 8811 	msr	BASEPRI, r3
 80058ce:	f3bf 8f6f 	isb	sy
 80058d2:	f3bf 8f4f 	dsb	sy
 80058d6:	607b      	str	r3, [r7, #4]
}
 80058d8:	bf00      	nop
 80058da:	e7fe      	b.n	80058da <vTaskSwitchContext+0x3e>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	3b01      	subs	r3, #1
 80058e0:	60fb      	str	r3, [r7, #12]
 80058e2:	491b      	ldr	r1, [pc, #108]	; (8005950 <vTaskSwitchContext+0xb4>)
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	4613      	mov	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	440b      	add	r3, r1
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d0e4      	beq.n	80058c0 <vTaskSwitchContext+0x24>
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	4613      	mov	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4a13      	ldr	r2, [pc, #76]	; (8005950 <vTaskSwitchContext+0xb4>)
 8005902:	4413      	add	r3, r2
 8005904:	60bb      	str	r3, [r7, #8]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	605a      	str	r2, [r3, #4]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	3308      	adds	r3, #8
 8005918:	429a      	cmp	r2, r3
 800591a:	d104      	bne.n	8005926 <vTaskSwitchContext+0x8a>
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	605a      	str	r2, [r3, #4]
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	4a09      	ldr	r2, [pc, #36]	; (8005954 <vTaskSwitchContext+0xb8>)
 800592e:	6013      	str	r3, [r2, #0]
 8005930:	4a06      	ldr	r2, [pc, #24]	; (800594c <vTaskSwitchContext+0xb0>)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6013      	str	r3, [r2, #0]
}
 8005936:	bf00      	nop
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	20001158 	.word	0x20001158
 8005948:	20001144 	.word	0x20001144
 800594c:	20001138 	.word	0x20001138
 8005950:	20000c60 	.word	0x20000c60
 8005954:	20000c5c 	.word	0x20000c5c

08005958 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10a      	bne.n	800597e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596c:	f383 8811 	msr	BASEPRI, r3
 8005970:	f3bf 8f6f 	isb	sy
 8005974:	f3bf 8f4f 	dsb	sy
 8005978:	60fb      	str	r3, [r7, #12]
}
 800597a:	bf00      	nop
 800597c:	e7fe      	b.n	800597c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800597e:	4b07      	ldr	r3, [pc, #28]	; (800599c <vTaskPlaceOnEventList+0x44>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3318      	adds	r3, #24
 8005984:	4619      	mov	r1, r3
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7fe fe3b 	bl	8004602 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800598c:	2101      	movs	r1, #1
 800598e:	6838      	ldr	r0, [r7, #0]
 8005990:	f000 fa7c 	bl	8005e8c <prvAddCurrentTaskToDelayedList>
}
 8005994:	bf00      	nop
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	20000c5c 	.word	0x20000c5c

080059a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10a      	bne.n	80059c8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80059b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b6:	f383 8811 	msr	BASEPRI, r3
 80059ba:	f3bf 8f6f 	isb	sy
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	617b      	str	r3, [r7, #20]
}
 80059c4:	bf00      	nop
 80059c6:	e7fe      	b.n	80059c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059c8:	4b0a      	ldr	r3, [pc, #40]	; (80059f4 <vTaskPlaceOnEventListRestricted+0x54>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	3318      	adds	r3, #24
 80059ce:	4619      	mov	r1, r3
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f7fe fdf2 	bl	80045ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d002      	beq.n	80059e2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80059dc:	f04f 33ff 	mov.w	r3, #4294967295
 80059e0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80059e2:	6879      	ldr	r1, [r7, #4]
 80059e4:	68b8      	ldr	r0, [r7, #8]
 80059e6:	f000 fa51 	bl	8005e8c <prvAddCurrentTaskToDelayedList>
	}
 80059ea:	bf00      	nop
 80059ec:	3718      	adds	r7, #24
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	20000c5c 	.word	0x20000c5c

080059f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10a      	bne.n	8005a24 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	60fb      	str	r3, [r7, #12]
}
 8005a20:	bf00      	nop
 8005a22:	e7fe      	b.n	8005a22 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	3318      	adds	r3, #24
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7fe fe23 	bl	8004674 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a2e:	4b1e      	ldr	r3, [pc, #120]	; (8005aa8 <xTaskRemoveFromEventList+0xb0>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d11d      	bne.n	8005a72 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	3304      	adds	r3, #4
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fe fe1a 	bl	8004674 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a44:	4b19      	ldr	r3, [pc, #100]	; (8005aac <xTaskRemoveFromEventList+0xb4>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d903      	bls.n	8005a54 <xTaskRemoveFromEventList+0x5c>
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	4a16      	ldr	r2, [pc, #88]	; (8005aac <xTaskRemoveFromEventList+0xb4>)
 8005a52:	6013      	str	r3, [r2, #0]
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a58:	4613      	mov	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4a13      	ldr	r2, [pc, #76]	; (8005ab0 <xTaskRemoveFromEventList+0xb8>)
 8005a62:	441a      	add	r2, r3
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	3304      	adds	r3, #4
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4610      	mov	r0, r2
 8005a6c:	f7fe fda5 	bl	80045ba <vListInsertEnd>
 8005a70:	e005      	b.n	8005a7e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	3318      	adds	r3, #24
 8005a76:	4619      	mov	r1, r3
 8005a78:	480e      	ldr	r0, [pc, #56]	; (8005ab4 <xTaskRemoveFromEventList+0xbc>)
 8005a7a:	f7fe fd9e 	bl	80045ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a82:	4b0d      	ldr	r3, [pc, #52]	; (8005ab8 <xTaskRemoveFromEventList+0xc0>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d905      	bls.n	8005a98 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a90:	4b0a      	ldr	r3, [pc, #40]	; (8005abc <xTaskRemoveFromEventList+0xc4>)
 8005a92:	2201      	movs	r2, #1
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	e001      	b.n	8005a9c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005a9c:	697b      	ldr	r3, [r7, #20]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3718      	adds	r7, #24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	20001158 	.word	0x20001158
 8005aac:	20001138 	.word	0x20001138
 8005ab0:	20000c60 	.word	0x20000c60
 8005ab4:	200010f0 	.word	0x200010f0
 8005ab8:	20000c5c 	.word	0x20000c5c
 8005abc:	20001144 	.word	0x20001144

08005ac0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ac8:	4b06      	ldr	r3, [pc, #24]	; (8005ae4 <vTaskInternalSetTimeOutState+0x24>)
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ad0:	4b05      	ldr	r3, [pc, #20]	; (8005ae8 <vTaskInternalSetTimeOutState+0x28>)
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	605a      	str	r2, [r3, #4]
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	20001148 	.word	0x20001148
 8005ae8:	20001134 	.word	0x20001134

08005aec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b088      	sub	sp, #32
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d10a      	bne.n	8005b12 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	613b      	str	r3, [r7, #16]
}
 8005b0e:	bf00      	nop
 8005b10:	e7fe      	b.n	8005b10 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10a      	bne.n	8005b2e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1c:	f383 8811 	msr	BASEPRI, r3
 8005b20:	f3bf 8f6f 	isb	sy
 8005b24:	f3bf 8f4f 	dsb	sy
 8005b28:	60fb      	str	r3, [r7, #12]
}
 8005b2a:	bf00      	nop
 8005b2c:	e7fe      	b.n	8005b2c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005b2e:	f000 fe79 	bl	8006824 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b32:	4b1d      	ldr	r3, [pc, #116]	; (8005ba8 <xTaskCheckForTimeOut+0xbc>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4a:	d102      	bne.n	8005b52 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	61fb      	str	r3, [r7, #28]
 8005b50:	e023      	b.n	8005b9a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	4b15      	ldr	r3, [pc, #84]	; (8005bac <xTaskCheckForTimeOut+0xc0>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d007      	beq.n	8005b6e <xTaskCheckForTimeOut+0x82>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d302      	bcc.n	8005b6e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	61fb      	str	r3, [r7, #28]
 8005b6c:	e015      	b.n	8005b9a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d20b      	bcs.n	8005b90 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	1ad2      	subs	r2, r2, r3
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f7ff ff9b 	bl	8005ac0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	61fb      	str	r3, [r7, #28]
 8005b8e:	e004      	b.n	8005b9a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	2200      	movs	r2, #0
 8005b94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b96:	2301      	movs	r3, #1
 8005b98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b9a:	f000 fe73 	bl	8006884 <vPortExitCritical>

	return xReturn;
 8005b9e:	69fb      	ldr	r3, [r7, #28]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3720      	adds	r7, #32
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	20001134 	.word	0x20001134
 8005bac:	20001148 	.word	0x20001148

08005bb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005bb4:	4b03      	ldr	r3, [pc, #12]	; (8005bc4 <vTaskMissedYield+0x14>)
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	601a      	str	r2, [r3, #0]
}
 8005bba:	bf00      	nop
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	20001144 	.word	0x20001144

08005bc8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005bd0:	f000 f852 	bl	8005c78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005bd4:	4b06      	ldr	r3, [pc, #24]	; (8005bf0 <prvIdleTask+0x28>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d9f9      	bls.n	8005bd0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005bdc:	4b05      	ldr	r3, [pc, #20]	; (8005bf4 <prvIdleTask+0x2c>)
 8005bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005be2:	601a      	str	r2, [r3, #0]
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005bec:	e7f0      	b.n	8005bd0 <prvIdleTask+0x8>
 8005bee:	bf00      	nop
 8005bf0:	20000c60 	.word	0x20000c60
 8005bf4:	e000ed04 	.word	0xe000ed04

08005bf8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bfe:	2300      	movs	r3, #0
 8005c00:	607b      	str	r3, [r7, #4]
 8005c02:	e00c      	b.n	8005c1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	4613      	mov	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4a12      	ldr	r2, [pc, #72]	; (8005c58 <prvInitialiseTaskLists+0x60>)
 8005c10:	4413      	add	r3, r2
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7fe fca4 	bl	8004560 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	607b      	str	r3, [r7, #4]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b37      	cmp	r3, #55	; 0x37
 8005c22:	d9ef      	bls.n	8005c04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c24:	480d      	ldr	r0, [pc, #52]	; (8005c5c <prvInitialiseTaskLists+0x64>)
 8005c26:	f7fe fc9b 	bl	8004560 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c2a:	480d      	ldr	r0, [pc, #52]	; (8005c60 <prvInitialiseTaskLists+0x68>)
 8005c2c:	f7fe fc98 	bl	8004560 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c30:	480c      	ldr	r0, [pc, #48]	; (8005c64 <prvInitialiseTaskLists+0x6c>)
 8005c32:	f7fe fc95 	bl	8004560 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c36:	480c      	ldr	r0, [pc, #48]	; (8005c68 <prvInitialiseTaskLists+0x70>)
 8005c38:	f7fe fc92 	bl	8004560 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c3c:	480b      	ldr	r0, [pc, #44]	; (8005c6c <prvInitialiseTaskLists+0x74>)
 8005c3e:	f7fe fc8f 	bl	8004560 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c42:	4b0b      	ldr	r3, [pc, #44]	; (8005c70 <prvInitialiseTaskLists+0x78>)
 8005c44:	4a05      	ldr	r2, [pc, #20]	; (8005c5c <prvInitialiseTaskLists+0x64>)
 8005c46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c48:	4b0a      	ldr	r3, [pc, #40]	; (8005c74 <prvInitialiseTaskLists+0x7c>)
 8005c4a:	4a05      	ldr	r2, [pc, #20]	; (8005c60 <prvInitialiseTaskLists+0x68>)
 8005c4c:	601a      	str	r2, [r3, #0]
}
 8005c4e:	bf00      	nop
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	20000c60 	.word	0x20000c60
 8005c5c:	200010c0 	.word	0x200010c0
 8005c60:	200010d4 	.word	0x200010d4
 8005c64:	200010f0 	.word	0x200010f0
 8005c68:	20001104 	.word	0x20001104
 8005c6c:	2000111c 	.word	0x2000111c
 8005c70:	200010e8 	.word	0x200010e8
 8005c74:	200010ec 	.word	0x200010ec

08005c78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c7e:	e019      	b.n	8005cb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c80:	f000 fdd0 	bl	8006824 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c84:	4b10      	ldr	r3, [pc, #64]	; (8005cc8 <prvCheckTasksWaitingTermination+0x50>)
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	3304      	adds	r3, #4
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7fe fcef 	bl	8004674 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c96:	4b0d      	ldr	r3, [pc, #52]	; (8005ccc <prvCheckTasksWaitingTermination+0x54>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	4a0b      	ldr	r2, [pc, #44]	; (8005ccc <prvCheckTasksWaitingTermination+0x54>)
 8005c9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ca0:	4b0b      	ldr	r3, [pc, #44]	; (8005cd0 <prvCheckTasksWaitingTermination+0x58>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	4a0a      	ldr	r2, [pc, #40]	; (8005cd0 <prvCheckTasksWaitingTermination+0x58>)
 8005ca8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005caa:	f000 fdeb 	bl	8006884 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 f810 	bl	8005cd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cb4:	4b06      	ldr	r3, [pc, #24]	; (8005cd0 <prvCheckTasksWaitingTermination+0x58>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1e1      	bne.n	8005c80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005cbc:	bf00      	nop
 8005cbe:	bf00      	nop
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	20001104 	.word	0x20001104
 8005ccc:	20001130 	.word	0x20001130
 8005cd0:	20001118 	.word	0x20001118

08005cd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d108      	bne.n	8005cf8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 ff88 	bl	8006c00 <vPortFree>
				vPortFree( pxTCB );
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 ff85 	bl	8006c00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005cf6:	e018      	b.n	8005d2a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d103      	bne.n	8005d0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 ff7c 	bl	8006c00 <vPortFree>
	}
 8005d08:	e00f      	b.n	8005d2a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d00a      	beq.n	8005d2a <prvDeleteTCB+0x56>
	__asm volatile
 8005d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	60fb      	str	r3, [r7, #12]
}
 8005d26:	bf00      	nop
 8005d28:	e7fe      	b.n	8005d28 <prvDeleteTCB+0x54>
	}
 8005d2a:	bf00      	nop
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
	...

08005d34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d3a:	4b0c      	ldr	r3, [pc, #48]	; (8005d6c <prvResetNextTaskUnblockTime+0x38>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d104      	bne.n	8005d4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d44:	4b0a      	ldr	r3, [pc, #40]	; (8005d70 <prvResetNextTaskUnblockTime+0x3c>)
 8005d46:	f04f 32ff 	mov.w	r2, #4294967295
 8005d4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d4c:	e008      	b.n	8005d60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d4e:	4b07      	ldr	r3, [pc, #28]	; (8005d6c <prvResetNextTaskUnblockTime+0x38>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	4a04      	ldr	r2, [pc, #16]	; (8005d70 <prvResetNextTaskUnblockTime+0x3c>)
 8005d5e:	6013      	str	r3, [r2, #0]
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	200010e8 	.word	0x200010e8
 8005d70:	20001150 	.word	0x20001150

08005d74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d7a:	4b0b      	ldr	r3, [pc, #44]	; (8005da8 <xTaskGetSchedulerState+0x34>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d102      	bne.n	8005d88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d82:	2301      	movs	r3, #1
 8005d84:	607b      	str	r3, [r7, #4]
 8005d86:	e008      	b.n	8005d9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d88:	4b08      	ldr	r3, [pc, #32]	; (8005dac <xTaskGetSchedulerState+0x38>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d102      	bne.n	8005d96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d90:	2302      	movs	r3, #2
 8005d92:	607b      	str	r3, [r7, #4]
 8005d94:	e001      	b.n	8005d9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d96:	2300      	movs	r3, #0
 8005d98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d9a:	687b      	ldr	r3, [r7, #4]
	}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	2000113c 	.word	0x2000113c
 8005dac:	20001158 	.word	0x20001158

08005db0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d056      	beq.n	8005e74 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005dc6:	4b2e      	ldr	r3, [pc, #184]	; (8005e80 <xTaskPriorityDisinherit+0xd0>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d00a      	beq.n	8005de6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	60fb      	str	r3, [r7, #12]
}
 8005de2:	bf00      	nop
 8005de4:	e7fe      	b.n	8005de4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10a      	bne.n	8005e04 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df2:	f383 8811 	msr	BASEPRI, r3
 8005df6:	f3bf 8f6f 	isb	sy
 8005dfa:	f3bf 8f4f 	dsb	sy
 8005dfe:	60bb      	str	r3, [r7, #8]
}
 8005e00:	bf00      	nop
 8005e02:	e7fe      	b.n	8005e02 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e08:	1e5a      	subs	r2, r3, #1
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d02c      	beq.n	8005e74 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d128      	bne.n	8005e74 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	3304      	adds	r3, #4
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7fe fc24 	bl	8004674 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e38:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e44:	4b0f      	ldr	r3, [pc, #60]	; (8005e84 <xTaskPriorityDisinherit+0xd4>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d903      	bls.n	8005e54 <xTaskPriorityDisinherit+0xa4>
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e50:	4a0c      	ldr	r2, [pc, #48]	; (8005e84 <xTaskPriorityDisinherit+0xd4>)
 8005e52:	6013      	str	r3, [r2, #0]
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e58:	4613      	mov	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4a09      	ldr	r2, [pc, #36]	; (8005e88 <xTaskPriorityDisinherit+0xd8>)
 8005e62:	441a      	add	r2, r3
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	3304      	adds	r3, #4
 8005e68:	4619      	mov	r1, r3
 8005e6a:	4610      	mov	r0, r2
 8005e6c:	f7fe fba5 	bl	80045ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e70:	2301      	movs	r3, #1
 8005e72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e74:	697b      	ldr	r3, [r7, #20]
	}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3718      	adds	r7, #24
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	20000c5c 	.word	0x20000c5c
 8005e84:	20001138 	.word	0x20001138
 8005e88:	20000c60 	.word	0x20000c60

08005e8c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e96:	4b21      	ldr	r3, [pc, #132]	; (8005f1c <prvAddCurrentTaskToDelayedList+0x90>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e9c:	4b20      	ldr	r3, [pc, #128]	; (8005f20 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	3304      	adds	r3, #4
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7fe fbe6 	bl	8004674 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eae:	d10a      	bne.n	8005ec6 <prvAddCurrentTaskToDelayedList+0x3a>
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d007      	beq.n	8005ec6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eb6:	4b1a      	ldr	r3, [pc, #104]	; (8005f20 <prvAddCurrentTaskToDelayedList+0x94>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	3304      	adds	r3, #4
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	4819      	ldr	r0, [pc, #100]	; (8005f24 <prvAddCurrentTaskToDelayedList+0x98>)
 8005ec0:	f7fe fb7b 	bl	80045ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ec4:	e026      	b.n	8005f14 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4413      	add	r3, r2
 8005ecc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ece:	4b14      	ldr	r3, [pc, #80]	; (8005f20 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d209      	bcs.n	8005ef2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ede:	4b12      	ldr	r3, [pc, #72]	; (8005f28 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	4b0f      	ldr	r3, [pc, #60]	; (8005f20 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4610      	mov	r0, r2
 8005eec:	f7fe fb89 	bl	8004602 <vListInsert>
}
 8005ef0:	e010      	b.n	8005f14 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ef2:	4b0e      	ldr	r3, [pc, #56]	; (8005f2c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	4b0a      	ldr	r3, [pc, #40]	; (8005f20 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3304      	adds	r3, #4
 8005efc:	4619      	mov	r1, r3
 8005efe:	4610      	mov	r0, r2
 8005f00:	f7fe fb7f 	bl	8004602 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f04:	4b0a      	ldr	r3, [pc, #40]	; (8005f30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d202      	bcs.n	8005f14 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005f0e:	4a08      	ldr	r2, [pc, #32]	; (8005f30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	6013      	str	r3, [r2, #0]
}
 8005f14:	bf00      	nop
 8005f16:	3710      	adds	r7, #16
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	20001134 	.word	0x20001134
 8005f20:	20000c5c 	.word	0x20000c5c
 8005f24:	2000111c 	.word	0x2000111c
 8005f28:	200010ec 	.word	0x200010ec
 8005f2c:	200010e8 	.word	0x200010e8
 8005f30:	20001150 	.word	0x20001150

08005f34 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b08a      	sub	sp, #40	; 0x28
 8005f38:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005f3e:	f000 fb07 	bl	8006550 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005f42:	4b1c      	ldr	r3, [pc, #112]	; (8005fb4 <xTimerCreateTimerTask+0x80>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d021      	beq.n	8005f8e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005f52:	1d3a      	adds	r2, r7, #4
 8005f54:	f107 0108 	add.w	r1, r7, #8
 8005f58:	f107 030c 	add.w	r3, r7, #12
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7fe fae5 	bl	800452c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005f62:	6879      	ldr	r1, [r7, #4]
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	9202      	str	r2, [sp, #8]
 8005f6a:	9301      	str	r3, [sp, #4]
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	2300      	movs	r3, #0
 8005f72:	460a      	mov	r2, r1
 8005f74:	4910      	ldr	r1, [pc, #64]	; (8005fb8 <xTimerCreateTimerTask+0x84>)
 8005f76:	4811      	ldr	r0, [pc, #68]	; (8005fbc <xTimerCreateTimerTask+0x88>)
 8005f78:	f7ff f8cc 	bl	8005114 <xTaskCreateStatic>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	4a10      	ldr	r2, [pc, #64]	; (8005fc0 <xTimerCreateTimerTask+0x8c>)
 8005f80:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005f82:	4b0f      	ldr	r3, [pc, #60]	; (8005fc0 <xTimerCreateTimerTask+0x8c>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d10a      	bne.n	8005faa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f98:	f383 8811 	msr	BASEPRI, r3
 8005f9c:	f3bf 8f6f 	isb	sy
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	613b      	str	r3, [r7, #16]
}
 8005fa6:	bf00      	nop
 8005fa8:	e7fe      	b.n	8005fa8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005faa:	697b      	ldr	r3, [r7, #20]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3718      	adds	r7, #24
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	2000118c 	.word	0x2000118c
 8005fb8:	08006f40 	.word	0x08006f40
 8005fbc:	080060f9 	.word	0x080060f9
 8005fc0:	20001190 	.word	0x20001190

08005fc4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b08a      	sub	sp, #40	; 0x28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
 8005fd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10a      	bne.n	8005ff2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe0:	f383 8811 	msr	BASEPRI, r3
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	623b      	str	r3, [r7, #32]
}
 8005fee:	bf00      	nop
 8005ff0:	e7fe      	b.n	8005ff0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005ff2:	4b1a      	ldr	r3, [pc, #104]	; (800605c <xTimerGenericCommand+0x98>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d02a      	beq.n	8006050 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	2b05      	cmp	r3, #5
 800600a:	dc18      	bgt.n	800603e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800600c:	f7ff feb2 	bl	8005d74 <xTaskGetSchedulerState>
 8006010:	4603      	mov	r3, r0
 8006012:	2b02      	cmp	r3, #2
 8006014:	d109      	bne.n	800602a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006016:	4b11      	ldr	r3, [pc, #68]	; (800605c <xTimerGenericCommand+0x98>)
 8006018:	6818      	ldr	r0, [r3, #0]
 800601a:	f107 0110 	add.w	r1, r7, #16
 800601e:	2300      	movs	r3, #0
 8006020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006022:	f7fe fc8f 	bl	8004944 <xQueueGenericSend>
 8006026:	6278      	str	r0, [r7, #36]	; 0x24
 8006028:	e012      	b.n	8006050 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800602a:	4b0c      	ldr	r3, [pc, #48]	; (800605c <xTimerGenericCommand+0x98>)
 800602c:	6818      	ldr	r0, [r3, #0]
 800602e:	f107 0110 	add.w	r1, r7, #16
 8006032:	2300      	movs	r3, #0
 8006034:	2200      	movs	r2, #0
 8006036:	f7fe fc85 	bl	8004944 <xQueueGenericSend>
 800603a:	6278      	str	r0, [r7, #36]	; 0x24
 800603c:	e008      	b.n	8006050 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800603e:	4b07      	ldr	r3, [pc, #28]	; (800605c <xTimerGenericCommand+0x98>)
 8006040:	6818      	ldr	r0, [r3, #0]
 8006042:	f107 0110 	add.w	r1, r7, #16
 8006046:	2300      	movs	r3, #0
 8006048:	683a      	ldr	r2, [r7, #0]
 800604a:	f7fe fd79 	bl	8004b40 <xQueueGenericSendFromISR>
 800604e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006052:	4618      	mov	r0, r3
 8006054:	3728      	adds	r7, #40	; 0x28
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	2000118c 	.word	0x2000118c

08006060 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b088      	sub	sp, #32
 8006064:	af02      	add	r7, sp, #8
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800606a:	4b22      	ldr	r3, [pc, #136]	; (80060f4 <prvProcessExpiredTimer+0x94>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	3304      	adds	r3, #4
 8006078:	4618      	mov	r0, r3
 800607a:	f7fe fafb 	bl	8004674 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006084:	f003 0304 	and.w	r3, r3, #4
 8006088:	2b00      	cmp	r3, #0
 800608a:	d022      	beq.n	80060d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	699a      	ldr	r2, [r3, #24]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	18d1      	adds	r1, r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	683a      	ldr	r2, [r7, #0]
 8006098:	6978      	ldr	r0, [r7, #20]
 800609a:	f000 f8d1 	bl	8006240 <prvInsertTimerInActiveList>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d01f      	beq.n	80060e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060a4:	2300      	movs	r3, #0
 80060a6:	9300      	str	r3, [sp, #0]
 80060a8:	2300      	movs	r3, #0
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	2100      	movs	r1, #0
 80060ae:	6978      	ldr	r0, [r7, #20]
 80060b0:	f7ff ff88 	bl	8005fc4 <xTimerGenericCommand>
 80060b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d113      	bne.n	80060e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80060bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c0:	f383 8811 	msr	BASEPRI, r3
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	f3bf 8f4f 	dsb	sy
 80060cc:	60fb      	str	r3, [r7, #12]
}
 80060ce:	bf00      	nop
 80060d0:	e7fe      	b.n	80060d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060d8:	f023 0301 	bic.w	r3, r3, #1
 80060dc:	b2da      	uxtb	r2, r3
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	6a1b      	ldr	r3, [r3, #32]
 80060e8:	6978      	ldr	r0, [r7, #20]
 80060ea:	4798      	blx	r3
}
 80060ec:	bf00      	nop
 80060ee:	3718      	adds	r7, #24
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	20001184 	.word	0x20001184

080060f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006100:	f107 0308 	add.w	r3, r7, #8
 8006104:	4618      	mov	r0, r3
 8006106:	f000 f857 	bl	80061b8 <prvGetNextExpireTime>
 800610a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	4619      	mov	r1, r3
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 f803 	bl	800611c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006116:	f000 f8d5 	bl	80062c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800611a:	e7f1      	b.n	8006100 <prvTimerTask+0x8>

0800611c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006126:	f7ff fa31 	bl	800558c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800612a:	f107 0308 	add.w	r3, r7, #8
 800612e:	4618      	mov	r0, r3
 8006130:	f000 f866 	bl	8006200 <prvSampleTimeNow>
 8006134:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d130      	bne.n	800619e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10a      	bne.n	8006158 <prvProcessTimerOrBlockTask+0x3c>
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	429a      	cmp	r2, r3
 8006148:	d806      	bhi.n	8006158 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800614a:	f7ff fa2d 	bl	80055a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800614e:	68f9      	ldr	r1, [r7, #12]
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f7ff ff85 	bl	8006060 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006156:	e024      	b.n	80061a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d008      	beq.n	8006170 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800615e:	4b13      	ldr	r3, [pc, #76]	; (80061ac <prvProcessTimerOrBlockTask+0x90>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d101      	bne.n	800616c <prvProcessTimerOrBlockTask+0x50>
 8006168:	2301      	movs	r3, #1
 800616a:	e000      	b.n	800616e <prvProcessTimerOrBlockTask+0x52>
 800616c:	2300      	movs	r3, #0
 800616e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006170:	4b0f      	ldr	r3, [pc, #60]	; (80061b0 <prvProcessTimerOrBlockTask+0x94>)
 8006172:	6818      	ldr	r0, [r3, #0]
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	4619      	mov	r1, r3
 800617e:	f7fe ff95 	bl	80050ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006182:	f7ff fa11 	bl	80055a8 <xTaskResumeAll>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10a      	bne.n	80061a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800618c:	4b09      	ldr	r3, [pc, #36]	; (80061b4 <prvProcessTimerOrBlockTask+0x98>)
 800618e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	f3bf 8f4f 	dsb	sy
 8006198:	f3bf 8f6f 	isb	sy
}
 800619c:	e001      	b.n	80061a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800619e:	f7ff fa03 	bl	80055a8 <xTaskResumeAll>
}
 80061a2:	bf00      	nop
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	20001188 	.word	0x20001188
 80061b0:	2000118c 	.word	0x2000118c
 80061b4:	e000ed04 	.word	0xe000ed04

080061b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80061c0:	4b0e      	ldr	r3, [pc, #56]	; (80061fc <prvGetNextExpireTime+0x44>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d101      	bne.n	80061ce <prvGetNextExpireTime+0x16>
 80061ca:	2201      	movs	r2, #1
 80061cc:	e000      	b.n	80061d0 <prvGetNextExpireTime+0x18>
 80061ce:	2200      	movs	r2, #0
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d105      	bne.n	80061e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061dc:	4b07      	ldr	r3, [pc, #28]	; (80061fc <prvGetNextExpireTime+0x44>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	60fb      	str	r3, [r7, #12]
 80061e6:	e001      	b.n	80061ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80061e8:	2300      	movs	r3, #0
 80061ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80061ec:	68fb      	ldr	r3, [r7, #12]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3714      	adds	r7, #20
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	20001184 	.word	0x20001184

08006200 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006208:	f7ff fa6c 	bl	80056e4 <xTaskGetTickCount>
 800620c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800620e:	4b0b      	ldr	r3, [pc, #44]	; (800623c <prvSampleTimeNow+0x3c>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	429a      	cmp	r2, r3
 8006216:	d205      	bcs.n	8006224 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006218:	f000 f936 	bl	8006488 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	601a      	str	r2, [r3, #0]
 8006222:	e002      	b.n	800622a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800622a:	4a04      	ldr	r2, [pc, #16]	; (800623c <prvSampleTimeNow+0x3c>)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006230:	68fb      	ldr	r3, [r7, #12]
}
 8006232:	4618      	mov	r0, r3
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	20001194 	.word	0x20001194

08006240 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
 800624c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800624e:	2300      	movs	r3, #0
 8006250:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	429a      	cmp	r2, r3
 8006264:	d812      	bhi.n	800628c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	1ad2      	subs	r2, r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	429a      	cmp	r2, r3
 8006272:	d302      	bcc.n	800627a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006274:	2301      	movs	r3, #1
 8006276:	617b      	str	r3, [r7, #20]
 8006278:	e01b      	b.n	80062b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800627a:	4b10      	ldr	r3, [pc, #64]	; (80062bc <prvInsertTimerInActiveList+0x7c>)
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	3304      	adds	r3, #4
 8006282:	4619      	mov	r1, r3
 8006284:	4610      	mov	r0, r2
 8006286:	f7fe f9bc 	bl	8004602 <vListInsert>
 800628a:	e012      	b.n	80062b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	429a      	cmp	r2, r3
 8006292:	d206      	bcs.n	80062a2 <prvInsertTimerInActiveList+0x62>
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	429a      	cmp	r2, r3
 800629a:	d302      	bcc.n	80062a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800629c:	2301      	movs	r3, #1
 800629e:	617b      	str	r3, [r7, #20]
 80062a0:	e007      	b.n	80062b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062a2:	4b07      	ldr	r3, [pc, #28]	; (80062c0 <prvInsertTimerInActiveList+0x80>)
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	3304      	adds	r3, #4
 80062aa:	4619      	mov	r1, r3
 80062ac:	4610      	mov	r0, r2
 80062ae:	f7fe f9a8 	bl	8004602 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80062b2:	697b      	ldr	r3, [r7, #20]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3718      	adds	r7, #24
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	20001188 	.word	0x20001188
 80062c0:	20001184 	.word	0x20001184

080062c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b08e      	sub	sp, #56	; 0x38
 80062c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062ca:	e0ca      	b.n	8006462 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	da18      	bge.n	8006304 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80062d2:	1d3b      	adds	r3, r7, #4
 80062d4:	3304      	adds	r3, #4
 80062d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80062d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10a      	bne.n	80062f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80062de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e2:	f383 8811 	msr	BASEPRI, r3
 80062e6:	f3bf 8f6f 	isb	sy
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	61fb      	str	r3, [r7, #28]
}
 80062f0:	bf00      	nop
 80062f2:	e7fe      	b.n	80062f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80062f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062fa:	6850      	ldr	r0, [r2, #4]
 80062fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062fe:	6892      	ldr	r2, [r2, #8]
 8006300:	4611      	mov	r1, r2
 8006302:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	f2c0 80ab 	blt.w	8006462 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d004      	beq.n	8006322 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631a:	3304      	adds	r3, #4
 800631c:	4618      	mov	r0, r3
 800631e:	f7fe f9a9 	bl	8004674 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006322:	463b      	mov	r3, r7
 8006324:	4618      	mov	r0, r3
 8006326:	f7ff ff6b 	bl	8006200 <prvSampleTimeNow>
 800632a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b09      	cmp	r3, #9
 8006330:	f200 8096 	bhi.w	8006460 <prvProcessReceivedCommands+0x19c>
 8006334:	a201      	add	r2, pc, #4	; (adr r2, 800633c <prvProcessReceivedCommands+0x78>)
 8006336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633a:	bf00      	nop
 800633c:	08006365 	.word	0x08006365
 8006340:	08006365 	.word	0x08006365
 8006344:	08006365 	.word	0x08006365
 8006348:	080063d9 	.word	0x080063d9
 800634c:	080063ed 	.word	0x080063ed
 8006350:	08006437 	.word	0x08006437
 8006354:	08006365 	.word	0x08006365
 8006358:	08006365 	.word	0x08006365
 800635c:	080063d9 	.word	0x080063d9
 8006360:	080063ed 	.word	0x080063ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006366:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800636a:	f043 0301 	orr.w	r3, r3, #1
 800636e:	b2da      	uxtb	r2, r3
 8006370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006372:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	18d1      	adds	r1, r2, r3
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006382:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006384:	f7ff ff5c 	bl	8006240 <prvInsertTimerInActiveList>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d069      	beq.n	8006462 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800638e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006394:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006398:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800639c:	f003 0304 	and.w	r3, r3, #4
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d05e      	beq.n	8006462 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80063a4:	68ba      	ldr	r2, [r7, #8]
 80063a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	441a      	add	r2, r3
 80063ac:	2300      	movs	r3, #0
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	2300      	movs	r3, #0
 80063b2:	2100      	movs	r1, #0
 80063b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063b6:	f7ff fe05 	bl	8005fc4 <xTimerGenericCommand>
 80063ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80063bc:	6a3b      	ldr	r3, [r7, #32]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d14f      	bne.n	8006462 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80063c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	61bb      	str	r3, [r7, #24]
}
 80063d4:	bf00      	nop
 80063d6:	e7fe      	b.n	80063d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063de:	f023 0301 	bic.w	r3, r3, #1
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80063ea:	e03a      	b.n	8006462 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063f2:	f043 0301 	orr.w	r3, r3, #1
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006402:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10a      	bne.n	8006422 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800640c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	617b      	str	r3, [r7, #20]
}
 800641e:	bf00      	nop
 8006420:	e7fe      	b.n	8006420 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006424:	699a      	ldr	r2, [r3, #24]
 8006426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006428:	18d1      	adds	r1, r2, r3
 800642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800642e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006430:	f7ff ff06 	bl	8006240 <prvInsertTimerInActiveList>
					break;
 8006434:	e015      	b.n	8006462 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006438:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800643c:	f003 0302 	and.w	r3, r3, #2
 8006440:	2b00      	cmp	r3, #0
 8006442:	d103      	bne.n	800644c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006446:	f000 fbdb 	bl	8006c00 <vPortFree>
 800644a:	e00a      	b.n	8006462 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800644c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006452:	f023 0301 	bic.w	r3, r3, #1
 8006456:	b2da      	uxtb	r2, r3
 8006458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800645e:	e000      	b.n	8006462 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006460:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006462:	4b08      	ldr	r3, [pc, #32]	; (8006484 <prvProcessReceivedCommands+0x1c0>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	1d39      	adds	r1, r7, #4
 8006468:	2200      	movs	r2, #0
 800646a:	4618      	mov	r0, r3
 800646c:	f7fe fc04 	bl	8004c78 <xQueueReceive>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	f47f af2a 	bne.w	80062cc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006478:	bf00      	nop
 800647a:	bf00      	nop
 800647c:	3730      	adds	r7, #48	; 0x30
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	2000118c 	.word	0x2000118c

08006488 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b088      	sub	sp, #32
 800648c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800648e:	e048      	b.n	8006522 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006490:	4b2d      	ldr	r3, [pc, #180]	; (8006548 <prvSwitchTimerLists+0xc0>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800649a:	4b2b      	ldr	r3, [pc, #172]	; (8006548 <prvSwitchTimerLists+0xc0>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	3304      	adds	r3, #4
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7fe f8e3 	bl	8004674 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064bc:	f003 0304 	and.w	r3, r3, #4
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d02e      	beq.n	8006522 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	4413      	add	r3, r2
 80064cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d90e      	bls.n	80064f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	68ba      	ldr	r2, [r7, #8]
 80064da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064e2:	4b19      	ldr	r3, [pc, #100]	; (8006548 <prvSwitchTimerLists+0xc0>)
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	3304      	adds	r3, #4
 80064ea:	4619      	mov	r1, r3
 80064ec:	4610      	mov	r0, r2
 80064ee:	f7fe f888 	bl	8004602 <vListInsert>
 80064f2:	e016      	b.n	8006522 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064f4:	2300      	movs	r3, #0
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	2300      	movs	r3, #0
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	2100      	movs	r1, #0
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f7ff fd60 	bl	8005fc4 <xTimerGenericCommand>
 8006504:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10a      	bne.n	8006522 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800650c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006510:	f383 8811 	msr	BASEPRI, r3
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	603b      	str	r3, [r7, #0]
}
 800651e:	bf00      	nop
 8006520:	e7fe      	b.n	8006520 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006522:	4b09      	ldr	r3, [pc, #36]	; (8006548 <prvSwitchTimerLists+0xc0>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1b1      	bne.n	8006490 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800652c:	4b06      	ldr	r3, [pc, #24]	; (8006548 <prvSwitchTimerLists+0xc0>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006532:	4b06      	ldr	r3, [pc, #24]	; (800654c <prvSwitchTimerLists+0xc4>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a04      	ldr	r2, [pc, #16]	; (8006548 <prvSwitchTimerLists+0xc0>)
 8006538:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800653a:	4a04      	ldr	r2, [pc, #16]	; (800654c <prvSwitchTimerLists+0xc4>)
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	6013      	str	r3, [r2, #0]
}
 8006540:	bf00      	nop
 8006542:	3718      	adds	r7, #24
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	20001184 	.word	0x20001184
 800654c:	20001188 	.word	0x20001188

08006550 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006556:	f000 f965 	bl	8006824 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800655a:	4b15      	ldr	r3, [pc, #84]	; (80065b0 <prvCheckForValidListAndQueue+0x60>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d120      	bne.n	80065a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006562:	4814      	ldr	r0, [pc, #80]	; (80065b4 <prvCheckForValidListAndQueue+0x64>)
 8006564:	f7fd fffc 	bl	8004560 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006568:	4813      	ldr	r0, [pc, #76]	; (80065b8 <prvCheckForValidListAndQueue+0x68>)
 800656a:	f7fd fff9 	bl	8004560 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800656e:	4b13      	ldr	r3, [pc, #76]	; (80065bc <prvCheckForValidListAndQueue+0x6c>)
 8006570:	4a10      	ldr	r2, [pc, #64]	; (80065b4 <prvCheckForValidListAndQueue+0x64>)
 8006572:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006574:	4b12      	ldr	r3, [pc, #72]	; (80065c0 <prvCheckForValidListAndQueue+0x70>)
 8006576:	4a10      	ldr	r2, [pc, #64]	; (80065b8 <prvCheckForValidListAndQueue+0x68>)
 8006578:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800657a:	2300      	movs	r3, #0
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	4b11      	ldr	r3, [pc, #68]	; (80065c4 <prvCheckForValidListAndQueue+0x74>)
 8006580:	4a11      	ldr	r2, [pc, #68]	; (80065c8 <prvCheckForValidListAndQueue+0x78>)
 8006582:	2110      	movs	r1, #16
 8006584:	200a      	movs	r0, #10
 8006586:	f7fe f907 	bl	8004798 <xQueueGenericCreateStatic>
 800658a:	4603      	mov	r3, r0
 800658c:	4a08      	ldr	r2, [pc, #32]	; (80065b0 <prvCheckForValidListAndQueue+0x60>)
 800658e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006590:	4b07      	ldr	r3, [pc, #28]	; (80065b0 <prvCheckForValidListAndQueue+0x60>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d005      	beq.n	80065a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006598:	4b05      	ldr	r3, [pc, #20]	; (80065b0 <prvCheckForValidListAndQueue+0x60>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	490b      	ldr	r1, [pc, #44]	; (80065cc <prvCheckForValidListAndQueue+0x7c>)
 800659e:	4618      	mov	r0, r3
 80065a0:	f7fe fd5a 	bl	8005058 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80065a4:	f000 f96e 	bl	8006884 <vPortExitCritical>
}
 80065a8:	bf00      	nop
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	2000118c 	.word	0x2000118c
 80065b4:	2000115c 	.word	0x2000115c
 80065b8:	20001170 	.word	0x20001170
 80065bc:	20001184 	.word	0x20001184
 80065c0:	20001188 	.word	0x20001188
 80065c4:	20001238 	.word	0x20001238
 80065c8:	20001198 	.word	0x20001198
 80065cc:	08006f48 	.word	0x08006f48

080065d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	3b04      	subs	r3, #4
 80065e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80065e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	3b04      	subs	r3, #4
 80065ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	f023 0201 	bic.w	r2, r3, #1
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	3b04      	subs	r3, #4
 80065fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006600:	4a0c      	ldr	r2, [pc, #48]	; (8006634 <pxPortInitialiseStack+0x64>)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	3b14      	subs	r3, #20
 800660a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	3b04      	subs	r3, #4
 8006616:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f06f 0202 	mvn.w	r2, #2
 800661e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	3b20      	subs	r3, #32
 8006624:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006626:	68fb      	ldr	r3, [r7, #12]
}
 8006628:	4618      	mov	r0, r3
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr
 8006634:	08006639 	.word	0x08006639

08006638 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800663e:	2300      	movs	r3, #0
 8006640:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006642:	4b12      	ldr	r3, [pc, #72]	; (800668c <prvTaskExitError+0x54>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664a:	d00a      	beq.n	8006662 <prvTaskExitError+0x2a>
	__asm volatile
 800664c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006650:	f383 8811 	msr	BASEPRI, r3
 8006654:	f3bf 8f6f 	isb	sy
 8006658:	f3bf 8f4f 	dsb	sy
 800665c:	60fb      	str	r3, [r7, #12]
}
 800665e:	bf00      	nop
 8006660:	e7fe      	b.n	8006660 <prvTaskExitError+0x28>
	__asm volatile
 8006662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006666:	f383 8811 	msr	BASEPRI, r3
 800666a:	f3bf 8f6f 	isb	sy
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	60bb      	str	r3, [r7, #8]
}
 8006674:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006676:	bf00      	nop
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d0fc      	beq.n	8006678 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800667e:	bf00      	nop
 8006680:	bf00      	nop
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	20000024 	.word	0x20000024

08006690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006690:	4b07      	ldr	r3, [pc, #28]	; (80066b0 <pxCurrentTCBConst2>)
 8006692:	6819      	ldr	r1, [r3, #0]
 8006694:	6808      	ldr	r0, [r1, #0]
 8006696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800669a:	f380 8809 	msr	PSP, r0
 800669e:	f3bf 8f6f 	isb	sy
 80066a2:	f04f 0000 	mov.w	r0, #0
 80066a6:	f380 8811 	msr	BASEPRI, r0
 80066aa:	4770      	bx	lr
 80066ac:	f3af 8000 	nop.w

080066b0 <pxCurrentTCBConst2>:
 80066b0:	20000c5c 	.word	0x20000c5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80066b4:	bf00      	nop
 80066b6:	bf00      	nop

080066b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80066b8:	4808      	ldr	r0, [pc, #32]	; (80066dc <prvPortStartFirstTask+0x24>)
 80066ba:	6800      	ldr	r0, [r0, #0]
 80066bc:	6800      	ldr	r0, [r0, #0]
 80066be:	f380 8808 	msr	MSP, r0
 80066c2:	f04f 0000 	mov.w	r0, #0
 80066c6:	f380 8814 	msr	CONTROL, r0
 80066ca:	b662      	cpsie	i
 80066cc:	b661      	cpsie	f
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	df00      	svc	0
 80066d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80066da:	bf00      	nop
 80066dc:	e000ed08 	.word	0xe000ed08

080066e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80066e6:	4b46      	ldr	r3, [pc, #280]	; (8006800 <xPortStartScheduler+0x120>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a46      	ldr	r2, [pc, #280]	; (8006804 <xPortStartScheduler+0x124>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d10a      	bne.n	8006706 <xPortStartScheduler+0x26>
	__asm volatile
 80066f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f4:	f383 8811 	msr	BASEPRI, r3
 80066f8:	f3bf 8f6f 	isb	sy
 80066fc:	f3bf 8f4f 	dsb	sy
 8006700:	613b      	str	r3, [r7, #16]
}
 8006702:	bf00      	nop
 8006704:	e7fe      	b.n	8006704 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006706:	4b3e      	ldr	r3, [pc, #248]	; (8006800 <xPortStartScheduler+0x120>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a3f      	ldr	r2, [pc, #252]	; (8006808 <xPortStartScheduler+0x128>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d10a      	bne.n	8006726 <xPortStartScheduler+0x46>
	__asm volatile
 8006710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006714:	f383 8811 	msr	BASEPRI, r3
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	60fb      	str	r3, [r7, #12]
}
 8006722:	bf00      	nop
 8006724:	e7fe      	b.n	8006724 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006726:	4b39      	ldr	r3, [pc, #228]	; (800680c <xPortStartScheduler+0x12c>)
 8006728:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	b2db      	uxtb	r3, r3
 8006730:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	22ff      	movs	r2, #255	; 0xff
 8006736:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	b2db      	uxtb	r3, r3
 800673e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006740:	78fb      	ldrb	r3, [r7, #3]
 8006742:	b2db      	uxtb	r3, r3
 8006744:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006748:	b2da      	uxtb	r2, r3
 800674a:	4b31      	ldr	r3, [pc, #196]	; (8006810 <xPortStartScheduler+0x130>)
 800674c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800674e:	4b31      	ldr	r3, [pc, #196]	; (8006814 <xPortStartScheduler+0x134>)
 8006750:	2207      	movs	r2, #7
 8006752:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006754:	e009      	b.n	800676a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006756:	4b2f      	ldr	r3, [pc, #188]	; (8006814 <xPortStartScheduler+0x134>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	3b01      	subs	r3, #1
 800675c:	4a2d      	ldr	r2, [pc, #180]	; (8006814 <xPortStartScheduler+0x134>)
 800675e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006760:	78fb      	ldrb	r3, [r7, #3]
 8006762:	b2db      	uxtb	r3, r3
 8006764:	005b      	lsls	r3, r3, #1
 8006766:	b2db      	uxtb	r3, r3
 8006768:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800676a:	78fb      	ldrb	r3, [r7, #3]
 800676c:	b2db      	uxtb	r3, r3
 800676e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006772:	2b80      	cmp	r3, #128	; 0x80
 8006774:	d0ef      	beq.n	8006756 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006776:	4b27      	ldr	r3, [pc, #156]	; (8006814 <xPortStartScheduler+0x134>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f1c3 0307 	rsb	r3, r3, #7
 800677e:	2b04      	cmp	r3, #4
 8006780:	d00a      	beq.n	8006798 <xPortStartScheduler+0xb8>
	__asm volatile
 8006782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006786:	f383 8811 	msr	BASEPRI, r3
 800678a:	f3bf 8f6f 	isb	sy
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	60bb      	str	r3, [r7, #8]
}
 8006794:	bf00      	nop
 8006796:	e7fe      	b.n	8006796 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006798:	4b1e      	ldr	r3, [pc, #120]	; (8006814 <xPortStartScheduler+0x134>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	021b      	lsls	r3, r3, #8
 800679e:	4a1d      	ldr	r2, [pc, #116]	; (8006814 <xPortStartScheduler+0x134>)
 80067a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80067a2:	4b1c      	ldr	r3, [pc, #112]	; (8006814 <xPortStartScheduler+0x134>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067aa:	4a1a      	ldr	r2, [pc, #104]	; (8006814 <xPortStartScheduler+0x134>)
 80067ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	b2da      	uxtb	r2, r3
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80067b6:	4b18      	ldr	r3, [pc, #96]	; (8006818 <xPortStartScheduler+0x138>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a17      	ldr	r2, [pc, #92]	; (8006818 <xPortStartScheduler+0x138>)
 80067bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80067c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80067c2:	4b15      	ldr	r3, [pc, #84]	; (8006818 <xPortStartScheduler+0x138>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a14      	ldr	r2, [pc, #80]	; (8006818 <xPortStartScheduler+0x138>)
 80067c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80067cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80067ce:	f000 f8dd 	bl	800698c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80067d2:	4b12      	ldr	r3, [pc, #72]	; (800681c <xPortStartScheduler+0x13c>)
 80067d4:	2200      	movs	r2, #0
 80067d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80067d8:	f000 f8fc 	bl	80069d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80067dc:	4b10      	ldr	r3, [pc, #64]	; (8006820 <xPortStartScheduler+0x140>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a0f      	ldr	r2, [pc, #60]	; (8006820 <xPortStartScheduler+0x140>)
 80067e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80067e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80067e8:	f7ff ff66 	bl	80066b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80067ec:	f7ff f856 	bl	800589c <vTaskSwitchContext>
	prvTaskExitError();
 80067f0:	f7ff ff22 	bl	8006638 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3718      	adds	r7, #24
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	e000ed00 	.word	0xe000ed00
 8006804:	410fc271 	.word	0x410fc271
 8006808:	410fc270 	.word	0x410fc270
 800680c:	e000e400 	.word	0xe000e400
 8006810:	20001288 	.word	0x20001288
 8006814:	2000128c 	.word	0x2000128c
 8006818:	e000ed20 	.word	0xe000ed20
 800681c:	20000024 	.word	0x20000024
 8006820:	e000ef34 	.word	0xe000ef34

08006824 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
	__asm volatile
 800682a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682e:	f383 8811 	msr	BASEPRI, r3
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	f3bf 8f4f 	dsb	sy
 800683a:	607b      	str	r3, [r7, #4]
}
 800683c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800683e:	4b0f      	ldr	r3, [pc, #60]	; (800687c <vPortEnterCritical+0x58>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	3301      	adds	r3, #1
 8006844:	4a0d      	ldr	r2, [pc, #52]	; (800687c <vPortEnterCritical+0x58>)
 8006846:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006848:	4b0c      	ldr	r3, [pc, #48]	; (800687c <vPortEnterCritical+0x58>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d10f      	bne.n	8006870 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006850:	4b0b      	ldr	r3, [pc, #44]	; (8006880 <vPortEnterCritical+0x5c>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00a      	beq.n	8006870 <vPortEnterCritical+0x4c>
	__asm volatile
 800685a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685e:	f383 8811 	msr	BASEPRI, r3
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	f3bf 8f4f 	dsb	sy
 800686a:	603b      	str	r3, [r7, #0]
}
 800686c:	bf00      	nop
 800686e:	e7fe      	b.n	800686e <vPortEnterCritical+0x4a>
	}
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr
 800687c:	20000024 	.word	0x20000024
 8006880:	e000ed04 	.word	0xe000ed04

08006884 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800688a:	4b12      	ldr	r3, [pc, #72]	; (80068d4 <vPortExitCritical+0x50>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10a      	bne.n	80068a8 <vPortExitCritical+0x24>
	__asm volatile
 8006892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006896:	f383 8811 	msr	BASEPRI, r3
 800689a:	f3bf 8f6f 	isb	sy
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	607b      	str	r3, [r7, #4]
}
 80068a4:	bf00      	nop
 80068a6:	e7fe      	b.n	80068a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80068a8:	4b0a      	ldr	r3, [pc, #40]	; (80068d4 <vPortExitCritical+0x50>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	3b01      	subs	r3, #1
 80068ae:	4a09      	ldr	r2, [pc, #36]	; (80068d4 <vPortExitCritical+0x50>)
 80068b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80068b2:	4b08      	ldr	r3, [pc, #32]	; (80068d4 <vPortExitCritical+0x50>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d105      	bne.n	80068c6 <vPortExitCritical+0x42>
 80068ba:	2300      	movs	r3, #0
 80068bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	f383 8811 	msr	BASEPRI, r3
}
 80068c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80068c6:	bf00      	nop
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	20000024 	.word	0x20000024
	...

080068e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80068e0:	f3ef 8009 	mrs	r0, PSP
 80068e4:	f3bf 8f6f 	isb	sy
 80068e8:	4b15      	ldr	r3, [pc, #84]	; (8006940 <pxCurrentTCBConst>)
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	f01e 0f10 	tst.w	lr, #16
 80068f0:	bf08      	it	eq
 80068f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80068f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068fa:	6010      	str	r0, [r2, #0]
 80068fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006900:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006904:	f380 8811 	msr	BASEPRI, r0
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	f3bf 8f6f 	isb	sy
 8006910:	f7fe ffc4 	bl	800589c <vTaskSwitchContext>
 8006914:	f04f 0000 	mov.w	r0, #0
 8006918:	f380 8811 	msr	BASEPRI, r0
 800691c:	bc09      	pop	{r0, r3}
 800691e:	6819      	ldr	r1, [r3, #0]
 8006920:	6808      	ldr	r0, [r1, #0]
 8006922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006926:	f01e 0f10 	tst.w	lr, #16
 800692a:	bf08      	it	eq
 800692c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006930:	f380 8809 	msr	PSP, r0
 8006934:	f3bf 8f6f 	isb	sy
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	f3af 8000 	nop.w

08006940 <pxCurrentTCBConst>:
 8006940:	20000c5c 	.word	0x20000c5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006944:	bf00      	nop
 8006946:	bf00      	nop

08006948 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
	__asm volatile
 800694e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006952:	f383 8811 	msr	BASEPRI, r3
 8006956:	f3bf 8f6f 	isb	sy
 800695a:	f3bf 8f4f 	dsb	sy
 800695e:	607b      	str	r3, [r7, #4]
}
 8006960:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006962:	f7fe fee1 	bl	8005728 <xTaskIncrementTick>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d003      	beq.n	8006974 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800696c:	4b06      	ldr	r3, [pc, #24]	; (8006988 <xPortSysTickHandler+0x40>)
 800696e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006972:	601a      	str	r2, [r3, #0]
 8006974:	2300      	movs	r3, #0
 8006976:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	f383 8811 	msr	BASEPRI, r3
}
 800697e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006980:	bf00      	nop
 8006982:	3708      	adds	r7, #8
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	e000ed04 	.word	0xe000ed04

0800698c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800698c:	b480      	push	{r7}
 800698e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006990:	4b0b      	ldr	r3, [pc, #44]	; (80069c0 <vPortSetupTimerInterrupt+0x34>)
 8006992:	2200      	movs	r2, #0
 8006994:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006996:	4b0b      	ldr	r3, [pc, #44]	; (80069c4 <vPortSetupTimerInterrupt+0x38>)
 8006998:	2200      	movs	r2, #0
 800699a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800699c:	4b0a      	ldr	r3, [pc, #40]	; (80069c8 <vPortSetupTimerInterrupt+0x3c>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a0a      	ldr	r2, [pc, #40]	; (80069cc <vPortSetupTimerInterrupt+0x40>)
 80069a2:	fba2 2303 	umull	r2, r3, r2, r3
 80069a6:	099b      	lsrs	r3, r3, #6
 80069a8:	4a09      	ldr	r2, [pc, #36]	; (80069d0 <vPortSetupTimerInterrupt+0x44>)
 80069aa:	3b01      	subs	r3, #1
 80069ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80069ae:	4b04      	ldr	r3, [pc, #16]	; (80069c0 <vPortSetupTimerInterrupt+0x34>)
 80069b0:	2207      	movs	r2, #7
 80069b2:	601a      	str	r2, [r3, #0]
}
 80069b4:	bf00      	nop
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	e000e010 	.word	0xe000e010
 80069c4:	e000e018 	.word	0xe000e018
 80069c8:	20000018 	.word	0x20000018
 80069cc:	10624dd3 	.word	0x10624dd3
 80069d0:	e000e014 	.word	0xe000e014

080069d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80069d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80069e4 <vPortEnableVFP+0x10>
 80069d8:	6801      	ldr	r1, [r0, #0]
 80069da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80069de:	6001      	str	r1, [r0, #0]
 80069e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80069e2:	bf00      	nop
 80069e4:	e000ed88 	.word	0xe000ed88

080069e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80069ee:	f3ef 8305 	mrs	r3, IPSR
 80069f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2b0f      	cmp	r3, #15
 80069f8:	d914      	bls.n	8006a24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80069fa:	4a17      	ldr	r2, [pc, #92]	; (8006a58 <vPortValidateInterruptPriority+0x70>)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	4413      	add	r3, r2
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a04:	4b15      	ldr	r3, [pc, #84]	; (8006a5c <vPortValidateInterruptPriority+0x74>)
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	7afa      	ldrb	r2, [r7, #11]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d20a      	bcs.n	8006a24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a12:	f383 8811 	msr	BASEPRI, r3
 8006a16:	f3bf 8f6f 	isb	sy
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	607b      	str	r3, [r7, #4]
}
 8006a20:	bf00      	nop
 8006a22:	e7fe      	b.n	8006a22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a24:	4b0e      	ldr	r3, [pc, #56]	; (8006a60 <vPortValidateInterruptPriority+0x78>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006a2c:	4b0d      	ldr	r3, [pc, #52]	; (8006a64 <vPortValidateInterruptPriority+0x7c>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d90a      	bls.n	8006a4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a38:	f383 8811 	msr	BASEPRI, r3
 8006a3c:	f3bf 8f6f 	isb	sy
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	603b      	str	r3, [r7, #0]
}
 8006a46:	bf00      	nop
 8006a48:	e7fe      	b.n	8006a48 <vPortValidateInterruptPriority+0x60>
	}
 8006a4a:	bf00      	nop
 8006a4c:	3714      	adds	r7, #20
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	e000e3f0 	.word	0xe000e3f0
 8006a5c:	20001288 	.word	0x20001288
 8006a60:	e000ed0c 	.word	0xe000ed0c
 8006a64:	2000128c 	.word	0x2000128c

08006a68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b08a      	sub	sp, #40	; 0x28
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a70:	2300      	movs	r3, #0
 8006a72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a74:	f7fe fd8a 	bl	800558c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a78:	4b5b      	ldr	r3, [pc, #364]	; (8006be8 <pvPortMalloc+0x180>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d101      	bne.n	8006a84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a80:	f000 f920 	bl	8006cc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a84:	4b59      	ldr	r3, [pc, #356]	; (8006bec <pvPortMalloc+0x184>)
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f040 8093 	bne.w	8006bb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d01d      	beq.n	8006ad4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006a98:	2208      	movs	r2, #8
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f003 0307 	and.w	r3, r3, #7
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d014      	beq.n	8006ad4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f023 0307 	bic.w	r3, r3, #7
 8006ab0:	3308      	adds	r3, #8
 8006ab2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f003 0307 	and.w	r3, r3, #7
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00a      	beq.n	8006ad4 <pvPortMalloc+0x6c>
	__asm volatile
 8006abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	617b      	str	r3, [r7, #20]
}
 8006ad0:	bf00      	nop
 8006ad2:	e7fe      	b.n	8006ad2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d06e      	beq.n	8006bb8 <pvPortMalloc+0x150>
 8006ada:	4b45      	ldr	r3, [pc, #276]	; (8006bf0 <pvPortMalloc+0x188>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d869      	bhi.n	8006bb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ae4:	4b43      	ldr	r3, [pc, #268]	; (8006bf4 <pvPortMalloc+0x18c>)
 8006ae6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ae8:	4b42      	ldr	r3, [pc, #264]	; (8006bf4 <pvPortMalloc+0x18c>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006aee:	e004      	b.n	8006afa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d903      	bls.n	8006b0c <pvPortMalloc+0xa4>
 8006b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1f1      	bne.n	8006af0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b0c:	4b36      	ldr	r3, [pc, #216]	; (8006be8 <pvPortMalloc+0x180>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d050      	beq.n	8006bb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b16:	6a3b      	ldr	r3, [r7, #32]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2208      	movs	r2, #8
 8006b1c:	4413      	add	r3, r2
 8006b1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	6a3b      	ldr	r3, [r7, #32]
 8006b26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	1ad2      	subs	r2, r2, r3
 8006b30:	2308      	movs	r3, #8
 8006b32:	005b      	lsls	r3, r3, #1
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d91f      	bls.n	8006b78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	f003 0307 	and.w	r3, r3, #7
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00a      	beq.n	8006b60 <pvPortMalloc+0xf8>
	__asm volatile
 8006b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4e:	f383 8811 	msr	BASEPRI, r3
 8006b52:	f3bf 8f6f 	isb	sy
 8006b56:	f3bf 8f4f 	dsb	sy
 8006b5a:	613b      	str	r3, [r7, #16]
}
 8006b5c:	bf00      	nop
 8006b5e:	e7fe      	b.n	8006b5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	1ad2      	subs	r2, r2, r3
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b72:	69b8      	ldr	r0, [r7, #24]
 8006b74:	f000 f908 	bl	8006d88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b78:	4b1d      	ldr	r3, [pc, #116]	; (8006bf0 <pvPortMalloc+0x188>)
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	4a1b      	ldr	r2, [pc, #108]	; (8006bf0 <pvPortMalloc+0x188>)
 8006b84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b86:	4b1a      	ldr	r3, [pc, #104]	; (8006bf0 <pvPortMalloc+0x188>)
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	4b1b      	ldr	r3, [pc, #108]	; (8006bf8 <pvPortMalloc+0x190>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d203      	bcs.n	8006b9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b92:	4b17      	ldr	r3, [pc, #92]	; (8006bf0 <pvPortMalloc+0x188>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a18      	ldr	r2, [pc, #96]	; (8006bf8 <pvPortMalloc+0x190>)
 8006b98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	4b13      	ldr	r3, [pc, #76]	; (8006bec <pvPortMalloc+0x184>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006baa:	2200      	movs	r2, #0
 8006bac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006bae:	4b13      	ldr	r3, [pc, #76]	; (8006bfc <pvPortMalloc+0x194>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	4a11      	ldr	r2, [pc, #68]	; (8006bfc <pvPortMalloc+0x194>)
 8006bb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006bb8:	f7fe fcf6 	bl	80055a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	f003 0307 	and.w	r3, r3, #7
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00a      	beq.n	8006bdc <pvPortMalloc+0x174>
	__asm volatile
 8006bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bca:	f383 8811 	msr	BASEPRI, r3
 8006bce:	f3bf 8f6f 	isb	sy
 8006bd2:	f3bf 8f4f 	dsb	sy
 8006bd6:	60fb      	str	r3, [r7, #12]
}
 8006bd8:	bf00      	nop
 8006bda:	e7fe      	b.n	8006bda <pvPortMalloc+0x172>
	return pvReturn;
 8006bdc:	69fb      	ldr	r3, [r7, #28]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3728      	adds	r7, #40	; 0x28
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	20004e98 	.word	0x20004e98
 8006bec:	20004eac 	.word	0x20004eac
 8006bf0:	20004e9c 	.word	0x20004e9c
 8006bf4:	20004e90 	.word	0x20004e90
 8006bf8:	20004ea0 	.word	0x20004ea0
 8006bfc:	20004ea4 	.word	0x20004ea4

08006c00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b086      	sub	sp, #24
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d04d      	beq.n	8006cae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c12:	2308      	movs	r3, #8
 8006c14:	425b      	negs	r3, r3
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	4413      	add	r3, r2
 8006c1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	685a      	ldr	r2, [r3, #4]
 8006c24:	4b24      	ldr	r3, [pc, #144]	; (8006cb8 <vPortFree+0xb8>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4013      	ands	r3, r2
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10a      	bne.n	8006c44 <vPortFree+0x44>
	__asm volatile
 8006c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	60fb      	str	r3, [r7, #12]
}
 8006c40:	bf00      	nop
 8006c42:	e7fe      	b.n	8006c42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00a      	beq.n	8006c62 <vPortFree+0x62>
	__asm volatile
 8006c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c50:	f383 8811 	msr	BASEPRI, r3
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	f3bf 8f4f 	dsb	sy
 8006c5c:	60bb      	str	r3, [r7, #8]
}
 8006c5e:	bf00      	nop
 8006c60:	e7fe      	b.n	8006c60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	685a      	ldr	r2, [r3, #4]
 8006c66:	4b14      	ldr	r3, [pc, #80]	; (8006cb8 <vPortFree+0xb8>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d01e      	beq.n	8006cae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d11a      	bne.n	8006cae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	4b0e      	ldr	r3, [pc, #56]	; (8006cb8 <vPortFree+0xb8>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	43db      	mvns	r3, r3
 8006c82:	401a      	ands	r2, r3
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c88:	f7fe fc80 	bl	800558c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	685a      	ldr	r2, [r3, #4]
 8006c90:	4b0a      	ldr	r3, [pc, #40]	; (8006cbc <vPortFree+0xbc>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4413      	add	r3, r2
 8006c96:	4a09      	ldr	r2, [pc, #36]	; (8006cbc <vPortFree+0xbc>)
 8006c98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c9a:	6938      	ldr	r0, [r7, #16]
 8006c9c:	f000 f874 	bl	8006d88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006ca0:	4b07      	ldr	r3, [pc, #28]	; (8006cc0 <vPortFree+0xc0>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	4a06      	ldr	r2, [pc, #24]	; (8006cc0 <vPortFree+0xc0>)
 8006ca8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006caa:	f7fe fc7d 	bl	80055a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006cae:	bf00      	nop
 8006cb0:	3718      	adds	r7, #24
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	20004eac 	.word	0x20004eac
 8006cbc:	20004e9c 	.word	0x20004e9c
 8006cc0:	20004ea8 	.word	0x20004ea8

08006cc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006cca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006cce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006cd0:	4b27      	ldr	r3, [pc, #156]	; (8006d70 <prvHeapInit+0xac>)
 8006cd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f003 0307 	and.w	r3, r3, #7
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00c      	beq.n	8006cf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	3307      	adds	r3, #7
 8006ce2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f023 0307 	bic.w	r3, r3, #7
 8006cea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	4a1f      	ldr	r2, [pc, #124]	; (8006d70 <prvHeapInit+0xac>)
 8006cf4:	4413      	add	r3, r2
 8006cf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006cfc:	4a1d      	ldr	r2, [pc, #116]	; (8006d74 <prvHeapInit+0xb0>)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d02:	4b1c      	ldr	r3, [pc, #112]	; (8006d74 <prvHeapInit+0xb0>)
 8006d04:	2200      	movs	r2, #0
 8006d06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d10:	2208      	movs	r2, #8
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	1a9b      	subs	r3, r3, r2
 8006d16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f023 0307 	bic.w	r3, r3, #7
 8006d1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	4a15      	ldr	r2, [pc, #84]	; (8006d78 <prvHeapInit+0xb4>)
 8006d24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d26:	4b14      	ldr	r3, [pc, #80]	; (8006d78 <prvHeapInit+0xb4>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d2e:	4b12      	ldr	r3, [pc, #72]	; (8006d78 <prvHeapInit+0xb4>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2200      	movs	r2, #0
 8006d34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	1ad2      	subs	r2, r2, r3
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d44:	4b0c      	ldr	r3, [pc, #48]	; (8006d78 <prvHeapInit+0xb4>)
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	4a0a      	ldr	r2, [pc, #40]	; (8006d7c <prvHeapInit+0xb8>)
 8006d52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	4a09      	ldr	r2, [pc, #36]	; (8006d80 <prvHeapInit+0xbc>)
 8006d5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d5c:	4b09      	ldr	r3, [pc, #36]	; (8006d84 <prvHeapInit+0xc0>)
 8006d5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006d62:	601a      	str	r2, [r3, #0]
}
 8006d64:	bf00      	nop
 8006d66:	3714      	adds	r7, #20
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr
 8006d70:	20001290 	.word	0x20001290
 8006d74:	20004e90 	.word	0x20004e90
 8006d78:	20004e98 	.word	0x20004e98
 8006d7c:	20004ea0 	.word	0x20004ea0
 8006d80:	20004e9c 	.word	0x20004e9c
 8006d84:	20004eac 	.word	0x20004eac

08006d88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d90:	4b28      	ldr	r3, [pc, #160]	; (8006e34 <prvInsertBlockIntoFreeList+0xac>)
 8006d92:	60fb      	str	r3, [r7, #12]
 8006d94:	e002      	b.n	8006d9c <prvInsertBlockIntoFreeList+0x14>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	60fb      	str	r3, [r7, #12]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d8f7      	bhi.n	8006d96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	4413      	add	r3, r2
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d108      	bne.n	8006dca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	441a      	add	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	68ba      	ldr	r2, [r7, #8]
 8006dd4:	441a      	add	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d118      	bne.n	8006e10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	4b15      	ldr	r3, [pc, #84]	; (8006e38 <prvInsertBlockIntoFreeList+0xb0>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d00d      	beq.n	8006e06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685a      	ldr	r2, [r3, #4]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	441a      	add	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	601a      	str	r2, [r3, #0]
 8006e04:	e008      	b.n	8006e18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e06:	4b0c      	ldr	r3, [pc, #48]	; (8006e38 <prvInsertBlockIntoFreeList+0xb0>)
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	601a      	str	r2, [r3, #0]
 8006e0e:	e003      	b.n	8006e18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d002      	beq.n	8006e26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e26:	bf00      	nop
 8006e28:	3714      	adds	r7, #20
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	20004e90 	.word	0x20004e90
 8006e38:	20004e98 	.word	0x20004e98

08006e3c <memset>:
 8006e3c:	4402      	add	r2, r0
 8006e3e:	4603      	mov	r3, r0
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d100      	bne.n	8006e46 <memset+0xa>
 8006e44:	4770      	bx	lr
 8006e46:	f803 1b01 	strb.w	r1, [r3], #1
 8006e4a:	e7f9      	b.n	8006e40 <memset+0x4>

08006e4c <__libc_init_array>:
 8006e4c:	b570      	push	{r4, r5, r6, lr}
 8006e4e:	4d0d      	ldr	r5, [pc, #52]	; (8006e84 <__libc_init_array+0x38>)
 8006e50:	4c0d      	ldr	r4, [pc, #52]	; (8006e88 <__libc_init_array+0x3c>)
 8006e52:	1b64      	subs	r4, r4, r5
 8006e54:	10a4      	asrs	r4, r4, #2
 8006e56:	2600      	movs	r6, #0
 8006e58:	42a6      	cmp	r6, r4
 8006e5a:	d109      	bne.n	8006e70 <__libc_init_array+0x24>
 8006e5c:	4d0b      	ldr	r5, [pc, #44]	; (8006e8c <__libc_init_array+0x40>)
 8006e5e:	4c0c      	ldr	r4, [pc, #48]	; (8006e90 <__libc_init_array+0x44>)
 8006e60:	f000 f82e 	bl	8006ec0 <_init>
 8006e64:	1b64      	subs	r4, r4, r5
 8006e66:	10a4      	asrs	r4, r4, #2
 8006e68:	2600      	movs	r6, #0
 8006e6a:	42a6      	cmp	r6, r4
 8006e6c:	d105      	bne.n	8006e7a <__libc_init_array+0x2e>
 8006e6e:	bd70      	pop	{r4, r5, r6, pc}
 8006e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e74:	4798      	blx	r3
 8006e76:	3601      	adds	r6, #1
 8006e78:	e7ee      	b.n	8006e58 <__libc_init_array+0xc>
 8006e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e7e:	4798      	blx	r3
 8006e80:	3601      	adds	r6, #1
 8006e82:	e7f2      	b.n	8006e6a <__libc_init_array+0x1e>
 8006e84:	08007d98 	.word	0x08007d98
 8006e88:	08007d98 	.word	0x08007d98
 8006e8c:	08007d98 	.word	0x08007d98
 8006e90:	08007d9c 	.word	0x08007d9c

08006e94 <strcpy>:
 8006e94:	4603      	mov	r3, r0
 8006e96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e9a:	f803 2b01 	strb.w	r2, [r3], #1
 8006e9e:	2a00      	cmp	r2, #0
 8006ea0:	d1f9      	bne.n	8006e96 <strcpy+0x2>
 8006ea2:	4770      	bx	lr

08006ea4 <memcpy>:
 8006ea4:	440a      	add	r2, r1
 8006ea6:	4291      	cmp	r1, r2
 8006ea8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006eac:	d100      	bne.n	8006eb0 <memcpy+0xc>
 8006eae:	4770      	bx	lr
 8006eb0:	b510      	push	{r4, lr}
 8006eb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006eb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006eba:	4291      	cmp	r1, r2
 8006ebc:	d1f9      	bne.n	8006eb2 <memcpy+0xe>
 8006ebe:	bd10      	pop	{r4, pc}

08006ec0 <_init>:
 8006ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ec2:	bf00      	nop
 8006ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ec6:	bc08      	pop	{r3}
 8006ec8:	469e      	mov	lr, r3
 8006eca:	4770      	bx	lr

08006ecc <_fini>:
 8006ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ece:	bf00      	nop
 8006ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ed2:	bc08      	pop	{r3}
 8006ed4:	469e      	mov	lr, r3
 8006ed6:	4770      	bx	lr
